
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  status: 'status',
  version: 'version',
  statusCode: 'statusCode',
  statusMessage: 'statusMessage',
  time: 'time',
  cost: 'cost',
  tasksCount: 'tasksCount',
  tasksError: 'tasksError',
  requestTimestamp: 'requestTimestamp',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KeywordProfileScalarFieldEnum = {
  id: 'id',
  keywordId: 'keywordId',
  locationCode: 'locationCode',
  languageCode: 'languageCode',
  kiLastCheck: 'kiLastCheck',
  kiCompetition: 'kiCompetition',
  kiCompetitionLevel: 'kiCompetitionLevel',
  kiCpc: 'kiCpc',
  kiSearchVolume: 'kiSearchVolume',
  kiLowTopOfPageBid: 'kiLowTopOfPageBid',
  kiHighTopOfPageBid: 'kiHighTopOfPageBid',
  kiCategories: 'kiCategories',
  kiMonthlySearches: 'kiMonthlySearches',
  kpSynonymClusteringAlgorithm: 'kpSynonymClusteringAlgorithm',
  kpKeywordDifficulty: 'kpKeywordDifficulty',
  kpDetectedLanguage: 'kpDetectedLanguage',
  kpIsAnotherLanguage: 'kpIsAnotherLanguage',
  avgBacklinks: 'avgBacklinks',
  avgDofollow: 'avgDofollow',
  avgReferringPages: 'avgReferringPages',
  avgReferringDomains: 'avgReferringDomains',
  avgReferringMainDomains: 'avgReferringMainDomains',
  avgRank: 'avgRank',
  avgMainDomainRank: 'avgMainDomainRank',
  avgLastUpdatedTime: 'avgLastUpdatedTime',
  siMainIntent: 'siMainIntent',
  relatedKeywordIds: 'relatedKeywordIds',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KeywordRelationScalarFieldEnum = {
  id: 'id',
  seedKeywordId: 'seedKeywordId',
  relatedKeywordId: 'relatedKeywordId',
  taskId: 'taskId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KeywordScalarFieldEnum = {
  id: 'id',
  text: 'text',
  kiLastCheck: 'kiLastCheck',
  kiCompetition: 'kiCompetition',
  kiCompetitionLevel: 'kiCompetitionLevel',
  kiCpc: 'kiCpc',
  kiSearchVolume: 'kiSearchVolume',
  kiLowTopOfPageBid: 'kiLowTopOfPageBid',
  kiHighTopOfPageBid: 'kiHighTopOfPageBid',
  kiKeywordDifficulty: 'kiKeywordDifficulty',
  kiMainIntent: 'kiMainIntent',
  kiLastUpdatedKeywordInfo: 'kiLastUpdatedKeywordInfo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelatedResultScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  seedKeywordId: 'seedKeywordId',
  seType: 'seType',
  seedKeywords: 'seedKeywords',
  locationCode: 'locationCode',
  languageCode: 'languageCode',
  totalCount: 'totalCount',
  itemsCount: 'itemsCount',
  offset: 'offset',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResultScalarFieldEnum = {
  id: 'id',
  serpId: 'serpId',
  position: 'position',
  url: 'url',
  type: 'type',
  title: 'title',
  snippet: 'snippet',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SerpScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  keywordId: 'keywordId',
  type: 'type',
  seDomain: 'seDomain',
  locationCode: 'locationCode',
  languageCode: 'languageCode',
  checkUrl: 'checkUrl',
  fetchTimestampFromApi: 'fetchTimestampFromApi',
  itemTypes: 'itemTypes',
  seResultsCount: 'seResultsCount',
  itemsCount: 'itemsCount',
  refinementChips: 'refinementChips',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  seedKeywordId: 'seedKeywordId',
  keyword: 'keyword',
  statusFromApi: 'statusFromApi',
  receivedTimestamp: 'receivedTimestamp',
  resultStatusCode: 'resultStatusCode',
  resultStatusMessage: 'resultStatusMessage',
  resultTime: 'resultTime',
  resultCost: 'resultCost',
  resultCount: 'resultCount',
  path: 'path',
  resultPath: 'resultPath',
  location: 'location',
  searchEngine: 'searchEngine',
  languageCode: 'languageCode',
  device: 'device',
  os: 'os',
  depth: 'depth',
  errorDetails: 'errorDetails',
  resultData: 'resultData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  Job: 'Job',
  KeywordProfile: 'KeywordProfile',
  KeywordRelation: 'KeywordRelation',
  Keyword: 'Keyword',
  RelatedResult: 'RelatedResult',
  Result: 'Result',
  Serp: 'Serp',
  Task: 'Task'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
