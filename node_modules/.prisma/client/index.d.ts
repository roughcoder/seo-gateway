
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Job
 * 
 */
export type Job = $Result.DefaultSelection<Prisma.$JobPayload>
/**
 * Model KeywordProfile
 * 
 */
export type KeywordProfile = $Result.DefaultSelection<Prisma.$KeywordProfilePayload>
/**
 * Model KeywordRelation
 * 
 */
export type KeywordRelation = $Result.DefaultSelection<Prisma.$KeywordRelationPayload>
/**
 * Model Keyword
 * 
 */
export type Keyword = $Result.DefaultSelection<Prisma.$KeywordPayload>
/**
 * Model RelatedResult
 * 
 */
export type RelatedResult = $Result.DefaultSelection<Prisma.$RelatedResultPayload>
/**
 * Model Result
 * 
 */
export type Result = $Result.DefaultSelection<Prisma.$ResultPayload>
/**
 * Model Serp
 * 
 */
export type Serp = $Result.DefaultSelection<Prisma.$SerpPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Jobs
 * const jobs = await prisma.job.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Jobs
   * const jobs = await prisma.job.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.keywordProfile`: Exposes CRUD operations for the **KeywordProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KeywordProfiles
    * const keywordProfiles = await prisma.keywordProfile.findMany()
    * ```
    */
  get keywordProfile(): Prisma.KeywordProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.keywordRelation`: Exposes CRUD operations for the **KeywordRelation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KeywordRelations
    * const keywordRelations = await prisma.keywordRelation.findMany()
    * ```
    */
  get keywordRelation(): Prisma.KeywordRelationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.keyword`: Exposes CRUD operations for the **Keyword** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Keywords
    * const keywords = await prisma.keyword.findMany()
    * ```
    */
  get keyword(): Prisma.KeywordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.relatedResult`: Exposes CRUD operations for the **RelatedResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RelatedResults
    * const relatedResults = await prisma.relatedResult.findMany()
    * ```
    */
  get relatedResult(): Prisma.RelatedResultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.result`: Exposes CRUD operations for the **Result** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Results
    * const results = await prisma.result.findMany()
    * ```
    */
  get result(): Prisma.ResultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.serp`: Exposes CRUD operations for the **Serp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Serps
    * const serps = await prisma.serp.findMany()
    * ```
    */
  get serp(): Prisma.SerpDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Job: 'Job',
    KeywordProfile: 'KeywordProfile',
    KeywordRelation: 'KeywordRelation',
    Keyword: 'Keyword',
    RelatedResult: 'RelatedResult',
    Result: 'Result',
    Serp: 'Serp',
    Task: 'Task'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "job" | "keywordProfile" | "keywordRelation" | "keyword" | "relatedResult" | "result" | "serp" | "task"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Job: {
        payload: Prisma.$JobPayload<ExtArgs>
        fields: Prisma.JobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findFirst: {
            args: Prisma.JobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findMany: {
            args: Prisma.JobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          create: {
            args: Prisma.JobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          createMany: {
            args: Prisma.JobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          delete: {
            args: Prisma.JobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          update: {
            args: Prisma.JobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          deleteMany: {
            args: Prisma.JobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          upsert: {
            args: Prisma.JobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          aggregate: {
            args: Prisma.JobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob>
          }
          groupBy: {
            args: Prisma.JobGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobCountArgs<ExtArgs>
            result: $Utils.Optional<JobCountAggregateOutputType> | number
          }
        }
      }
      KeywordProfile: {
        payload: Prisma.$KeywordProfilePayload<ExtArgs>
        fields: Prisma.KeywordProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KeywordProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KeywordProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordProfilePayload>
          }
          findFirst: {
            args: Prisma.KeywordProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KeywordProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordProfilePayload>
          }
          findMany: {
            args: Prisma.KeywordProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordProfilePayload>[]
          }
          create: {
            args: Prisma.KeywordProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordProfilePayload>
          }
          createMany: {
            args: Prisma.KeywordProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KeywordProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordProfilePayload>[]
          }
          delete: {
            args: Prisma.KeywordProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordProfilePayload>
          }
          update: {
            args: Prisma.KeywordProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordProfilePayload>
          }
          deleteMany: {
            args: Prisma.KeywordProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KeywordProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KeywordProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordProfilePayload>[]
          }
          upsert: {
            args: Prisma.KeywordProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordProfilePayload>
          }
          aggregate: {
            args: Prisma.KeywordProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKeywordProfile>
          }
          groupBy: {
            args: Prisma.KeywordProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<KeywordProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.KeywordProfileCountArgs<ExtArgs>
            result: $Utils.Optional<KeywordProfileCountAggregateOutputType> | number
          }
        }
      }
      KeywordRelation: {
        payload: Prisma.$KeywordRelationPayload<ExtArgs>
        fields: Prisma.KeywordRelationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KeywordRelationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordRelationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KeywordRelationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordRelationPayload>
          }
          findFirst: {
            args: Prisma.KeywordRelationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordRelationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KeywordRelationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordRelationPayload>
          }
          findMany: {
            args: Prisma.KeywordRelationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordRelationPayload>[]
          }
          create: {
            args: Prisma.KeywordRelationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordRelationPayload>
          }
          createMany: {
            args: Prisma.KeywordRelationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KeywordRelationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordRelationPayload>[]
          }
          delete: {
            args: Prisma.KeywordRelationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordRelationPayload>
          }
          update: {
            args: Prisma.KeywordRelationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordRelationPayload>
          }
          deleteMany: {
            args: Prisma.KeywordRelationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KeywordRelationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KeywordRelationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordRelationPayload>[]
          }
          upsert: {
            args: Prisma.KeywordRelationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordRelationPayload>
          }
          aggregate: {
            args: Prisma.KeywordRelationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKeywordRelation>
          }
          groupBy: {
            args: Prisma.KeywordRelationGroupByArgs<ExtArgs>
            result: $Utils.Optional<KeywordRelationGroupByOutputType>[]
          }
          count: {
            args: Prisma.KeywordRelationCountArgs<ExtArgs>
            result: $Utils.Optional<KeywordRelationCountAggregateOutputType> | number
          }
        }
      }
      Keyword: {
        payload: Prisma.$KeywordPayload<ExtArgs>
        fields: Prisma.KeywordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KeywordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KeywordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>
          }
          findFirst: {
            args: Prisma.KeywordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KeywordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>
          }
          findMany: {
            args: Prisma.KeywordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>[]
          }
          create: {
            args: Prisma.KeywordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>
          }
          createMany: {
            args: Prisma.KeywordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KeywordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>[]
          }
          delete: {
            args: Prisma.KeywordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>
          }
          update: {
            args: Prisma.KeywordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>
          }
          deleteMany: {
            args: Prisma.KeywordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KeywordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KeywordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>[]
          }
          upsert: {
            args: Prisma.KeywordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KeywordPayload>
          }
          aggregate: {
            args: Prisma.KeywordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKeyword>
          }
          groupBy: {
            args: Prisma.KeywordGroupByArgs<ExtArgs>
            result: $Utils.Optional<KeywordGroupByOutputType>[]
          }
          count: {
            args: Prisma.KeywordCountArgs<ExtArgs>
            result: $Utils.Optional<KeywordCountAggregateOutputType> | number
          }
        }
      }
      RelatedResult: {
        payload: Prisma.$RelatedResultPayload<ExtArgs>
        fields: Prisma.RelatedResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RelatedResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RelatedResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedResultPayload>
          }
          findFirst: {
            args: Prisma.RelatedResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RelatedResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedResultPayload>
          }
          findMany: {
            args: Prisma.RelatedResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedResultPayload>[]
          }
          create: {
            args: Prisma.RelatedResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedResultPayload>
          }
          createMany: {
            args: Prisma.RelatedResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RelatedResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedResultPayload>[]
          }
          delete: {
            args: Prisma.RelatedResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedResultPayload>
          }
          update: {
            args: Prisma.RelatedResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedResultPayload>
          }
          deleteMany: {
            args: Prisma.RelatedResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RelatedResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RelatedResultUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedResultPayload>[]
          }
          upsert: {
            args: Prisma.RelatedResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedResultPayload>
          }
          aggregate: {
            args: Prisma.RelatedResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRelatedResult>
          }
          groupBy: {
            args: Prisma.RelatedResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<RelatedResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.RelatedResultCountArgs<ExtArgs>
            result: $Utils.Optional<RelatedResultCountAggregateOutputType> | number
          }
        }
      }
      Result: {
        payload: Prisma.$ResultPayload<ExtArgs>
        fields: Prisma.ResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          findFirst: {
            args: Prisma.ResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          findMany: {
            args: Prisma.ResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>[]
          }
          create: {
            args: Prisma.ResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          createMany: {
            args: Prisma.ResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResultCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>[]
          }
          delete: {
            args: Prisma.ResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          update: {
            args: Prisma.ResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          deleteMany: {
            args: Prisma.ResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResultUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>[]
          }
          upsert: {
            args: Prisma.ResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResultPayload>
          }
          aggregate: {
            args: Prisma.ResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResult>
          }
          groupBy: {
            args: Prisma.ResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResultCountArgs<ExtArgs>
            result: $Utils.Optional<ResultCountAggregateOutputType> | number
          }
        }
      }
      Serp: {
        payload: Prisma.$SerpPayload<ExtArgs>
        fields: Prisma.SerpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SerpFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SerpFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerpPayload>
          }
          findFirst: {
            args: Prisma.SerpFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SerpFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerpPayload>
          }
          findMany: {
            args: Prisma.SerpFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerpPayload>[]
          }
          create: {
            args: Prisma.SerpCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerpPayload>
          }
          createMany: {
            args: Prisma.SerpCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SerpCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerpPayload>[]
          }
          delete: {
            args: Prisma.SerpDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerpPayload>
          }
          update: {
            args: Prisma.SerpUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerpPayload>
          }
          deleteMany: {
            args: Prisma.SerpDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SerpUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SerpUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerpPayload>[]
          }
          upsert: {
            args: Prisma.SerpUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SerpPayload>
          }
          aggregate: {
            args: Prisma.SerpAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSerp>
          }
          groupBy: {
            args: Prisma.SerpGroupByArgs<ExtArgs>
            result: $Utils.Optional<SerpGroupByOutputType>[]
          }
          count: {
            args: Prisma.SerpCountArgs<ExtArgs>
            result: $Utils.Optional<SerpCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TaskUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    job?: JobOmit
    keywordProfile?: KeywordProfileOmit
    keywordRelation?: KeywordRelationOmit
    keyword?: KeywordOmit
    relatedResult?: RelatedResultOmit
    result?: ResultOmit
    serp?: SerpOmit
    task?: TaskOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type JobCountOutputType
   */

  export type JobCountOutputType = {
    tasks: number
  }

  export type JobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | JobCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCountOutputType
     */
    select?: JobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * Count Type KeywordCountOutputType
   */

  export type KeywordCountOutputType = {
    serps: number
    tasksAsSeed: number
    relationsAsSeed: number
    relationsAsRelated: number
    relatedResults: number
    keywordProfiles: number
  }

  export type KeywordCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serps?: boolean | KeywordCountOutputTypeCountSerpsArgs
    tasksAsSeed?: boolean | KeywordCountOutputTypeCountTasksAsSeedArgs
    relationsAsSeed?: boolean | KeywordCountOutputTypeCountRelationsAsSeedArgs
    relationsAsRelated?: boolean | KeywordCountOutputTypeCountRelationsAsRelatedArgs
    relatedResults?: boolean | KeywordCountOutputTypeCountRelatedResultsArgs
    keywordProfiles?: boolean | KeywordCountOutputTypeCountKeywordProfilesArgs
  }

  // Custom InputTypes
  /**
   * KeywordCountOutputType without action
   */
  export type KeywordCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordCountOutputType
     */
    select?: KeywordCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KeywordCountOutputType without action
   */
  export type KeywordCountOutputTypeCountSerpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SerpWhereInput
  }

  /**
   * KeywordCountOutputType without action
   */
  export type KeywordCountOutputTypeCountTasksAsSeedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * KeywordCountOutputType without action
   */
  export type KeywordCountOutputTypeCountRelationsAsSeedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeywordRelationWhereInput
  }

  /**
   * KeywordCountOutputType without action
   */
  export type KeywordCountOutputTypeCountRelationsAsRelatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeywordRelationWhereInput
  }

  /**
   * KeywordCountOutputType without action
   */
  export type KeywordCountOutputTypeCountRelatedResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatedResultWhereInput
  }

  /**
   * KeywordCountOutputType without action
   */
  export type KeywordCountOutputTypeCountKeywordProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeywordProfileWhereInput
  }


  /**
   * Count Type SerpCountOutputType
   */

  export type SerpCountOutputType = {
    result: number
  }

  export type SerpCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    result?: boolean | SerpCountOutputTypeCountResultArgs
  }

  // Custom InputTypes
  /**
   * SerpCountOutputType without action
   */
  export type SerpCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SerpCountOutputType
     */
    select?: SerpCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SerpCountOutputType without action
   */
  export type SerpCountOutputTypeCountResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResultWhereInput
  }


  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    serps: number
    keywordRelations: number
    relatedResults: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serps?: boolean | TaskCountOutputTypeCountSerpsArgs
    keywordRelations?: boolean | TaskCountOutputTypeCountKeywordRelationsArgs
    relatedResults?: boolean | TaskCountOutputTypeCountRelatedResultsArgs
  }

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountSerpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SerpWhereInput
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountKeywordRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeywordRelationWhereInput
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountRelatedResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatedResultWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Job
   */

  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobAvgAggregateOutputType = {
    statusCode: number | null
    cost: number | null
    tasksCount: number | null
    tasksError: number | null
  }

  export type JobSumAggregateOutputType = {
    statusCode: number | null
    cost: number | null
    tasksCount: number | null
    tasksError: number | null
  }

  export type JobMinAggregateOutputType = {
    id: string | null
    status: string | null
    version: string | null
    statusCode: number | null
    statusMessage: string | null
    time: string | null
    cost: number | null
    tasksCount: number | null
    tasksError: number | null
    requestTimestamp: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobMaxAggregateOutputType = {
    id: string | null
    status: string | null
    version: string | null
    statusCode: number | null
    statusMessage: string | null
    time: string | null
    cost: number | null
    tasksCount: number | null
    tasksError: number | null
    requestTimestamp: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    status: number
    version: number
    statusCode: number
    statusMessage: number
    time: number
    cost: number
    tasksCount: number
    tasksError: number
    requestTimestamp: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobAvgAggregateInputType = {
    statusCode?: true
    cost?: true
    tasksCount?: true
    tasksError?: true
  }

  export type JobSumAggregateInputType = {
    statusCode?: true
    cost?: true
    tasksCount?: true
    tasksError?: true
  }

  export type JobMinAggregateInputType = {
    id?: true
    status?: true
    version?: true
    statusCode?: true
    statusMessage?: true
    time?: true
    cost?: true
    tasksCount?: true
    tasksError?: true
    requestTimestamp?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    status?: true
    version?: true
    statusCode?: true
    statusMessage?: true
    time?: true
    cost?: true
    tasksCount?: true
    tasksError?: true
    requestTimestamp?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    status?: true
    version?: true
    statusCode?: true
    statusMessage?: true
    time?: true
    cost?: true
    tasksCount?: true
    tasksError?: true
    requestTimestamp?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Job to aggregate.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
    orderBy?: JobOrderByWithAggregationInput | JobOrderByWithAggregationInput[]
    by: JobScalarFieldEnum[] | JobScalarFieldEnum
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _avg?: JobAvgAggregateInputType
    _sum?: JobSumAggregateInputType
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }

  export type JobGroupByOutputType = {
    id: string
    status: string | null
    version: string | null
    statusCode: number | null
    statusMessage: string | null
    time: string | null
    cost: number | null
    tasksCount: number | null
    tasksError: number | null
    requestTimestamp: Date
    createdAt: Date
    updatedAt: Date
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    version?: boolean
    statusCode?: boolean
    statusMessage?: boolean
    time?: boolean
    cost?: boolean
    tasksCount?: boolean
    tasksError?: boolean
    requestTimestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tasks?: boolean | Job$tasksArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    version?: boolean
    statusCode?: boolean
    statusMessage?: boolean
    time?: boolean
    cost?: boolean
    tasksCount?: boolean
    tasksError?: boolean
    requestTimestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["job"]>

  export type JobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    version?: boolean
    statusCode?: boolean
    statusMessage?: boolean
    time?: boolean
    cost?: boolean
    tasksCount?: boolean
    tasksError?: boolean
    requestTimestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["job"]>

  export type JobSelectScalar = {
    id?: boolean
    status?: boolean
    version?: boolean
    statusCode?: boolean
    statusMessage?: boolean
    time?: boolean
    cost?: boolean
    tasksCount?: boolean
    tasksError?: boolean
    requestTimestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "status" | "version" | "statusCode" | "statusMessage" | "time" | "cost" | "tasksCount" | "tasksError" | "requestTimestamp" | "createdAt" | "updatedAt", ExtArgs["result"]["job"]>
  export type JobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | Job$tasksArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type JobIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $JobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Job"
    objects: {
      tasks: Prisma.$TaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: string | null
      version: string | null
      statusCode: number | null
      statusMessage: string | null
      time: string | null
      cost: number | null
      tasksCount: number | null
      tasksError: number | null
      requestTimestamp: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["job"]>
    composites: {}
  }

  type JobGetPayload<S extends boolean | null | undefined | JobDefaultArgs> = $Result.GetResult<Prisma.$JobPayload, S>

  type JobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobCountAggregateInputType | true
    }

  export interface JobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Job'], meta: { name: 'Job' } }
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobFindUniqueArgs>(args: SelectSubset<T, JobFindUniqueArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Job that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(args: SelectSubset<T, JobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobFindFirstArgs>(args?: SelectSubset<T, JobFindFirstArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(args?: SelectSubset<T, JobFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobFindManyArgs>(args?: SelectSubset<T, JobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
     */
    create<T extends JobCreateArgs>(args: SelectSubset<T, JobCreateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Jobs.
     * @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobCreateManyArgs>(args?: SelectSubset<T, JobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jobs and returns the data saved in the database.
     * @param {JobCreateManyAndReturnArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobCreateManyAndReturnArgs>(args?: SelectSubset<T, JobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
     */
    delete<T extends JobDeleteArgs>(args: SelectSubset<T, JobDeleteArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobUpdateArgs>(args: SelectSubset<T, JobUpdateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobDeleteManyArgs>(args?: SelectSubset<T, JobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobUpdateManyArgs>(args: SelectSubset<T, JobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs and returns the data updated in the database.
     * @param {JobUpdateManyAndReturnArgs} args - Arguments to update many Jobs.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobUpdateManyAndReturnArgs>(args: SelectSubset<T, JobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
     */
    upsert<T extends JobUpsertArgs>(args: SelectSubset<T, JobUpsertArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): Prisma.PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Job model
   */
  readonly fields: JobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tasks<T extends Job$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Job$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Job model
   */
  interface JobFieldRefs {
    readonly id: FieldRef<"Job", 'String'>
    readonly status: FieldRef<"Job", 'String'>
    readonly version: FieldRef<"Job", 'String'>
    readonly statusCode: FieldRef<"Job", 'Int'>
    readonly statusMessage: FieldRef<"Job", 'String'>
    readonly time: FieldRef<"Job", 'String'>
    readonly cost: FieldRef<"Job", 'Float'>
    readonly tasksCount: FieldRef<"Job", 'Int'>
    readonly tasksError: FieldRef<"Job", 'Int'>
    readonly requestTimestamp: FieldRef<"Job", 'DateTime'>
    readonly createdAt: FieldRef<"Job", 'DateTime'>
    readonly updatedAt: FieldRef<"Job", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findUniqueOrThrow
   */
  export type JobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findFirst
   */
  export type JobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findFirstOrThrow
   */
  export type JobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findMany
   */
  export type JobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Jobs to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job create
   */
  export type JobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to create a Job.
     */
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }

  /**
   * Job createMany
   */
  export type JobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job createManyAndReturn
   */
  export type JobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job update
   */
  export type JobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to update a Job.
     */
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to update.
     */
    limit?: number
  }

  /**
   * Job updateManyAndReturn
   */
  export type JobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to update.
     */
    limit?: number
  }

  /**
   * Job upsert
   */
  export type JobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The filter to search for the Job to update in case it exists.
     */
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     */
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }

  /**
   * Job delete
   */
  export type JobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter which Job to delete.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jobs to delete
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to delete.
     */
    limit?: number
  }

  /**
   * Job.tasks
   */
  export type Job$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Job without action
   */
  export type JobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
  }


  /**
   * Model KeywordProfile
   */

  export type AggregateKeywordProfile = {
    _count: KeywordProfileCountAggregateOutputType | null
    _avg: KeywordProfileAvgAggregateOutputType | null
    _sum: KeywordProfileSumAggregateOutputType | null
    _min: KeywordProfileMinAggregateOutputType | null
    _max: KeywordProfileMaxAggregateOutputType | null
  }

  export type KeywordProfileAvgAggregateOutputType = {
    locationCode: number | null
    kiCompetition: number | null
    kiCpc: number | null
    kiSearchVolume: number | null
    kiLowTopOfPageBid: number | null
    kiHighTopOfPageBid: number | null
    kiCategories: number | null
    kpKeywordDifficulty: number | null
    avgBacklinks: number | null
    avgDofollow: number | null
    avgReferringPages: number | null
    avgReferringDomains: number | null
    avgReferringMainDomains: number | null
    avgRank: number | null
    avgMainDomainRank: number | null
  }

  export type KeywordProfileSumAggregateOutputType = {
    locationCode: number | null
    kiCompetition: number | null
    kiCpc: number | null
    kiSearchVolume: number | null
    kiLowTopOfPageBid: number | null
    kiHighTopOfPageBid: number | null
    kiCategories: number[]
    kpKeywordDifficulty: number | null
    avgBacklinks: number | null
    avgDofollow: number | null
    avgReferringPages: number | null
    avgReferringDomains: number | null
    avgReferringMainDomains: number | null
    avgRank: number | null
    avgMainDomainRank: number | null
  }

  export type KeywordProfileMinAggregateOutputType = {
    id: string | null
    keywordId: string | null
    locationCode: number | null
    languageCode: string | null
    kiLastCheck: Date | null
    kiCompetition: number | null
    kiCompetitionLevel: string | null
    kiCpc: number | null
    kiSearchVolume: number | null
    kiLowTopOfPageBid: number | null
    kiHighTopOfPageBid: number | null
    kpSynonymClusteringAlgorithm: string | null
    kpKeywordDifficulty: number | null
    kpDetectedLanguage: string | null
    kpIsAnotherLanguage: boolean | null
    avgBacklinks: number | null
    avgDofollow: number | null
    avgReferringPages: number | null
    avgReferringDomains: number | null
    avgReferringMainDomains: number | null
    avgRank: number | null
    avgMainDomainRank: number | null
    avgLastUpdatedTime: Date | null
    siMainIntent: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KeywordProfileMaxAggregateOutputType = {
    id: string | null
    keywordId: string | null
    locationCode: number | null
    languageCode: string | null
    kiLastCheck: Date | null
    kiCompetition: number | null
    kiCompetitionLevel: string | null
    kiCpc: number | null
    kiSearchVolume: number | null
    kiLowTopOfPageBid: number | null
    kiHighTopOfPageBid: number | null
    kpSynonymClusteringAlgorithm: string | null
    kpKeywordDifficulty: number | null
    kpDetectedLanguage: string | null
    kpIsAnotherLanguage: boolean | null
    avgBacklinks: number | null
    avgDofollow: number | null
    avgReferringPages: number | null
    avgReferringDomains: number | null
    avgReferringMainDomains: number | null
    avgRank: number | null
    avgMainDomainRank: number | null
    avgLastUpdatedTime: Date | null
    siMainIntent: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KeywordProfileCountAggregateOutputType = {
    id: number
    keywordId: number
    locationCode: number
    languageCode: number
    kiLastCheck: number
    kiCompetition: number
    kiCompetitionLevel: number
    kiCpc: number
    kiSearchVolume: number
    kiLowTopOfPageBid: number
    kiHighTopOfPageBid: number
    kiCategories: number
    kiMonthlySearches: number
    kpSynonymClusteringAlgorithm: number
    kpKeywordDifficulty: number
    kpDetectedLanguage: number
    kpIsAnotherLanguage: number
    avgBacklinks: number
    avgDofollow: number
    avgReferringPages: number
    avgReferringDomains: number
    avgReferringMainDomains: number
    avgRank: number
    avgMainDomainRank: number
    avgLastUpdatedTime: number
    siMainIntent: number
    relatedKeywordIds: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KeywordProfileAvgAggregateInputType = {
    locationCode?: true
    kiCompetition?: true
    kiCpc?: true
    kiSearchVolume?: true
    kiLowTopOfPageBid?: true
    kiHighTopOfPageBid?: true
    kiCategories?: true
    kpKeywordDifficulty?: true
    avgBacklinks?: true
    avgDofollow?: true
    avgReferringPages?: true
    avgReferringDomains?: true
    avgReferringMainDomains?: true
    avgRank?: true
    avgMainDomainRank?: true
  }

  export type KeywordProfileSumAggregateInputType = {
    locationCode?: true
    kiCompetition?: true
    kiCpc?: true
    kiSearchVolume?: true
    kiLowTopOfPageBid?: true
    kiHighTopOfPageBid?: true
    kiCategories?: true
    kpKeywordDifficulty?: true
    avgBacklinks?: true
    avgDofollow?: true
    avgReferringPages?: true
    avgReferringDomains?: true
    avgReferringMainDomains?: true
    avgRank?: true
    avgMainDomainRank?: true
  }

  export type KeywordProfileMinAggregateInputType = {
    id?: true
    keywordId?: true
    locationCode?: true
    languageCode?: true
    kiLastCheck?: true
    kiCompetition?: true
    kiCompetitionLevel?: true
    kiCpc?: true
    kiSearchVolume?: true
    kiLowTopOfPageBid?: true
    kiHighTopOfPageBid?: true
    kpSynonymClusteringAlgorithm?: true
    kpKeywordDifficulty?: true
    kpDetectedLanguage?: true
    kpIsAnotherLanguage?: true
    avgBacklinks?: true
    avgDofollow?: true
    avgReferringPages?: true
    avgReferringDomains?: true
    avgReferringMainDomains?: true
    avgRank?: true
    avgMainDomainRank?: true
    avgLastUpdatedTime?: true
    siMainIntent?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KeywordProfileMaxAggregateInputType = {
    id?: true
    keywordId?: true
    locationCode?: true
    languageCode?: true
    kiLastCheck?: true
    kiCompetition?: true
    kiCompetitionLevel?: true
    kiCpc?: true
    kiSearchVolume?: true
    kiLowTopOfPageBid?: true
    kiHighTopOfPageBid?: true
    kpSynonymClusteringAlgorithm?: true
    kpKeywordDifficulty?: true
    kpDetectedLanguage?: true
    kpIsAnotherLanguage?: true
    avgBacklinks?: true
    avgDofollow?: true
    avgReferringPages?: true
    avgReferringDomains?: true
    avgReferringMainDomains?: true
    avgRank?: true
    avgMainDomainRank?: true
    avgLastUpdatedTime?: true
    siMainIntent?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KeywordProfileCountAggregateInputType = {
    id?: true
    keywordId?: true
    locationCode?: true
    languageCode?: true
    kiLastCheck?: true
    kiCompetition?: true
    kiCompetitionLevel?: true
    kiCpc?: true
    kiSearchVolume?: true
    kiLowTopOfPageBid?: true
    kiHighTopOfPageBid?: true
    kiCategories?: true
    kiMonthlySearches?: true
    kpSynonymClusteringAlgorithm?: true
    kpKeywordDifficulty?: true
    kpDetectedLanguage?: true
    kpIsAnotherLanguage?: true
    avgBacklinks?: true
    avgDofollow?: true
    avgReferringPages?: true
    avgReferringDomains?: true
    avgReferringMainDomains?: true
    avgRank?: true
    avgMainDomainRank?: true
    avgLastUpdatedTime?: true
    siMainIntent?: true
    relatedKeywordIds?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KeywordProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KeywordProfile to aggregate.
     */
    where?: KeywordProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeywordProfiles to fetch.
     */
    orderBy?: KeywordProfileOrderByWithRelationInput | KeywordProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KeywordProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeywordProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeywordProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KeywordProfiles
    **/
    _count?: true | KeywordProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KeywordProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KeywordProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeywordProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeywordProfileMaxAggregateInputType
  }

  export type GetKeywordProfileAggregateType<T extends KeywordProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateKeywordProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeywordProfile[P]>
      : GetScalarType<T[P], AggregateKeywordProfile[P]>
  }




  export type KeywordProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeywordProfileWhereInput
    orderBy?: KeywordProfileOrderByWithAggregationInput | KeywordProfileOrderByWithAggregationInput[]
    by: KeywordProfileScalarFieldEnum[] | KeywordProfileScalarFieldEnum
    having?: KeywordProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeywordProfileCountAggregateInputType | true
    _avg?: KeywordProfileAvgAggregateInputType
    _sum?: KeywordProfileSumAggregateInputType
    _min?: KeywordProfileMinAggregateInputType
    _max?: KeywordProfileMaxAggregateInputType
  }

  export type KeywordProfileGroupByOutputType = {
    id: string
    keywordId: string
    locationCode: number
    languageCode: string
    kiLastCheck: Date | null
    kiCompetition: number | null
    kiCompetitionLevel: string | null
    kiCpc: number | null
    kiSearchVolume: number | null
    kiLowTopOfPageBid: number | null
    kiHighTopOfPageBid: number | null
    kiCategories: number[]
    kiMonthlySearches: JsonValue | null
    kpSynonymClusteringAlgorithm: string | null
    kpKeywordDifficulty: number | null
    kpDetectedLanguage: string | null
    kpIsAnotherLanguage: boolean | null
    avgBacklinks: number | null
    avgDofollow: number | null
    avgReferringPages: number | null
    avgReferringDomains: number | null
    avgReferringMainDomains: number | null
    avgRank: number | null
    avgMainDomainRank: number | null
    avgLastUpdatedTime: Date | null
    siMainIntent: string | null
    relatedKeywordIds: string[]
    createdAt: Date
    updatedAt: Date
    _count: KeywordProfileCountAggregateOutputType | null
    _avg: KeywordProfileAvgAggregateOutputType | null
    _sum: KeywordProfileSumAggregateOutputType | null
    _min: KeywordProfileMinAggregateOutputType | null
    _max: KeywordProfileMaxAggregateOutputType | null
  }

  type GetKeywordProfileGroupByPayload<T extends KeywordProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KeywordProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeywordProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeywordProfileGroupByOutputType[P]>
            : GetScalarType<T[P], KeywordProfileGroupByOutputType[P]>
        }
      >
    >


  export type KeywordProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    keywordId?: boolean
    locationCode?: boolean
    languageCode?: boolean
    kiLastCheck?: boolean
    kiCompetition?: boolean
    kiCompetitionLevel?: boolean
    kiCpc?: boolean
    kiSearchVolume?: boolean
    kiLowTopOfPageBid?: boolean
    kiHighTopOfPageBid?: boolean
    kiCategories?: boolean
    kiMonthlySearches?: boolean
    kpSynonymClusteringAlgorithm?: boolean
    kpKeywordDifficulty?: boolean
    kpDetectedLanguage?: boolean
    kpIsAnotherLanguage?: boolean
    avgBacklinks?: boolean
    avgDofollow?: boolean
    avgReferringPages?: boolean
    avgReferringDomains?: boolean
    avgReferringMainDomains?: boolean
    avgRank?: boolean
    avgMainDomainRank?: boolean
    avgLastUpdatedTime?: boolean
    siMainIntent?: boolean
    relatedKeywordIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keywordProfile"]>

  export type KeywordProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    keywordId?: boolean
    locationCode?: boolean
    languageCode?: boolean
    kiLastCheck?: boolean
    kiCompetition?: boolean
    kiCompetitionLevel?: boolean
    kiCpc?: boolean
    kiSearchVolume?: boolean
    kiLowTopOfPageBid?: boolean
    kiHighTopOfPageBid?: boolean
    kiCategories?: boolean
    kiMonthlySearches?: boolean
    kpSynonymClusteringAlgorithm?: boolean
    kpKeywordDifficulty?: boolean
    kpDetectedLanguage?: boolean
    kpIsAnotherLanguage?: boolean
    avgBacklinks?: boolean
    avgDofollow?: boolean
    avgReferringPages?: boolean
    avgReferringDomains?: boolean
    avgReferringMainDomains?: boolean
    avgRank?: boolean
    avgMainDomainRank?: boolean
    avgLastUpdatedTime?: boolean
    siMainIntent?: boolean
    relatedKeywordIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keywordProfile"]>

  export type KeywordProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    keywordId?: boolean
    locationCode?: boolean
    languageCode?: boolean
    kiLastCheck?: boolean
    kiCompetition?: boolean
    kiCompetitionLevel?: boolean
    kiCpc?: boolean
    kiSearchVolume?: boolean
    kiLowTopOfPageBid?: boolean
    kiHighTopOfPageBid?: boolean
    kiCategories?: boolean
    kiMonthlySearches?: boolean
    kpSynonymClusteringAlgorithm?: boolean
    kpKeywordDifficulty?: boolean
    kpDetectedLanguage?: boolean
    kpIsAnotherLanguage?: boolean
    avgBacklinks?: boolean
    avgDofollow?: boolean
    avgReferringPages?: boolean
    avgReferringDomains?: boolean
    avgReferringMainDomains?: boolean
    avgRank?: boolean
    avgMainDomainRank?: boolean
    avgLastUpdatedTime?: boolean
    siMainIntent?: boolean
    relatedKeywordIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keywordProfile"]>

  export type KeywordProfileSelectScalar = {
    id?: boolean
    keywordId?: boolean
    locationCode?: boolean
    languageCode?: boolean
    kiLastCheck?: boolean
    kiCompetition?: boolean
    kiCompetitionLevel?: boolean
    kiCpc?: boolean
    kiSearchVolume?: boolean
    kiLowTopOfPageBid?: boolean
    kiHighTopOfPageBid?: boolean
    kiCategories?: boolean
    kiMonthlySearches?: boolean
    kpSynonymClusteringAlgorithm?: boolean
    kpKeywordDifficulty?: boolean
    kpDetectedLanguage?: boolean
    kpIsAnotherLanguage?: boolean
    avgBacklinks?: boolean
    avgDofollow?: boolean
    avgReferringPages?: boolean
    avgReferringDomains?: boolean
    avgReferringMainDomains?: boolean
    avgRank?: boolean
    avgMainDomainRank?: boolean
    avgLastUpdatedTime?: boolean
    siMainIntent?: boolean
    relatedKeywordIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KeywordProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "keywordId" | "locationCode" | "languageCode" | "kiLastCheck" | "kiCompetition" | "kiCompetitionLevel" | "kiCpc" | "kiSearchVolume" | "kiLowTopOfPageBid" | "kiHighTopOfPageBid" | "kiCategories" | "kiMonthlySearches" | "kpSynonymClusteringAlgorithm" | "kpKeywordDifficulty" | "kpDetectedLanguage" | "kpIsAnotherLanguage" | "avgBacklinks" | "avgDofollow" | "avgReferringPages" | "avgReferringDomains" | "avgReferringMainDomains" | "avgRank" | "avgMainDomainRank" | "avgLastUpdatedTime" | "siMainIntent" | "relatedKeywordIds" | "createdAt" | "updatedAt", ExtArgs["result"]["keywordProfile"]>
  export type KeywordProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }
  export type KeywordProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }
  export type KeywordProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }

  export type $KeywordProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KeywordProfile"
    objects: {
      keyword: Prisma.$KeywordPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      keywordId: string
      locationCode: number
      languageCode: string
      kiLastCheck: Date | null
      kiCompetition: number | null
      kiCompetitionLevel: string | null
      kiCpc: number | null
      kiSearchVolume: number | null
      kiLowTopOfPageBid: number | null
      kiHighTopOfPageBid: number | null
      kiCategories: number[]
      kiMonthlySearches: Prisma.JsonValue | null
      kpSynonymClusteringAlgorithm: string | null
      kpKeywordDifficulty: number | null
      kpDetectedLanguage: string | null
      kpIsAnotherLanguage: boolean | null
      avgBacklinks: number | null
      avgDofollow: number | null
      avgReferringPages: number | null
      avgReferringDomains: number | null
      avgReferringMainDomains: number | null
      avgRank: number | null
      avgMainDomainRank: number | null
      avgLastUpdatedTime: Date | null
      siMainIntent: string | null
      relatedKeywordIds: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["keywordProfile"]>
    composites: {}
  }

  type KeywordProfileGetPayload<S extends boolean | null | undefined | KeywordProfileDefaultArgs> = $Result.GetResult<Prisma.$KeywordProfilePayload, S>

  type KeywordProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KeywordProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KeywordProfileCountAggregateInputType | true
    }

  export interface KeywordProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KeywordProfile'], meta: { name: 'KeywordProfile' } }
    /**
     * Find zero or one KeywordProfile that matches the filter.
     * @param {KeywordProfileFindUniqueArgs} args - Arguments to find a KeywordProfile
     * @example
     * // Get one KeywordProfile
     * const keywordProfile = await prisma.keywordProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KeywordProfileFindUniqueArgs>(args: SelectSubset<T, KeywordProfileFindUniqueArgs<ExtArgs>>): Prisma__KeywordProfileClient<$Result.GetResult<Prisma.$KeywordProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KeywordProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KeywordProfileFindUniqueOrThrowArgs} args - Arguments to find a KeywordProfile
     * @example
     * // Get one KeywordProfile
     * const keywordProfile = await prisma.keywordProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KeywordProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, KeywordProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KeywordProfileClient<$Result.GetResult<Prisma.$KeywordProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KeywordProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordProfileFindFirstArgs} args - Arguments to find a KeywordProfile
     * @example
     * // Get one KeywordProfile
     * const keywordProfile = await prisma.keywordProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KeywordProfileFindFirstArgs>(args?: SelectSubset<T, KeywordProfileFindFirstArgs<ExtArgs>>): Prisma__KeywordProfileClient<$Result.GetResult<Prisma.$KeywordProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KeywordProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordProfileFindFirstOrThrowArgs} args - Arguments to find a KeywordProfile
     * @example
     * // Get one KeywordProfile
     * const keywordProfile = await prisma.keywordProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KeywordProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, KeywordProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__KeywordProfileClient<$Result.GetResult<Prisma.$KeywordProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KeywordProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KeywordProfiles
     * const keywordProfiles = await prisma.keywordProfile.findMany()
     * 
     * // Get first 10 KeywordProfiles
     * const keywordProfiles = await prisma.keywordProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const keywordProfileWithIdOnly = await prisma.keywordProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KeywordProfileFindManyArgs>(args?: SelectSubset<T, KeywordProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeywordProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KeywordProfile.
     * @param {KeywordProfileCreateArgs} args - Arguments to create a KeywordProfile.
     * @example
     * // Create one KeywordProfile
     * const KeywordProfile = await prisma.keywordProfile.create({
     *   data: {
     *     // ... data to create a KeywordProfile
     *   }
     * })
     * 
     */
    create<T extends KeywordProfileCreateArgs>(args: SelectSubset<T, KeywordProfileCreateArgs<ExtArgs>>): Prisma__KeywordProfileClient<$Result.GetResult<Prisma.$KeywordProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KeywordProfiles.
     * @param {KeywordProfileCreateManyArgs} args - Arguments to create many KeywordProfiles.
     * @example
     * // Create many KeywordProfiles
     * const keywordProfile = await prisma.keywordProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KeywordProfileCreateManyArgs>(args?: SelectSubset<T, KeywordProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KeywordProfiles and returns the data saved in the database.
     * @param {KeywordProfileCreateManyAndReturnArgs} args - Arguments to create many KeywordProfiles.
     * @example
     * // Create many KeywordProfiles
     * const keywordProfile = await prisma.keywordProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KeywordProfiles and only return the `id`
     * const keywordProfileWithIdOnly = await prisma.keywordProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KeywordProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, KeywordProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeywordProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KeywordProfile.
     * @param {KeywordProfileDeleteArgs} args - Arguments to delete one KeywordProfile.
     * @example
     * // Delete one KeywordProfile
     * const KeywordProfile = await prisma.keywordProfile.delete({
     *   where: {
     *     // ... filter to delete one KeywordProfile
     *   }
     * })
     * 
     */
    delete<T extends KeywordProfileDeleteArgs>(args: SelectSubset<T, KeywordProfileDeleteArgs<ExtArgs>>): Prisma__KeywordProfileClient<$Result.GetResult<Prisma.$KeywordProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KeywordProfile.
     * @param {KeywordProfileUpdateArgs} args - Arguments to update one KeywordProfile.
     * @example
     * // Update one KeywordProfile
     * const keywordProfile = await prisma.keywordProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KeywordProfileUpdateArgs>(args: SelectSubset<T, KeywordProfileUpdateArgs<ExtArgs>>): Prisma__KeywordProfileClient<$Result.GetResult<Prisma.$KeywordProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KeywordProfiles.
     * @param {KeywordProfileDeleteManyArgs} args - Arguments to filter KeywordProfiles to delete.
     * @example
     * // Delete a few KeywordProfiles
     * const { count } = await prisma.keywordProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KeywordProfileDeleteManyArgs>(args?: SelectSubset<T, KeywordProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KeywordProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KeywordProfiles
     * const keywordProfile = await prisma.keywordProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KeywordProfileUpdateManyArgs>(args: SelectSubset<T, KeywordProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KeywordProfiles and returns the data updated in the database.
     * @param {KeywordProfileUpdateManyAndReturnArgs} args - Arguments to update many KeywordProfiles.
     * @example
     * // Update many KeywordProfiles
     * const keywordProfile = await prisma.keywordProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KeywordProfiles and only return the `id`
     * const keywordProfileWithIdOnly = await prisma.keywordProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KeywordProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, KeywordProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeywordProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KeywordProfile.
     * @param {KeywordProfileUpsertArgs} args - Arguments to update or create a KeywordProfile.
     * @example
     * // Update or create a KeywordProfile
     * const keywordProfile = await prisma.keywordProfile.upsert({
     *   create: {
     *     // ... data to create a KeywordProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KeywordProfile we want to update
     *   }
     * })
     */
    upsert<T extends KeywordProfileUpsertArgs>(args: SelectSubset<T, KeywordProfileUpsertArgs<ExtArgs>>): Prisma__KeywordProfileClient<$Result.GetResult<Prisma.$KeywordProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KeywordProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordProfileCountArgs} args - Arguments to filter KeywordProfiles to count.
     * @example
     * // Count the number of KeywordProfiles
     * const count = await prisma.keywordProfile.count({
     *   where: {
     *     // ... the filter for the KeywordProfiles we want to count
     *   }
     * })
    **/
    count<T extends KeywordProfileCountArgs>(
      args?: Subset<T, KeywordProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeywordProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KeywordProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeywordProfileAggregateArgs>(args: Subset<T, KeywordProfileAggregateArgs>): Prisma.PrismaPromise<GetKeywordProfileAggregateType<T>>

    /**
     * Group by KeywordProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeywordProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeywordProfileGroupByArgs['orderBy'] }
        : { orderBy?: KeywordProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeywordProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeywordProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KeywordProfile model
   */
  readonly fields: KeywordProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KeywordProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KeywordProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    keyword<T extends KeywordDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KeywordDefaultArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KeywordProfile model
   */
  interface KeywordProfileFieldRefs {
    readonly id: FieldRef<"KeywordProfile", 'String'>
    readonly keywordId: FieldRef<"KeywordProfile", 'String'>
    readonly locationCode: FieldRef<"KeywordProfile", 'Int'>
    readonly languageCode: FieldRef<"KeywordProfile", 'String'>
    readonly kiLastCheck: FieldRef<"KeywordProfile", 'DateTime'>
    readonly kiCompetition: FieldRef<"KeywordProfile", 'Float'>
    readonly kiCompetitionLevel: FieldRef<"KeywordProfile", 'String'>
    readonly kiCpc: FieldRef<"KeywordProfile", 'Float'>
    readonly kiSearchVolume: FieldRef<"KeywordProfile", 'Int'>
    readonly kiLowTopOfPageBid: FieldRef<"KeywordProfile", 'Float'>
    readonly kiHighTopOfPageBid: FieldRef<"KeywordProfile", 'Float'>
    readonly kiCategories: FieldRef<"KeywordProfile", 'Int[]'>
    readonly kiMonthlySearches: FieldRef<"KeywordProfile", 'Json'>
    readonly kpSynonymClusteringAlgorithm: FieldRef<"KeywordProfile", 'String'>
    readonly kpKeywordDifficulty: FieldRef<"KeywordProfile", 'Int'>
    readonly kpDetectedLanguage: FieldRef<"KeywordProfile", 'String'>
    readonly kpIsAnotherLanguage: FieldRef<"KeywordProfile", 'Boolean'>
    readonly avgBacklinks: FieldRef<"KeywordProfile", 'Float'>
    readonly avgDofollow: FieldRef<"KeywordProfile", 'Float'>
    readonly avgReferringPages: FieldRef<"KeywordProfile", 'Float'>
    readonly avgReferringDomains: FieldRef<"KeywordProfile", 'Float'>
    readonly avgReferringMainDomains: FieldRef<"KeywordProfile", 'Float'>
    readonly avgRank: FieldRef<"KeywordProfile", 'Float'>
    readonly avgMainDomainRank: FieldRef<"KeywordProfile", 'Float'>
    readonly avgLastUpdatedTime: FieldRef<"KeywordProfile", 'DateTime'>
    readonly siMainIntent: FieldRef<"KeywordProfile", 'String'>
    readonly relatedKeywordIds: FieldRef<"KeywordProfile", 'String[]'>
    readonly createdAt: FieldRef<"KeywordProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"KeywordProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KeywordProfile findUnique
   */
  export type KeywordProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordProfile
     */
    select?: KeywordProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordProfile
     */
    omit?: KeywordProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordProfileInclude<ExtArgs> | null
    /**
     * Filter, which KeywordProfile to fetch.
     */
    where: KeywordProfileWhereUniqueInput
  }

  /**
   * KeywordProfile findUniqueOrThrow
   */
  export type KeywordProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordProfile
     */
    select?: KeywordProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordProfile
     */
    omit?: KeywordProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordProfileInclude<ExtArgs> | null
    /**
     * Filter, which KeywordProfile to fetch.
     */
    where: KeywordProfileWhereUniqueInput
  }

  /**
   * KeywordProfile findFirst
   */
  export type KeywordProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordProfile
     */
    select?: KeywordProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordProfile
     */
    omit?: KeywordProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordProfileInclude<ExtArgs> | null
    /**
     * Filter, which KeywordProfile to fetch.
     */
    where?: KeywordProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeywordProfiles to fetch.
     */
    orderBy?: KeywordProfileOrderByWithRelationInput | KeywordProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KeywordProfiles.
     */
    cursor?: KeywordProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeywordProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeywordProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KeywordProfiles.
     */
    distinct?: KeywordProfileScalarFieldEnum | KeywordProfileScalarFieldEnum[]
  }

  /**
   * KeywordProfile findFirstOrThrow
   */
  export type KeywordProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordProfile
     */
    select?: KeywordProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordProfile
     */
    omit?: KeywordProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordProfileInclude<ExtArgs> | null
    /**
     * Filter, which KeywordProfile to fetch.
     */
    where?: KeywordProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeywordProfiles to fetch.
     */
    orderBy?: KeywordProfileOrderByWithRelationInput | KeywordProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KeywordProfiles.
     */
    cursor?: KeywordProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeywordProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeywordProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KeywordProfiles.
     */
    distinct?: KeywordProfileScalarFieldEnum | KeywordProfileScalarFieldEnum[]
  }

  /**
   * KeywordProfile findMany
   */
  export type KeywordProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordProfile
     */
    select?: KeywordProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordProfile
     */
    omit?: KeywordProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordProfileInclude<ExtArgs> | null
    /**
     * Filter, which KeywordProfiles to fetch.
     */
    where?: KeywordProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeywordProfiles to fetch.
     */
    orderBy?: KeywordProfileOrderByWithRelationInput | KeywordProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KeywordProfiles.
     */
    cursor?: KeywordProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeywordProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeywordProfiles.
     */
    skip?: number
    distinct?: KeywordProfileScalarFieldEnum | KeywordProfileScalarFieldEnum[]
  }

  /**
   * KeywordProfile create
   */
  export type KeywordProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordProfile
     */
    select?: KeywordProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordProfile
     */
    omit?: KeywordProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a KeywordProfile.
     */
    data: XOR<KeywordProfileCreateInput, KeywordProfileUncheckedCreateInput>
  }

  /**
   * KeywordProfile createMany
   */
  export type KeywordProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KeywordProfiles.
     */
    data: KeywordProfileCreateManyInput | KeywordProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KeywordProfile createManyAndReturn
   */
  export type KeywordProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordProfile
     */
    select?: KeywordProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordProfile
     */
    omit?: KeywordProfileOmit<ExtArgs> | null
    /**
     * The data used to create many KeywordProfiles.
     */
    data: KeywordProfileCreateManyInput | KeywordProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KeywordProfile update
   */
  export type KeywordProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordProfile
     */
    select?: KeywordProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordProfile
     */
    omit?: KeywordProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a KeywordProfile.
     */
    data: XOR<KeywordProfileUpdateInput, KeywordProfileUncheckedUpdateInput>
    /**
     * Choose, which KeywordProfile to update.
     */
    where: KeywordProfileWhereUniqueInput
  }

  /**
   * KeywordProfile updateMany
   */
  export type KeywordProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KeywordProfiles.
     */
    data: XOR<KeywordProfileUpdateManyMutationInput, KeywordProfileUncheckedUpdateManyInput>
    /**
     * Filter which KeywordProfiles to update
     */
    where?: KeywordProfileWhereInput
    /**
     * Limit how many KeywordProfiles to update.
     */
    limit?: number
  }

  /**
   * KeywordProfile updateManyAndReturn
   */
  export type KeywordProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordProfile
     */
    select?: KeywordProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordProfile
     */
    omit?: KeywordProfileOmit<ExtArgs> | null
    /**
     * The data used to update KeywordProfiles.
     */
    data: XOR<KeywordProfileUpdateManyMutationInput, KeywordProfileUncheckedUpdateManyInput>
    /**
     * Filter which KeywordProfiles to update
     */
    where?: KeywordProfileWhereInput
    /**
     * Limit how many KeywordProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * KeywordProfile upsert
   */
  export type KeywordProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordProfile
     */
    select?: KeywordProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordProfile
     */
    omit?: KeywordProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the KeywordProfile to update in case it exists.
     */
    where: KeywordProfileWhereUniqueInput
    /**
     * In case the KeywordProfile found by the `where` argument doesn't exist, create a new KeywordProfile with this data.
     */
    create: XOR<KeywordProfileCreateInput, KeywordProfileUncheckedCreateInput>
    /**
     * In case the KeywordProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KeywordProfileUpdateInput, KeywordProfileUncheckedUpdateInput>
  }

  /**
   * KeywordProfile delete
   */
  export type KeywordProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordProfile
     */
    select?: KeywordProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordProfile
     */
    omit?: KeywordProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordProfileInclude<ExtArgs> | null
    /**
     * Filter which KeywordProfile to delete.
     */
    where: KeywordProfileWhereUniqueInput
  }

  /**
   * KeywordProfile deleteMany
   */
  export type KeywordProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KeywordProfiles to delete
     */
    where?: KeywordProfileWhereInput
    /**
     * Limit how many KeywordProfiles to delete.
     */
    limit?: number
  }

  /**
   * KeywordProfile without action
   */
  export type KeywordProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordProfile
     */
    select?: KeywordProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordProfile
     */
    omit?: KeywordProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordProfileInclude<ExtArgs> | null
  }


  /**
   * Model KeywordRelation
   */

  export type AggregateKeywordRelation = {
    _count: KeywordRelationCountAggregateOutputType | null
    _min: KeywordRelationMinAggregateOutputType | null
    _max: KeywordRelationMaxAggregateOutputType | null
  }

  export type KeywordRelationMinAggregateOutputType = {
    id: string | null
    seedKeywordId: string | null
    relatedKeywordId: string | null
    taskId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KeywordRelationMaxAggregateOutputType = {
    id: string | null
    seedKeywordId: string | null
    relatedKeywordId: string | null
    taskId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KeywordRelationCountAggregateOutputType = {
    id: number
    seedKeywordId: number
    relatedKeywordId: number
    taskId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KeywordRelationMinAggregateInputType = {
    id?: true
    seedKeywordId?: true
    relatedKeywordId?: true
    taskId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KeywordRelationMaxAggregateInputType = {
    id?: true
    seedKeywordId?: true
    relatedKeywordId?: true
    taskId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KeywordRelationCountAggregateInputType = {
    id?: true
    seedKeywordId?: true
    relatedKeywordId?: true
    taskId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KeywordRelationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KeywordRelation to aggregate.
     */
    where?: KeywordRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeywordRelations to fetch.
     */
    orderBy?: KeywordRelationOrderByWithRelationInput | KeywordRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KeywordRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeywordRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeywordRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KeywordRelations
    **/
    _count?: true | KeywordRelationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeywordRelationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeywordRelationMaxAggregateInputType
  }

  export type GetKeywordRelationAggregateType<T extends KeywordRelationAggregateArgs> = {
        [P in keyof T & keyof AggregateKeywordRelation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeywordRelation[P]>
      : GetScalarType<T[P], AggregateKeywordRelation[P]>
  }




  export type KeywordRelationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeywordRelationWhereInput
    orderBy?: KeywordRelationOrderByWithAggregationInput | KeywordRelationOrderByWithAggregationInput[]
    by: KeywordRelationScalarFieldEnum[] | KeywordRelationScalarFieldEnum
    having?: KeywordRelationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeywordRelationCountAggregateInputType | true
    _min?: KeywordRelationMinAggregateInputType
    _max?: KeywordRelationMaxAggregateInputType
  }

  export type KeywordRelationGroupByOutputType = {
    id: string
    seedKeywordId: string
    relatedKeywordId: string
    taskId: string
    createdAt: Date
    updatedAt: Date
    _count: KeywordRelationCountAggregateOutputType | null
    _min: KeywordRelationMinAggregateOutputType | null
    _max: KeywordRelationMaxAggregateOutputType | null
  }

  type GetKeywordRelationGroupByPayload<T extends KeywordRelationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KeywordRelationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeywordRelationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeywordRelationGroupByOutputType[P]>
            : GetScalarType<T[P], KeywordRelationGroupByOutputType[P]>
        }
      >
    >


  export type KeywordRelationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    seedKeywordId?: boolean
    relatedKeywordId?: boolean
    taskId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    seedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
    relatedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keywordRelation"]>

  export type KeywordRelationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    seedKeywordId?: boolean
    relatedKeywordId?: boolean
    taskId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    seedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
    relatedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keywordRelation"]>

  export type KeywordRelationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    seedKeywordId?: boolean
    relatedKeywordId?: boolean
    taskId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    seedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
    relatedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keywordRelation"]>

  export type KeywordRelationSelectScalar = {
    id?: boolean
    seedKeywordId?: boolean
    relatedKeywordId?: boolean
    taskId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KeywordRelationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "seedKeywordId" | "relatedKeywordId" | "taskId" | "createdAt" | "updatedAt", ExtArgs["result"]["keywordRelation"]>
  export type KeywordRelationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
    relatedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }
  export type KeywordRelationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
    relatedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }
  export type KeywordRelationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
    relatedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
    task?: boolean | TaskDefaultArgs<ExtArgs>
  }

  export type $KeywordRelationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KeywordRelation"
    objects: {
      seedKeyword: Prisma.$KeywordPayload<ExtArgs>
      relatedKeyword: Prisma.$KeywordPayload<ExtArgs>
      task: Prisma.$TaskPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      seedKeywordId: string
      relatedKeywordId: string
      taskId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["keywordRelation"]>
    composites: {}
  }

  type KeywordRelationGetPayload<S extends boolean | null | undefined | KeywordRelationDefaultArgs> = $Result.GetResult<Prisma.$KeywordRelationPayload, S>

  type KeywordRelationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KeywordRelationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KeywordRelationCountAggregateInputType | true
    }

  export interface KeywordRelationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KeywordRelation'], meta: { name: 'KeywordRelation' } }
    /**
     * Find zero or one KeywordRelation that matches the filter.
     * @param {KeywordRelationFindUniqueArgs} args - Arguments to find a KeywordRelation
     * @example
     * // Get one KeywordRelation
     * const keywordRelation = await prisma.keywordRelation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KeywordRelationFindUniqueArgs>(args: SelectSubset<T, KeywordRelationFindUniqueArgs<ExtArgs>>): Prisma__KeywordRelationClient<$Result.GetResult<Prisma.$KeywordRelationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KeywordRelation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KeywordRelationFindUniqueOrThrowArgs} args - Arguments to find a KeywordRelation
     * @example
     * // Get one KeywordRelation
     * const keywordRelation = await prisma.keywordRelation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KeywordRelationFindUniqueOrThrowArgs>(args: SelectSubset<T, KeywordRelationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KeywordRelationClient<$Result.GetResult<Prisma.$KeywordRelationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KeywordRelation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordRelationFindFirstArgs} args - Arguments to find a KeywordRelation
     * @example
     * // Get one KeywordRelation
     * const keywordRelation = await prisma.keywordRelation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KeywordRelationFindFirstArgs>(args?: SelectSubset<T, KeywordRelationFindFirstArgs<ExtArgs>>): Prisma__KeywordRelationClient<$Result.GetResult<Prisma.$KeywordRelationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KeywordRelation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordRelationFindFirstOrThrowArgs} args - Arguments to find a KeywordRelation
     * @example
     * // Get one KeywordRelation
     * const keywordRelation = await prisma.keywordRelation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KeywordRelationFindFirstOrThrowArgs>(args?: SelectSubset<T, KeywordRelationFindFirstOrThrowArgs<ExtArgs>>): Prisma__KeywordRelationClient<$Result.GetResult<Prisma.$KeywordRelationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KeywordRelations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordRelationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KeywordRelations
     * const keywordRelations = await prisma.keywordRelation.findMany()
     * 
     * // Get first 10 KeywordRelations
     * const keywordRelations = await prisma.keywordRelation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const keywordRelationWithIdOnly = await prisma.keywordRelation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KeywordRelationFindManyArgs>(args?: SelectSubset<T, KeywordRelationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeywordRelationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KeywordRelation.
     * @param {KeywordRelationCreateArgs} args - Arguments to create a KeywordRelation.
     * @example
     * // Create one KeywordRelation
     * const KeywordRelation = await prisma.keywordRelation.create({
     *   data: {
     *     // ... data to create a KeywordRelation
     *   }
     * })
     * 
     */
    create<T extends KeywordRelationCreateArgs>(args: SelectSubset<T, KeywordRelationCreateArgs<ExtArgs>>): Prisma__KeywordRelationClient<$Result.GetResult<Prisma.$KeywordRelationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KeywordRelations.
     * @param {KeywordRelationCreateManyArgs} args - Arguments to create many KeywordRelations.
     * @example
     * // Create many KeywordRelations
     * const keywordRelation = await prisma.keywordRelation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KeywordRelationCreateManyArgs>(args?: SelectSubset<T, KeywordRelationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KeywordRelations and returns the data saved in the database.
     * @param {KeywordRelationCreateManyAndReturnArgs} args - Arguments to create many KeywordRelations.
     * @example
     * // Create many KeywordRelations
     * const keywordRelation = await prisma.keywordRelation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KeywordRelations and only return the `id`
     * const keywordRelationWithIdOnly = await prisma.keywordRelation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KeywordRelationCreateManyAndReturnArgs>(args?: SelectSubset<T, KeywordRelationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeywordRelationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KeywordRelation.
     * @param {KeywordRelationDeleteArgs} args - Arguments to delete one KeywordRelation.
     * @example
     * // Delete one KeywordRelation
     * const KeywordRelation = await prisma.keywordRelation.delete({
     *   where: {
     *     // ... filter to delete one KeywordRelation
     *   }
     * })
     * 
     */
    delete<T extends KeywordRelationDeleteArgs>(args: SelectSubset<T, KeywordRelationDeleteArgs<ExtArgs>>): Prisma__KeywordRelationClient<$Result.GetResult<Prisma.$KeywordRelationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KeywordRelation.
     * @param {KeywordRelationUpdateArgs} args - Arguments to update one KeywordRelation.
     * @example
     * // Update one KeywordRelation
     * const keywordRelation = await prisma.keywordRelation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KeywordRelationUpdateArgs>(args: SelectSubset<T, KeywordRelationUpdateArgs<ExtArgs>>): Prisma__KeywordRelationClient<$Result.GetResult<Prisma.$KeywordRelationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KeywordRelations.
     * @param {KeywordRelationDeleteManyArgs} args - Arguments to filter KeywordRelations to delete.
     * @example
     * // Delete a few KeywordRelations
     * const { count } = await prisma.keywordRelation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KeywordRelationDeleteManyArgs>(args?: SelectSubset<T, KeywordRelationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KeywordRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordRelationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KeywordRelations
     * const keywordRelation = await prisma.keywordRelation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KeywordRelationUpdateManyArgs>(args: SelectSubset<T, KeywordRelationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KeywordRelations and returns the data updated in the database.
     * @param {KeywordRelationUpdateManyAndReturnArgs} args - Arguments to update many KeywordRelations.
     * @example
     * // Update many KeywordRelations
     * const keywordRelation = await prisma.keywordRelation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KeywordRelations and only return the `id`
     * const keywordRelationWithIdOnly = await prisma.keywordRelation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KeywordRelationUpdateManyAndReturnArgs>(args: SelectSubset<T, KeywordRelationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeywordRelationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KeywordRelation.
     * @param {KeywordRelationUpsertArgs} args - Arguments to update or create a KeywordRelation.
     * @example
     * // Update or create a KeywordRelation
     * const keywordRelation = await prisma.keywordRelation.upsert({
     *   create: {
     *     // ... data to create a KeywordRelation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KeywordRelation we want to update
     *   }
     * })
     */
    upsert<T extends KeywordRelationUpsertArgs>(args: SelectSubset<T, KeywordRelationUpsertArgs<ExtArgs>>): Prisma__KeywordRelationClient<$Result.GetResult<Prisma.$KeywordRelationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KeywordRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordRelationCountArgs} args - Arguments to filter KeywordRelations to count.
     * @example
     * // Count the number of KeywordRelations
     * const count = await prisma.keywordRelation.count({
     *   where: {
     *     // ... the filter for the KeywordRelations we want to count
     *   }
     * })
    **/
    count<T extends KeywordRelationCountArgs>(
      args?: Subset<T, KeywordRelationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeywordRelationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KeywordRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordRelationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeywordRelationAggregateArgs>(args: Subset<T, KeywordRelationAggregateArgs>): Prisma.PrismaPromise<GetKeywordRelationAggregateType<T>>

    /**
     * Group by KeywordRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordRelationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeywordRelationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeywordRelationGroupByArgs['orderBy'] }
        : { orderBy?: KeywordRelationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeywordRelationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeywordRelationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KeywordRelation model
   */
  readonly fields: KeywordRelationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KeywordRelation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KeywordRelationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    seedKeyword<T extends KeywordDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KeywordDefaultArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    relatedKeyword<T extends KeywordDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KeywordDefaultArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KeywordRelation model
   */
  interface KeywordRelationFieldRefs {
    readonly id: FieldRef<"KeywordRelation", 'String'>
    readonly seedKeywordId: FieldRef<"KeywordRelation", 'String'>
    readonly relatedKeywordId: FieldRef<"KeywordRelation", 'String'>
    readonly taskId: FieldRef<"KeywordRelation", 'String'>
    readonly createdAt: FieldRef<"KeywordRelation", 'DateTime'>
    readonly updatedAt: FieldRef<"KeywordRelation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * KeywordRelation findUnique
   */
  export type KeywordRelationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordRelation
     */
    select?: KeywordRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordRelation
     */
    omit?: KeywordRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordRelationInclude<ExtArgs> | null
    /**
     * Filter, which KeywordRelation to fetch.
     */
    where: KeywordRelationWhereUniqueInput
  }

  /**
   * KeywordRelation findUniqueOrThrow
   */
  export type KeywordRelationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordRelation
     */
    select?: KeywordRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordRelation
     */
    omit?: KeywordRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordRelationInclude<ExtArgs> | null
    /**
     * Filter, which KeywordRelation to fetch.
     */
    where: KeywordRelationWhereUniqueInput
  }

  /**
   * KeywordRelation findFirst
   */
  export type KeywordRelationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordRelation
     */
    select?: KeywordRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordRelation
     */
    omit?: KeywordRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordRelationInclude<ExtArgs> | null
    /**
     * Filter, which KeywordRelation to fetch.
     */
    where?: KeywordRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeywordRelations to fetch.
     */
    orderBy?: KeywordRelationOrderByWithRelationInput | KeywordRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KeywordRelations.
     */
    cursor?: KeywordRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeywordRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeywordRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KeywordRelations.
     */
    distinct?: KeywordRelationScalarFieldEnum | KeywordRelationScalarFieldEnum[]
  }

  /**
   * KeywordRelation findFirstOrThrow
   */
  export type KeywordRelationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordRelation
     */
    select?: KeywordRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordRelation
     */
    omit?: KeywordRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordRelationInclude<ExtArgs> | null
    /**
     * Filter, which KeywordRelation to fetch.
     */
    where?: KeywordRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeywordRelations to fetch.
     */
    orderBy?: KeywordRelationOrderByWithRelationInput | KeywordRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KeywordRelations.
     */
    cursor?: KeywordRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeywordRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeywordRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KeywordRelations.
     */
    distinct?: KeywordRelationScalarFieldEnum | KeywordRelationScalarFieldEnum[]
  }

  /**
   * KeywordRelation findMany
   */
  export type KeywordRelationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordRelation
     */
    select?: KeywordRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordRelation
     */
    omit?: KeywordRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordRelationInclude<ExtArgs> | null
    /**
     * Filter, which KeywordRelations to fetch.
     */
    where?: KeywordRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeywordRelations to fetch.
     */
    orderBy?: KeywordRelationOrderByWithRelationInput | KeywordRelationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KeywordRelations.
     */
    cursor?: KeywordRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeywordRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeywordRelations.
     */
    skip?: number
    distinct?: KeywordRelationScalarFieldEnum | KeywordRelationScalarFieldEnum[]
  }

  /**
   * KeywordRelation create
   */
  export type KeywordRelationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordRelation
     */
    select?: KeywordRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordRelation
     */
    omit?: KeywordRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordRelationInclude<ExtArgs> | null
    /**
     * The data needed to create a KeywordRelation.
     */
    data: XOR<KeywordRelationCreateInput, KeywordRelationUncheckedCreateInput>
  }

  /**
   * KeywordRelation createMany
   */
  export type KeywordRelationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KeywordRelations.
     */
    data: KeywordRelationCreateManyInput | KeywordRelationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KeywordRelation createManyAndReturn
   */
  export type KeywordRelationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordRelation
     */
    select?: KeywordRelationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordRelation
     */
    omit?: KeywordRelationOmit<ExtArgs> | null
    /**
     * The data used to create many KeywordRelations.
     */
    data: KeywordRelationCreateManyInput | KeywordRelationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordRelationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KeywordRelation update
   */
  export type KeywordRelationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordRelation
     */
    select?: KeywordRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordRelation
     */
    omit?: KeywordRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordRelationInclude<ExtArgs> | null
    /**
     * The data needed to update a KeywordRelation.
     */
    data: XOR<KeywordRelationUpdateInput, KeywordRelationUncheckedUpdateInput>
    /**
     * Choose, which KeywordRelation to update.
     */
    where: KeywordRelationWhereUniqueInput
  }

  /**
   * KeywordRelation updateMany
   */
  export type KeywordRelationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KeywordRelations.
     */
    data: XOR<KeywordRelationUpdateManyMutationInput, KeywordRelationUncheckedUpdateManyInput>
    /**
     * Filter which KeywordRelations to update
     */
    where?: KeywordRelationWhereInput
    /**
     * Limit how many KeywordRelations to update.
     */
    limit?: number
  }

  /**
   * KeywordRelation updateManyAndReturn
   */
  export type KeywordRelationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordRelation
     */
    select?: KeywordRelationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordRelation
     */
    omit?: KeywordRelationOmit<ExtArgs> | null
    /**
     * The data used to update KeywordRelations.
     */
    data: XOR<KeywordRelationUpdateManyMutationInput, KeywordRelationUncheckedUpdateManyInput>
    /**
     * Filter which KeywordRelations to update
     */
    where?: KeywordRelationWhereInput
    /**
     * Limit how many KeywordRelations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordRelationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * KeywordRelation upsert
   */
  export type KeywordRelationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordRelation
     */
    select?: KeywordRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordRelation
     */
    omit?: KeywordRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordRelationInclude<ExtArgs> | null
    /**
     * The filter to search for the KeywordRelation to update in case it exists.
     */
    where: KeywordRelationWhereUniqueInput
    /**
     * In case the KeywordRelation found by the `where` argument doesn't exist, create a new KeywordRelation with this data.
     */
    create: XOR<KeywordRelationCreateInput, KeywordRelationUncheckedCreateInput>
    /**
     * In case the KeywordRelation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KeywordRelationUpdateInput, KeywordRelationUncheckedUpdateInput>
  }

  /**
   * KeywordRelation delete
   */
  export type KeywordRelationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordRelation
     */
    select?: KeywordRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordRelation
     */
    omit?: KeywordRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordRelationInclude<ExtArgs> | null
    /**
     * Filter which KeywordRelation to delete.
     */
    where: KeywordRelationWhereUniqueInput
  }

  /**
   * KeywordRelation deleteMany
   */
  export type KeywordRelationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KeywordRelations to delete
     */
    where?: KeywordRelationWhereInput
    /**
     * Limit how many KeywordRelations to delete.
     */
    limit?: number
  }

  /**
   * KeywordRelation without action
   */
  export type KeywordRelationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordRelation
     */
    select?: KeywordRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordRelation
     */
    omit?: KeywordRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordRelationInclude<ExtArgs> | null
  }


  /**
   * Model Keyword
   */

  export type AggregateKeyword = {
    _count: KeywordCountAggregateOutputType | null
    _avg: KeywordAvgAggregateOutputType | null
    _sum: KeywordSumAggregateOutputType | null
    _min: KeywordMinAggregateOutputType | null
    _max: KeywordMaxAggregateOutputType | null
  }

  export type KeywordAvgAggregateOutputType = {
    kiCompetition: number | null
    kiCpc: number | null
    kiSearchVolume: number | null
    kiLowTopOfPageBid: number | null
    kiHighTopOfPageBid: number | null
    kiKeywordDifficulty: number | null
  }

  export type KeywordSumAggregateOutputType = {
    kiCompetition: number | null
    kiCpc: number | null
    kiSearchVolume: number | null
    kiLowTopOfPageBid: number | null
    kiHighTopOfPageBid: number | null
    kiKeywordDifficulty: number | null
  }

  export type KeywordMinAggregateOutputType = {
    id: string | null
    text: string | null
    kiLastCheck: Date | null
    kiCompetition: number | null
    kiCompetitionLevel: string | null
    kiCpc: number | null
    kiSearchVolume: number | null
    kiLowTopOfPageBid: number | null
    kiHighTopOfPageBid: number | null
    kiKeywordDifficulty: number | null
    kiMainIntent: string | null
    kiLastUpdatedKeywordInfo: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KeywordMaxAggregateOutputType = {
    id: string | null
    text: string | null
    kiLastCheck: Date | null
    kiCompetition: number | null
    kiCompetitionLevel: string | null
    kiCpc: number | null
    kiSearchVolume: number | null
    kiLowTopOfPageBid: number | null
    kiHighTopOfPageBid: number | null
    kiKeywordDifficulty: number | null
    kiMainIntent: string | null
    kiLastUpdatedKeywordInfo: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KeywordCountAggregateOutputType = {
    id: number
    text: number
    kiLastCheck: number
    kiCompetition: number
    kiCompetitionLevel: number
    kiCpc: number
    kiSearchVolume: number
    kiLowTopOfPageBid: number
    kiHighTopOfPageBid: number
    kiKeywordDifficulty: number
    kiMainIntent: number
    kiLastUpdatedKeywordInfo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KeywordAvgAggregateInputType = {
    kiCompetition?: true
    kiCpc?: true
    kiSearchVolume?: true
    kiLowTopOfPageBid?: true
    kiHighTopOfPageBid?: true
    kiKeywordDifficulty?: true
  }

  export type KeywordSumAggregateInputType = {
    kiCompetition?: true
    kiCpc?: true
    kiSearchVolume?: true
    kiLowTopOfPageBid?: true
    kiHighTopOfPageBid?: true
    kiKeywordDifficulty?: true
  }

  export type KeywordMinAggregateInputType = {
    id?: true
    text?: true
    kiLastCheck?: true
    kiCompetition?: true
    kiCompetitionLevel?: true
    kiCpc?: true
    kiSearchVolume?: true
    kiLowTopOfPageBid?: true
    kiHighTopOfPageBid?: true
    kiKeywordDifficulty?: true
    kiMainIntent?: true
    kiLastUpdatedKeywordInfo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KeywordMaxAggregateInputType = {
    id?: true
    text?: true
    kiLastCheck?: true
    kiCompetition?: true
    kiCompetitionLevel?: true
    kiCpc?: true
    kiSearchVolume?: true
    kiLowTopOfPageBid?: true
    kiHighTopOfPageBid?: true
    kiKeywordDifficulty?: true
    kiMainIntent?: true
    kiLastUpdatedKeywordInfo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KeywordCountAggregateInputType = {
    id?: true
    text?: true
    kiLastCheck?: true
    kiCompetition?: true
    kiCompetitionLevel?: true
    kiCpc?: true
    kiSearchVolume?: true
    kiLowTopOfPageBid?: true
    kiHighTopOfPageBid?: true
    kiKeywordDifficulty?: true
    kiMainIntent?: true
    kiLastUpdatedKeywordInfo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KeywordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Keyword to aggregate.
     */
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     */
    orderBy?: KeywordOrderByWithRelationInput | KeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Keywords
    **/
    _count?: true | KeywordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KeywordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KeywordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeywordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeywordMaxAggregateInputType
  }

  export type GetKeywordAggregateType<T extends KeywordAggregateArgs> = {
        [P in keyof T & keyof AggregateKeyword]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeyword[P]>
      : GetScalarType<T[P], AggregateKeyword[P]>
  }




  export type KeywordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeywordWhereInput
    orderBy?: KeywordOrderByWithAggregationInput | KeywordOrderByWithAggregationInput[]
    by: KeywordScalarFieldEnum[] | KeywordScalarFieldEnum
    having?: KeywordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeywordCountAggregateInputType | true
    _avg?: KeywordAvgAggregateInputType
    _sum?: KeywordSumAggregateInputType
    _min?: KeywordMinAggregateInputType
    _max?: KeywordMaxAggregateInputType
  }

  export type KeywordGroupByOutputType = {
    id: string
    text: string
    kiLastCheck: Date | null
    kiCompetition: number | null
    kiCompetitionLevel: string | null
    kiCpc: number | null
    kiSearchVolume: number | null
    kiLowTopOfPageBid: number | null
    kiHighTopOfPageBid: number | null
    kiKeywordDifficulty: number | null
    kiMainIntent: string | null
    kiLastUpdatedKeywordInfo: Date | null
    createdAt: Date
    updatedAt: Date
    _count: KeywordCountAggregateOutputType | null
    _avg: KeywordAvgAggregateOutputType | null
    _sum: KeywordSumAggregateOutputType | null
    _min: KeywordMinAggregateOutputType | null
    _max: KeywordMaxAggregateOutputType | null
  }

  type GetKeywordGroupByPayload<T extends KeywordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KeywordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeywordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeywordGroupByOutputType[P]>
            : GetScalarType<T[P], KeywordGroupByOutputType[P]>
        }
      >
    >


  export type KeywordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    kiLastCheck?: boolean
    kiCompetition?: boolean
    kiCompetitionLevel?: boolean
    kiCpc?: boolean
    kiSearchVolume?: boolean
    kiLowTopOfPageBid?: boolean
    kiHighTopOfPageBid?: boolean
    kiKeywordDifficulty?: boolean
    kiMainIntent?: boolean
    kiLastUpdatedKeywordInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serps?: boolean | Keyword$serpsArgs<ExtArgs>
    tasksAsSeed?: boolean | Keyword$tasksAsSeedArgs<ExtArgs>
    relationsAsSeed?: boolean | Keyword$relationsAsSeedArgs<ExtArgs>
    relationsAsRelated?: boolean | Keyword$relationsAsRelatedArgs<ExtArgs>
    relatedResults?: boolean | Keyword$relatedResultsArgs<ExtArgs>
    keywordProfiles?: boolean | Keyword$keywordProfilesArgs<ExtArgs>
    _count?: boolean | KeywordCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keyword"]>

  export type KeywordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    kiLastCheck?: boolean
    kiCompetition?: boolean
    kiCompetitionLevel?: boolean
    kiCpc?: boolean
    kiSearchVolume?: boolean
    kiLowTopOfPageBid?: boolean
    kiHighTopOfPageBid?: boolean
    kiKeywordDifficulty?: boolean
    kiMainIntent?: boolean
    kiLastUpdatedKeywordInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["keyword"]>

  export type KeywordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    kiLastCheck?: boolean
    kiCompetition?: boolean
    kiCompetitionLevel?: boolean
    kiCpc?: boolean
    kiSearchVolume?: boolean
    kiLowTopOfPageBid?: boolean
    kiHighTopOfPageBid?: boolean
    kiKeywordDifficulty?: boolean
    kiMainIntent?: boolean
    kiLastUpdatedKeywordInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["keyword"]>

  export type KeywordSelectScalar = {
    id?: boolean
    text?: boolean
    kiLastCheck?: boolean
    kiCompetition?: boolean
    kiCompetitionLevel?: boolean
    kiCpc?: boolean
    kiSearchVolume?: boolean
    kiLowTopOfPageBid?: boolean
    kiHighTopOfPageBid?: boolean
    kiKeywordDifficulty?: boolean
    kiMainIntent?: boolean
    kiLastUpdatedKeywordInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type KeywordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "text" | "kiLastCheck" | "kiCompetition" | "kiCompetitionLevel" | "kiCpc" | "kiSearchVolume" | "kiLowTopOfPageBid" | "kiHighTopOfPageBid" | "kiKeywordDifficulty" | "kiMainIntent" | "kiLastUpdatedKeywordInfo" | "createdAt" | "updatedAt", ExtArgs["result"]["keyword"]>
  export type KeywordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serps?: boolean | Keyword$serpsArgs<ExtArgs>
    tasksAsSeed?: boolean | Keyword$tasksAsSeedArgs<ExtArgs>
    relationsAsSeed?: boolean | Keyword$relationsAsSeedArgs<ExtArgs>
    relationsAsRelated?: boolean | Keyword$relationsAsRelatedArgs<ExtArgs>
    relatedResults?: boolean | Keyword$relatedResultsArgs<ExtArgs>
    keywordProfiles?: boolean | Keyword$keywordProfilesArgs<ExtArgs>
    _count?: boolean | KeywordCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type KeywordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type KeywordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $KeywordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Keyword"
    objects: {
      serps: Prisma.$SerpPayload<ExtArgs>[]
      tasksAsSeed: Prisma.$TaskPayload<ExtArgs>[]
      relationsAsSeed: Prisma.$KeywordRelationPayload<ExtArgs>[]
      relationsAsRelated: Prisma.$KeywordRelationPayload<ExtArgs>[]
      relatedResults: Prisma.$RelatedResultPayload<ExtArgs>[]
      keywordProfiles: Prisma.$KeywordProfilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      text: string
      kiLastCheck: Date | null
      kiCompetition: number | null
      kiCompetitionLevel: string | null
      kiCpc: number | null
      kiSearchVolume: number | null
      kiLowTopOfPageBid: number | null
      kiHighTopOfPageBid: number | null
      kiKeywordDifficulty: number | null
      kiMainIntent: string | null
      kiLastUpdatedKeywordInfo: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["keyword"]>
    composites: {}
  }

  type KeywordGetPayload<S extends boolean | null | undefined | KeywordDefaultArgs> = $Result.GetResult<Prisma.$KeywordPayload, S>

  type KeywordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KeywordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KeywordCountAggregateInputType | true
    }

  export interface KeywordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Keyword'], meta: { name: 'Keyword' } }
    /**
     * Find zero or one Keyword that matches the filter.
     * @param {KeywordFindUniqueArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KeywordFindUniqueArgs>(args: SelectSubset<T, KeywordFindUniqueArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Keyword that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KeywordFindUniqueOrThrowArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KeywordFindUniqueOrThrowArgs>(args: SelectSubset<T, KeywordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Keyword that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordFindFirstArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KeywordFindFirstArgs>(args?: SelectSubset<T, KeywordFindFirstArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Keyword that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordFindFirstOrThrowArgs} args - Arguments to find a Keyword
     * @example
     * // Get one Keyword
     * const keyword = await prisma.keyword.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KeywordFindFirstOrThrowArgs>(args?: SelectSubset<T, KeywordFindFirstOrThrowArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Keywords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Keywords
     * const keywords = await prisma.keyword.findMany()
     * 
     * // Get first 10 Keywords
     * const keywords = await prisma.keyword.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const keywordWithIdOnly = await prisma.keyword.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KeywordFindManyArgs>(args?: SelectSubset<T, KeywordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Keyword.
     * @param {KeywordCreateArgs} args - Arguments to create a Keyword.
     * @example
     * // Create one Keyword
     * const Keyword = await prisma.keyword.create({
     *   data: {
     *     // ... data to create a Keyword
     *   }
     * })
     * 
     */
    create<T extends KeywordCreateArgs>(args: SelectSubset<T, KeywordCreateArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Keywords.
     * @param {KeywordCreateManyArgs} args - Arguments to create many Keywords.
     * @example
     * // Create many Keywords
     * const keyword = await prisma.keyword.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KeywordCreateManyArgs>(args?: SelectSubset<T, KeywordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Keywords and returns the data saved in the database.
     * @param {KeywordCreateManyAndReturnArgs} args - Arguments to create many Keywords.
     * @example
     * // Create many Keywords
     * const keyword = await prisma.keyword.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Keywords and only return the `id`
     * const keywordWithIdOnly = await prisma.keyword.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KeywordCreateManyAndReturnArgs>(args?: SelectSubset<T, KeywordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Keyword.
     * @param {KeywordDeleteArgs} args - Arguments to delete one Keyword.
     * @example
     * // Delete one Keyword
     * const Keyword = await prisma.keyword.delete({
     *   where: {
     *     // ... filter to delete one Keyword
     *   }
     * })
     * 
     */
    delete<T extends KeywordDeleteArgs>(args: SelectSubset<T, KeywordDeleteArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Keyword.
     * @param {KeywordUpdateArgs} args - Arguments to update one Keyword.
     * @example
     * // Update one Keyword
     * const keyword = await prisma.keyword.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KeywordUpdateArgs>(args: SelectSubset<T, KeywordUpdateArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Keywords.
     * @param {KeywordDeleteManyArgs} args - Arguments to filter Keywords to delete.
     * @example
     * // Delete a few Keywords
     * const { count } = await prisma.keyword.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KeywordDeleteManyArgs>(args?: SelectSubset<T, KeywordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Keywords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Keywords
     * const keyword = await prisma.keyword.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KeywordUpdateManyArgs>(args: SelectSubset<T, KeywordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Keywords and returns the data updated in the database.
     * @param {KeywordUpdateManyAndReturnArgs} args - Arguments to update many Keywords.
     * @example
     * // Update many Keywords
     * const keyword = await prisma.keyword.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Keywords and only return the `id`
     * const keywordWithIdOnly = await prisma.keyword.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KeywordUpdateManyAndReturnArgs>(args: SelectSubset<T, KeywordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Keyword.
     * @param {KeywordUpsertArgs} args - Arguments to update or create a Keyword.
     * @example
     * // Update or create a Keyword
     * const keyword = await prisma.keyword.upsert({
     *   create: {
     *     // ... data to create a Keyword
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Keyword we want to update
     *   }
     * })
     */
    upsert<T extends KeywordUpsertArgs>(args: SelectSubset<T, KeywordUpsertArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Keywords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordCountArgs} args - Arguments to filter Keywords to count.
     * @example
     * // Count the number of Keywords
     * const count = await prisma.keyword.count({
     *   where: {
     *     // ... the filter for the Keywords we want to count
     *   }
     * })
    **/
    count<T extends KeywordCountArgs>(
      args?: Subset<T, KeywordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeywordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Keyword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeywordAggregateArgs>(args: Subset<T, KeywordAggregateArgs>): Prisma.PrismaPromise<GetKeywordAggregateType<T>>

    /**
     * Group by Keyword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeywordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeywordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeywordGroupByArgs['orderBy'] }
        : { orderBy?: KeywordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeywordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeywordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Keyword model
   */
  readonly fields: KeywordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Keyword.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KeywordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    serps<T extends Keyword$serpsArgs<ExtArgs> = {}>(args?: Subset<T, Keyword$serpsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SerpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tasksAsSeed<T extends Keyword$tasksAsSeedArgs<ExtArgs> = {}>(args?: Subset<T, Keyword$tasksAsSeedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    relationsAsSeed<T extends Keyword$relationsAsSeedArgs<ExtArgs> = {}>(args?: Subset<T, Keyword$relationsAsSeedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeywordRelationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    relationsAsRelated<T extends Keyword$relationsAsRelatedArgs<ExtArgs> = {}>(args?: Subset<T, Keyword$relationsAsRelatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeywordRelationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    relatedResults<T extends Keyword$relatedResultsArgs<ExtArgs> = {}>(args?: Subset<T, Keyword$relatedResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    keywordProfiles<T extends Keyword$keywordProfilesArgs<ExtArgs> = {}>(args?: Subset<T, Keyword$keywordProfilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeywordProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Keyword model
   */
  interface KeywordFieldRefs {
    readonly id: FieldRef<"Keyword", 'String'>
    readonly text: FieldRef<"Keyword", 'String'>
    readonly kiLastCheck: FieldRef<"Keyword", 'DateTime'>
    readonly kiCompetition: FieldRef<"Keyword", 'Float'>
    readonly kiCompetitionLevel: FieldRef<"Keyword", 'String'>
    readonly kiCpc: FieldRef<"Keyword", 'Float'>
    readonly kiSearchVolume: FieldRef<"Keyword", 'Int'>
    readonly kiLowTopOfPageBid: FieldRef<"Keyword", 'Float'>
    readonly kiHighTopOfPageBid: FieldRef<"Keyword", 'Float'>
    readonly kiKeywordDifficulty: FieldRef<"Keyword", 'Int'>
    readonly kiMainIntent: FieldRef<"Keyword", 'String'>
    readonly kiLastUpdatedKeywordInfo: FieldRef<"Keyword", 'DateTime'>
    readonly createdAt: FieldRef<"Keyword", 'DateTime'>
    readonly updatedAt: FieldRef<"Keyword", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Keyword findUnique
   */
  export type KeywordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keyword
     */
    omit?: KeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * Filter, which Keyword to fetch.
     */
    where: KeywordWhereUniqueInput
  }

  /**
   * Keyword findUniqueOrThrow
   */
  export type KeywordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keyword
     */
    omit?: KeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * Filter, which Keyword to fetch.
     */
    where: KeywordWhereUniqueInput
  }

  /**
   * Keyword findFirst
   */
  export type KeywordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keyword
     */
    omit?: KeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * Filter, which Keyword to fetch.
     */
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     */
    orderBy?: KeywordOrderByWithRelationInput | KeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keywords.
     */
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keywords.
     */
    distinct?: KeywordScalarFieldEnum | KeywordScalarFieldEnum[]
  }

  /**
   * Keyword findFirstOrThrow
   */
  export type KeywordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keyword
     */
    omit?: KeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * Filter, which Keyword to fetch.
     */
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     */
    orderBy?: KeywordOrderByWithRelationInput | KeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Keywords.
     */
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Keywords.
     */
    distinct?: KeywordScalarFieldEnum | KeywordScalarFieldEnum[]
  }

  /**
   * Keyword findMany
   */
  export type KeywordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keyword
     */
    omit?: KeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * Filter, which Keywords to fetch.
     */
    where?: KeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Keywords to fetch.
     */
    orderBy?: KeywordOrderByWithRelationInput | KeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Keywords.
     */
    cursor?: KeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Keywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Keywords.
     */
    skip?: number
    distinct?: KeywordScalarFieldEnum | KeywordScalarFieldEnum[]
  }

  /**
   * Keyword create
   */
  export type KeywordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keyword
     */
    omit?: KeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * The data needed to create a Keyword.
     */
    data: XOR<KeywordCreateInput, KeywordUncheckedCreateInput>
  }

  /**
   * Keyword createMany
   */
  export type KeywordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Keywords.
     */
    data: KeywordCreateManyInput | KeywordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Keyword createManyAndReturn
   */
  export type KeywordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Keyword
     */
    omit?: KeywordOmit<ExtArgs> | null
    /**
     * The data used to create many Keywords.
     */
    data: KeywordCreateManyInput | KeywordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Keyword update
   */
  export type KeywordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keyword
     */
    omit?: KeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * The data needed to update a Keyword.
     */
    data: XOR<KeywordUpdateInput, KeywordUncheckedUpdateInput>
    /**
     * Choose, which Keyword to update.
     */
    where: KeywordWhereUniqueInput
  }

  /**
   * Keyword updateMany
   */
  export type KeywordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Keywords.
     */
    data: XOR<KeywordUpdateManyMutationInput, KeywordUncheckedUpdateManyInput>
    /**
     * Filter which Keywords to update
     */
    where?: KeywordWhereInput
    /**
     * Limit how many Keywords to update.
     */
    limit?: number
  }

  /**
   * Keyword updateManyAndReturn
   */
  export type KeywordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Keyword
     */
    omit?: KeywordOmit<ExtArgs> | null
    /**
     * The data used to update Keywords.
     */
    data: XOR<KeywordUpdateManyMutationInput, KeywordUncheckedUpdateManyInput>
    /**
     * Filter which Keywords to update
     */
    where?: KeywordWhereInput
    /**
     * Limit how many Keywords to update.
     */
    limit?: number
  }

  /**
   * Keyword upsert
   */
  export type KeywordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keyword
     */
    omit?: KeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * The filter to search for the Keyword to update in case it exists.
     */
    where: KeywordWhereUniqueInput
    /**
     * In case the Keyword found by the `where` argument doesn't exist, create a new Keyword with this data.
     */
    create: XOR<KeywordCreateInput, KeywordUncheckedCreateInput>
    /**
     * In case the Keyword was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KeywordUpdateInput, KeywordUncheckedUpdateInput>
  }

  /**
   * Keyword delete
   */
  export type KeywordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keyword
     */
    omit?: KeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    /**
     * Filter which Keyword to delete.
     */
    where: KeywordWhereUniqueInput
  }

  /**
   * Keyword deleteMany
   */
  export type KeywordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Keywords to delete
     */
    where?: KeywordWhereInput
    /**
     * Limit how many Keywords to delete.
     */
    limit?: number
  }

  /**
   * Keyword.serps
   */
  export type Keyword$serpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serp
     */
    select?: SerpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Serp
     */
    omit?: SerpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerpInclude<ExtArgs> | null
    where?: SerpWhereInput
    orderBy?: SerpOrderByWithRelationInput | SerpOrderByWithRelationInput[]
    cursor?: SerpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SerpScalarFieldEnum | SerpScalarFieldEnum[]
  }

  /**
   * Keyword.tasksAsSeed
   */
  export type Keyword$tasksAsSeedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Keyword.relationsAsSeed
   */
  export type Keyword$relationsAsSeedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordRelation
     */
    select?: KeywordRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordRelation
     */
    omit?: KeywordRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordRelationInclude<ExtArgs> | null
    where?: KeywordRelationWhereInput
    orderBy?: KeywordRelationOrderByWithRelationInput | KeywordRelationOrderByWithRelationInput[]
    cursor?: KeywordRelationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KeywordRelationScalarFieldEnum | KeywordRelationScalarFieldEnum[]
  }

  /**
   * Keyword.relationsAsRelated
   */
  export type Keyword$relationsAsRelatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordRelation
     */
    select?: KeywordRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordRelation
     */
    omit?: KeywordRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordRelationInclude<ExtArgs> | null
    where?: KeywordRelationWhereInput
    orderBy?: KeywordRelationOrderByWithRelationInput | KeywordRelationOrderByWithRelationInput[]
    cursor?: KeywordRelationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KeywordRelationScalarFieldEnum | KeywordRelationScalarFieldEnum[]
  }

  /**
   * Keyword.relatedResults
   */
  export type Keyword$relatedResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedResult
     */
    select?: RelatedResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedResult
     */
    omit?: RelatedResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedResultInclude<ExtArgs> | null
    where?: RelatedResultWhereInput
    orderBy?: RelatedResultOrderByWithRelationInput | RelatedResultOrderByWithRelationInput[]
    cursor?: RelatedResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelatedResultScalarFieldEnum | RelatedResultScalarFieldEnum[]
  }

  /**
   * Keyword.keywordProfiles
   */
  export type Keyword$keywordProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordProfile
     */
    select?: KeywordProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordProfile
     */
    omit?: KeywordProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordProfileInclude<ExtArgs> | null
    where?: KeywordProfileWhereInput
    orderBy?: KeywordProfileOrderByWithRelationInput | KeywordProfileOrderByWithRelationInput[]
    cursor?: KeywordProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KeywordProfileScalarFieldEnum | KeywordProfileScalarFieldEnum[]
  }

  /**
   * Keyword without action
   */
  export type KeywordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keyword
     */
    omit?: KeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
  }


  /**
   * Model RelatedResult
   */

  export type AggregateRelatedResult = {
    _count: RelatedResultCountAggregateOutputType | null
    _avg: RelatedResultAvgAggregateOutputType | null
    _sum: RelatedResultSumAggregateOutputType | null
    _min: RelatedResultMinAggregateOutputType | null
    _max: RelatedResultMaxAggregateOutputType | null
  }

  export type RelatedResultAvgAggregateOutputType = {
    locationCode: number | null
    totalCount: number | null
    itemsCount: number | null
    offset: number | null
  }

  export type RelatedResultSumAggregateOutputType = {
    locationCode: number | null
    totalCount: bigint | null
    itemsCount: number | null
    offset: number | null
  }

  export type RelatedResultMinAggregateOutputType = {
    id: string | null
    taskId: string | null
    seedKeywordId: string | null
    seType: string | null
    locationCode: number | null
    languageCode: string | null
    totalCount: bigint | null
    itemsCount: number | null
    offset: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RelatedResultMaxAggregateOutputType = {
    id: string | null
    taskId: string | null
    seedKeywordId: string | null
    seType: string | null
    locationCode: number | null
    languageCode: string | null
    totalCount: bigint | null
    itemsCount: number | null
    offset: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RelatedResultCountAggregateOutputType = {
    id: number
    taskId: number
    seedKeywordId: number
    seType: number
    seedKeywords: number
    locationCode: number
    languageCode: number
    totalCount: number
    itemsCount: number
    offset: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RelatedResultAvgAggregateInputType = {
    locationCode?: true
    totalCount?: true
    itemsCount?: true
    offset?: true
  }

  export type RelatedResultSumAggregateInputType = {
    locationCode?: true
    totalCount?: true
    itemsCount?: true
    offset?: true
  }

  export type RelatedResultMinAggregateInputType = {
    id?: true
    taskId?: true
    seedKeywordId?: true
    seType?: true
    locationCode?: true
    languageCode?: true
    totalCount?: true
    itemsCount?: true
    offset?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RelatedResultMaxAggregateInputType = {
    id?: true
    taskId?: true
    seedKeywordId?: true
    seType?: true
    locationCode?: true
    languageCode?: true
    totalCount?: true
    itemsCount?: true
    offset?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RelatedResultCountAggregateInputType = {
    id?: true
    taskId?: true
    seedKeywordId?: true
    seType?: true
    seedKeywords?: true
    locationCode?: true
    languageCode?: true
    totalCount?: true
    itemsCount?: true
    offset?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RelatedResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RelatedResult to aggregate.
     */
    where?: RelatedResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatedResults to fetch.
     */
    orderBy?: RelatedResultOrderByWithRelationInput | RelatedResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RelatedResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatedResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatedResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RelatedResults
    **/
    _count?: true | RelatedResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RelatedResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RelatedResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RelatedResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RelatedResultMaxAggregateInputType
  }

  export type GetRelatedResultAggregateType<T extends RelatedResultAggregateArgs> = {
        [P in keyof T & keyof AggregateRelatedResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelatedResult[P]>
      : GetScalarType<T[P], AggregateRelatedResult[P]>
  }




  export type RelatedResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatedResultWhereInput
    orderBy?: RelatedResultOrderByWithAggregationInput | RelatedResultOrderByWithAggregationInput[]
    by: RelatedResultScalarFieldEnum[] | RelatedResultScalarFieldEnum
    having?: RelatedResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RelatedResultCountAggregateInputType | true
    _avg?: RelatedResultAvgAggregateInputType
    _sum?: RelatedResultSumAggregateInputType
    _min?: RelatedResultMinAggregateInputType
    _max?: RelatedResultMaxAggregateInputType
  }

  export type RelatedResultGroupByOutputType = {
    id: string
    taskId: string
    seedKeywordId: string
    seType: string | null
    seedKeywords: string[]
    locationCode: number | null
    languageCode: string | null
    totalCount: bigint | null
    itemsCount: number | null
    offset: number | null
    createdAt: Date
    updatedAt: Date
    _count: RelatedResultCountAggregateOutputType | null
    _avg: RelatedResultAvgAggregateOutputType | null
    _sum: RelatedResultSumAggregateOutputType | null
    _min: RelatedResultMinAggregateOutputType | null
    _max: RelatedResultMaxAggregateOutputType | null
  }

  type GetRelatedResultGroupByPayload<T extends RelatedResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RelatedResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RelatedResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RelatedResultGroupByOutputType[P]>
            : GetScalarType<T[P], RelatedResultGroupByOutputType[P]>
        }
      >
    >


  export type RelatedResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskId?: boolean
    seedKeywordId?: boolean
    seType?: boolean
    seedKeywords?: boolean
    locationCode?: boolean
    languageCode?: boolean
    totalCount?: boolean
    itemsCount?: boolean
    offset?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    seedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["relatedResult"]>

  export type RelatedResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskId?: boolean
    seedKeywordId?: boolean
    seType?: boolean
    seedKeywords?: boolean
    locationCode?: boolean
    languageCode?: boolean
    totalCount?: boolean
    itemsCount?: boolean
    offset?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    seedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["relatedResult"]>

  export type RelatedResultSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskId?: boolean
    seedKeywordId?: boolean
    seType?: boolean
    seedKeywords?: boolean
    locationCode?: boolean
    languageCode?: boolean
    totalCount?: boolean
    itemsCount?: boolean
    offset?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    seedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["relatedResult"]>

  export type RelatedResultSelectScalar = {
    id?: boolean
    taskId?: boolean
    seedKeywordId?: boolean
    seType?: boolean
    seedKeywords?: boolean
    locationCode?: boolean
    languageCode?: boolean
    totalCount?: boolean
    itemsCount?: boolean
    offset?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RelatedResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "taskId" | "seedKeywordId" | "seType" | "seedKeywords" | "locationCode" | "languageCode" | "totalCount" | "itemsCount" | "offset" | "createdAt" | "updatedAt", ExtArgs["result"]["relatedResult"]>
  export type RelatedResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    seedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }
  export type RelatedResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    seedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }
  export type RelatedResultIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    seedKeyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }

  export type $RelatedResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RelatedResult"
    objects: {
      task: Prisma.$TaskPayload<ExtArgs>
      seedKeyword: Prisma.$KeywordPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      taskId: string
      seedKeywordId: string
      seType: string | null
      seedKeywords: string[]
      locationCode: number | null
      languageCode: string | null
      totalCount: bigint | null
      itemsCount: number | null
      offset: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["relatedResult"]>
    composites: {}
  }

  type RelatedResultGetPayload<S extends boolean | null | undefined | RelatedResultDefaultArgs> = $Result.GetResult<Prisma.$RelatedResultPayload, S>

  type RelatedResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RelatedResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RelatedResultCountAggregateInputType | true
    }

  export interface RelatedResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RelatedResult'], meta: { name: 'RelatedResult' } }
    /**
     * Find zero or one RelatedResult that matches the filter.
     * @param {RelatedResultFindUniqueArgs} args - Arguments to find a RelatedResult
     * @example
     * // Get one RelatedResult
     * const relatedResult = await prisma.relatedResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RelatedResultFindUniqueArgs>(args: SelectSubset<T, RelatedResultFindUniqueArgs<ExtArgs>>): Prisma__RelatedResultClient<$Result.GetResult<Prisma.$RelatedResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RelatedResult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RelatedResultFindUniqueOrThrowArgs} args - Arguments to find a RelatedResult
     * @example
     * // Get one RelatedResult
     * const relatedResult = await prisma.relatedResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RelatedResultFindUniqueOrThrowArgs>(args: SelectSubset<T, RelatedResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RelatedResultClient<$Result.GetResult<Prisma.$RelatedResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RelatedResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedResultFindFirstArgs} args - Arguments to find a RelatedResult
     * @example
     * // Get one RelatedResult
     * const relatedResult = await prisma.relatedResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RelatedResultFindFirstArgs>(args?: SelectSubset<T, RelatedResultFindFirstArgs<ExtArgs>>): Prisma__RelatedResultClient<$Result.GetResult<Prisma.$RelatedResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RelatedResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedResultFindFirstOrThrowArgs} args - Arguments to find a RelatedResult
     * @example
     * // Get one RelatedResult
     * const relatedResult = await prisma.relatedResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RelatedResultFindFirstOrThrowArgs>(args?: SelectSubset<T, RelatedResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__RelatedResultClient<$Result.GetResult<Prisma.$RelatedResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RelatedResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RelatedResults
     * const relatedResults = await prisma.relatedResult.findMany()
     * 
     * // Get first 10 RelatedResults
     * const relatedResults = await prisma.relatedResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const relatedResultWithIdOnly = await prisma.relatedResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RelatedResultFindManyArgs>(args?: SelectSubset<T, RelatedResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RelatedResult.
     * @param {RelatedResultCreateArgs} args - Arguments to create a RelatedResult.
     * @example
     * // Create one RelatedResult
     * const RelatedResult = await prisma.relatedResult.create({
     *   data: {
     *     // ... data to create a RelatedResult
     *   }
     * })
     * 
     */
    create<T extends RelatedResultCreateArgs>(args: SelectSubset<T, RelatedResultCreateArgs<ExtArgs>>): Prisma__RelatedResultClient<$Result.GetResult<Prisma.$RelatedResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RelatedResults.
     * @param {RelatedResultCreateManyArgs} args - Arguments to create many RelatedResults.
     * @example
     * // Create many RelatedResults
     * const relatedResult = await prisma.relatedResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RelatedResultCreateManyArgs>(args?: SelectSubset<T, RelatedResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RelatedResults and returns the data saved in the database.
     * @param {RelatedResultCreateManyAndReturnArgs} args - Arguments to create many RelatedResults.
     * @example
     * // Create many RelatedResults
     * const relatedResult = await prisma.relatedResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RelatedResults and only return the `id`
     * const relatedResultWithIdOnly = await prisma.relatedResult.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RelatedResultCreateManyAndReturnArgs>(args?: SelectSubset<T, RelatedResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RelatedResult.
     * @param {RelatedResultDeleteArgs} args - Arguments to delete one RelatedResult.
     * @example
     * // Delete one RelatedResult
     * const RelatedResult = await prisma.relatedResult.delete({
     *   where: {
     *     // ... filter to delete one RelatedResult
     *   }
     * })
     * 
     */
    delete<T extends RelatedResultDeleteArgs>(args: SelectSubset<T, RelatedResultDeleteArgs<ExtArgs>>): Prisma__RelatedResultClient<$Result.GetResult<Prisma.$RelatedResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RelatedResult.
     * @param {RelatedResultUpdateArgs} args - Arguments to update one RelatedResult.
     * @example
     * // Update one RelatedResult
     * const relatedResult = await prisma.relatedResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RelatedResultUpdateArgs>(args: SelectSubset<T, RelatedResultUpdateArgs<ExtArgs>>): Prisma__RelatedResultClient<$Result.GetResult<Prisma.$RelatedResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RelatedResults.
     * @param {RelatedResultDeleteManyArgs} args - Arguments to filter RelatedResults to delete.
     * @example
     * // Delete a few RelatedResults
     * const { count } = await prisma.relatedResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RelatedResultDeleteManyArgs>(args?: SelectSubset<T, RelatedResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RelatedResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RelatedResults
     * const relatedResult = await prisma.relatedResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RelatedResultUpdateManyArgs>(args: SelectSubset<T, RelatedResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RelatedResults and returns the data updated in the database.
     * @param {RelatedResultUpdateManyAndReturnArgs} args - Arguments to update many RelatedResults.
     * @example
     * // Update many RelatedResults
     * const relatedResult = await prisma.relatedResult.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RelatedResults and only return the `id`
     * const relatedResultWithIdOnly = await prisma.relatedResult.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RelatedResultUpdateManyAndReturnArgs>(args: SelectSubset<T, RelatedResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RelatedResult.
     * @param {RelatedResultUpsertArgs} args - Arguments to update or create a RelatedResult.
     * @example
     * // Update or create a RelatedResult
     * const relatedResult = await prisma.relatedResult.upsert({
     *   create: {
     *     // ... data to create a RelatedResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RelatedResult we want to update
     *   }
     * })
     */
    upsert<T extends RelatedResultUpsertArgs>(args: SelectSubset<T, RelatedResultUpsertArgs<ExtArgs>>): Prisma__RelatedResultClient<$Result.GetResult<Prisma.$RelatedResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RelatedResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedResultCountArgs} args - Arguments to filter RelatedResults to count.
     * @example
     * // Count the number of RelatedResults
     * const count = await prisma.relatedResult.count({
     *   where: {
     *     // ... the filter for the RelatedResults we want to count
     *   }
     * })
    **/
    count<T extends RelatedResultCountArgs>(
      args?: Subset<T, RelatedResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RelatedResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RelatedResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RelatedResultAggregateArgs>(args: Subset<T, RelatedResultAggregateArgs>): Prisma.PrismaPromise<GetRelatedResultAggregateType<T>>

    /**
     * Group by RelatedResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RelatedResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RelatedResultGroupByArgs['orderBy'] }
        : { orderBy?: RelatedResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RelatedResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRelatedResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RelatedResult model
   */
  readonly fields: RelatedResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RelatedResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RelatedResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    seedKeyword<T extends KeywordDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KeywordDefaultArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RelatedResult model
   */
  interface RelatedResultFieldRefs {
    readonly id: FieldRef<"RelatedResult", 'String'>
    readonly taskId: FieldRef<"RelatedResult", 'String'>
    readonly seedKeywordId: FieldRef<"RelatedResult", 'String'>
    readonly seType: FieldRef<"RelatedResult", 'String'>
    readonly seedKeywords: FieldRef<"RelatedResult", 'String[]'>
    readonly locationCode: FieldRef<"RelatedResult", 'Int'>
    readonly languageCode: FieldRef<"RelatedResult", 'String'>
    readonly totalCount: FieldRef<"RelatedResult", 'BigInt'>
    readonly itemsCount: FieldRef<"RelatedResult", 'Int'>
    readonly offset: FieldRef<"RelatedResult", 'Int'>
    readonly createdAt: FieldRef<"RelatedResult", 'DateTime'>
    readonly updatedAt: FieldRef<"RelatedResult", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RelatedResult findUnique
   */
  export type RelatedResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedResult
     */
    select?: RelatedResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedResult
     */
    omit?: RelatedResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedResultInclude<ExtArgs> | null
    /**
     * Filter, which RelatedResult to fetch.
     */
    where: RelatedResultWhereUniqueInput
  }

  /**
   * RelatedResult findUniqueOrThrow
   */
  export type RelatedResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedResult
     */
    select?: RelatedResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedResult
     */
    omit?: RelatedResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedResultInclude<ExtArgs> | null
    /**
     * Filter, which RelatedResult to fetch.
     */
    where: RelatedResultWhereUniqueInput
  }

  /**
   * RelatedResult findFirst
   */
  export type RelatedResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedResult
     */
    select?: RelatedResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedResult
     */
    omit?: RelatedResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedResultInclude<ExtArgs> | null
    /**
     * Filter, which RelatedResult to fetch.
     */
    where?: RelatedResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatedResults to fetch.
     */
    orderBy?: RelatedResultOrderByWithRelationInput | RelatedResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RelatedResults.
     */
    cursor?: RelatedResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatedResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatedResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RelatedResults.
     */
    distinct?: RelatedResultScalarFieldEnum | RelatedResultScalarFieldEnum[]
  }

  /**
   * RelatedResult findFirstOrThrow
   */
  export type RelatedResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedResult
     */
    select?: RelatedResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedResult
     */
    omit?: RelatedResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedResultInclude<ExtArgs> | null
    /**
     * Filter, which RelatedResult to fetch.
     */
    where?: RelatedResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatedResults to fetch.
     */
    orderBy?: RelatedResultOrderByWithRelationInput | RelatedResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RelatedResults.
     */
    cursor?: RelatedResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatedResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatedResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RelatedResults.
     */
    distinct?: RelatedResultScalarFieldEnum | RelatedResultScalarFieldEnum[]
  }

  /**
   * RelatedResult findMany
   */
  export type RelatedResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedResult
     */
    select?: RelatedResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedResult
     */
    omit?: RelatedResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedResultInclude<ExtArgs> | null
    /**
     * Filter, which RelatedResults to fetch.
     */
    where?: RelatedResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatedResults to fetch.
     */
    orderBy?: RelatedResultOrderByWithRelationInput | RelatedResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RelatedResults.
     */
    cursor?: RelatedResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatedResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatedResults.
     */
    skip?: number
    distinct?: RelatedResultScalarFieldEnum | RelatedResultScalarFieldEnum[]
  }

  /**
   * RelatedResult create
   */
  export type RelatedResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedResult
     */
    select?: RelatedResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedResult
     */
    omit?: RelatedResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedResultInclude<ExtArgs> | null
    /**
     * The data needed to create a RelatedResult.
     */
    data: XOR<RelatedResultCreateInput, RelatedResultUncheckedCreateInput>
  }

  /**
   * RelatedResult createMany
   */
  export type RelatedResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RelatedResults.
     */
    data: RelatedResultCreateManyInput | RelatedResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RelatedResult createManyAndReturn
   */
  export type RelatedResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedResult
     */
    select?: RelatedResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedResult
     */
    omit?: RelatedResultOmit<ExtArgs> | null
    /**
     * The data used to create many RelatedResults.
     */
    data: RelatedResultCreateManyInput | RelatedResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RelatedResult update
   */
  export type RelatedResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedResult
     */
    select?: RelatedResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedResult
     */
    omit?: RelatedResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedResultInclude<ExtArgs> | null
    /**
     * The data needed to update a RelatedResult.
     */
    data: XOR<RelatedResultUpdateInput, RelatedResultUncheckedUpdateInput>
    /**
     * Choose, which RelatedResult to update.
     */
    where: RelatedResultWhereUniqueInput
  }

  /**
   * RelatedResult updateMany
   */
  export type RelatedResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RelatedResults.
     */
    data: XOR<RelatedResultUpdateManyMutationInput, RelatedResultUncheckedUpdateManyInput>
    /**
     * Filter which RelatedResults to update
     */
    where?: RelatedResultWhereInput
    /**
     * Limit how many RelatedResults to update.
     */
    limit?: number
  }

  /**
   * RelatedResult updateManyAndReturn
   */
  export type RelatedResultUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedResult
     */
    select?: RelatedResultSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedResult
     */
    omit?: RelatedResultOmit<ExtArgs> | null
    /**
     * The data used to update RelatedResults.
     */
    data: XOR<RelatedResultUpdateManyMutationInput, RelatedResultUncheckedUpdateManyInput>
    /**
     * Filter which RelatedResults to update
     */
    where?: RelatedResultWhereInput
    /**
     * Limit how many RelatedResults to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedResultIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RelatedResult upsert
   */
  export type RelatedResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedResult
     */
    select?: RelatedResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedResult
     */
    omit?: RelatedResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedResultInclude<ExtArgs> | null
    /**
     * The filter to search for the RelatedResult to update in case it exists.
     */
    where: RelatedResultWhereUniqueInput
    /**
     * In case the RelatedResult found by the `where` argument doesn't exist, create a new RelatedResult with this data.
     */
    create: XOR<RelatedResultCreateInput, RelatedResultUncheckedCreateInput>
    /**
     * In case the RelatedResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RelatedResultUpdateInput, RelatedResultUncheckedUpdateInput>
  }

  /**
   * RelatedResult delete
   */
  export type RelatedResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedResult
     */
    select?: RelatedResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedResult
     */
    omit?: RelatedResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedResultInclude<ExtArgs> | null
    /**
     * Filter which RelatedResult to delete.
     */
    where: RelatedResultWhereUniqueInput
  }

  /**
   * RelatedResult deleteMany
   */
  export type RelatedResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RelatedResults to delete
     */
    where?: RelatedResultWhereInput
    /**
     * Limit how many RelatedResults to delete.
     */
    limit?: number
  }

  /**
   * RelatedResult without action
   */
  export type RelatedResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedResult
     */
    select?: RelatedResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedResult
     */
    omit?: RelatedResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedResultInclude<ExtArgs> | null
  }


  /**
   * Model Result
   */

  export type AggregateResult = {
    _count: ResultCountAggregateOutputType | null
    _avg: ResultAvgAggregateOutputType | null
    _sum: ResultSumAggregateOutputType | null
    _min: ResultMinAggregateOutputType | null
    _max: ResultMaxAggregateOutputType | null
  }

  export type ResultAvgAggregateOutputType = {
    position: number | null
  }

  export type ResultSumAggregateOutputType = {
    position: number | null
  }

  export type ResultMinAggregateOutputType = {
    id: string | null
    serpId: string | null
    position: number | null
    url: string | null
    type: string | null
    title: string | null
    snippet: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResultMaxAggregateOutputType = {
    id: string | null
    serpId: string | null
    position: number | null
    url: string | null
    type: string | null
    title: string | null
    snippet: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResultCountAggregateOutputType = {
    id: number
    serpId: number
    position: number
    url: number
    type: number
    title: number
    snippet: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ResultAvgAggregateInputType = {
    position?: true
  }

  export type ResultSumAggregateInputType = {
    position?: true
  }

  export type ResultMinAggregateInputType = {
    id?: true
    serpId?: true
    position?: true
    url?: true
    type?: true
    title?: true
    snippet?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResultMaxAggregateInputType = {
    id?: true
    serpId?: true
    position?: true
    url?: true
    type?: true
    title?: true
    snippet?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResultCountAggregateInputType = {
    id?: true
    serpId?: true
    position?: true
    url?: true
    type?: true
    title?: true
    snippet?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Result to aggregate.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Results
    **/
    _count?: true | ResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResultMaxAggregateInputType
  }

  export type GetResultAggregateType<T extends ResultAggregateArgs> = {
        [P in keyof T & keyof AggregateResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResult[P]>
      : GetScalarType<T[P], AggregateResult[P]>
  }




  export type ResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResultWhereInput
    orderBy?: ResultOrderByWithAggregationInput | ResultOrderByWithAggregationInput[]
    by: ResultScalarFieldEnum[] | ResultScalarFieldEnum
    having?: ResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResultCountAggregateInputType | true
    _avg?: ResultAvgAggregateInputType
    _sum?: ResultSumAggregateInputType
    _min?: ResultMinAggregateInputType
    _max?: ResultMaxAggregateInputType
  }

  export type ResultGroupByOutputType = {
    id: string
    serpId: string
    position: number
    url: string
    type: string | null
    title: string | null
    snippet: string | null
    createdAt: Date
    updatedAt: Date
    _count: ResultCountAggregateOutputType | null
    _avg: ResultAvgAggregateOutputType | null
    _sum: ResultSumAggregateOutputType | null
    _min: ResultMinAggregateOutputType | null
    _max: ResultMaxAggregateOutputType | null
  }

  type GetResultGroupByPayload<T extends ResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResultGroupByOutputType[P]>
            : GetScalarType<T[P], ResultGroupByOutputType[P]>
        }
      >
    >


  export type ResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serpId?: boolean
    position?: boolean
    url?: boolean
    type?: boolean
    title?: boolean
    snippet?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serp?: boolean | SerpDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["result"]>

  export type ResultSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serpId?: boolean
    position?: boolean
    url?: boolean
    type?: boolean
    title?: boolean
    snippet?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serp?: boolean | SerpDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["result"]>

  export type ResultSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serpId?: boolean
    position?: boolean
    url?: boolean
    type?: boolean
    title?: boolean
    snippet?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    serp?: boolean | SerpDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["result"]>

  export type ResultSelectScalar = {
    id?: boolean
    serpId?: boolean
    position?: boolean
    url?: boolean
    type?: boolean
    title?: boolean
    snippet?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "serpId" | "position" | "url" | "type" | "title" | "snippet" | "createdAt" | "updatedAt", ExtArgs["result"]["result"]>
  export type ResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serp?: boolean | SerpDefaultArgs<ExtArgs>
  }
  export type ResultIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serp?: boolean | SerpDefaultArgs<ExtArgs>
  }
  export type ResultIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serp?: boolean | SerpDefaultArgs<ExtArgs>
  }

  export type $ResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Result"
    objects: {
      serp: Prisma.$SerpPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      serpId: string
      position: number
      url: string
      type: string | null
      title: string | null
      snippet: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["result"]>
    composites: {}
  }

  type ResultGetPayload<S extends boolean | null | undefined | ResultDefaultArgs> = $Result.GetResult<Prisma.$ResultPayload, S>

  type ResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResultCountAggregateInputType | true
    }

  export interface ResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Result'], meta: { name: 'Result' } }
    /**
     * Find zero or one Result that matches the filter.
     * @param {ResultFindUniqueArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResultFindUniqueArgs>(args: SelectSubset<T, ResultFindUniqueArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Result that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResultFindUniqueOrThrowArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResultFindUniqueOrThrowArgs>(args: SelectSubset<T, ResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Result that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultFindFirstArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResultFindFirstArgs>(args?: SelectSubset<T, ResultFindFirstArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Result that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultFindFirstOrThrowArgs} args - Arguments to find a Result
     * @example
     * // Get one Result
     * const result = await prisma.result.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResultFindFirstOrThrowArgs>(args?: SelectSubset<T, ResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Results that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Results
     * const results = await prisma.result.findMany()
     * 
     * // Get first 10 Results
     * const results = await prisma.result.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resultWithIdOnly = await prisma.result.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResultFindManyArgs>(args?: SelectSubset<T, ResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Result.
     * @param {ResultCreateArgs} args - Arguments to create a Result.
     * @example
     * // Create one Result
     * const Result = await prisma.result.create({
     *   data: {
     *     // ... data to create a Result
     *   }
     * })
     * 
     */
    create<T extends ResultCreateArgs>(args: SelectSubset<T, ResultCreateArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Results.
     * @param {ResultCreateManyArgs} args - Arguments to create many Results.
     * @example
     * // Create many Results
     * const result = await prisma.result.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResultCreateManyArgs>(args?: SelectSubset<T, ResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Results and returns the data saved in the database.
     * @param {ResultCreateManyAndReturnArgs} args - Arguments to create many Results.
     * @example
     * // Create many Results
     * const result = await prisma.result.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Results and only return the `id`
     * const resultWithIdOnly = await prisma.result.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResultCreateManyAndReturnArgs>(args?: SelectSubset<T, ResultCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Result.
     * @param {ResultDeleteArgs} args - Arguments to delete one Result.
     * @example
     * // Delete one Result
     * const Result = await prisma.result.delete({
     *   where: {
     *     // ... filter to delete one Result
     *   }
     * })
     * 
     */
    delete<T extends ResultDeleteArgs>(args: SelectSubset<T, ResultDeleteArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Result.
     * @param {ResultUpdateArgs} args - Arguments to update one Result.
     * @example
     * // Update one Result
     * const result = await prisma.result.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResultUpdateArgs>(args: SelectSubset<T, ResultUpdateArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Results.
     * @param {ResultDeleteManyArgs} args - Arguments to filter Results to delete.
     * @example
     * // Delete a few Results
     * const { count } = await prisma.result.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResultDeleteManyArgs>(args?: SelectSubset<T, ResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Results.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Results
     * const result = await prisma.result.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResultUpdateManyArgs>(args: SelectSubset<T, ResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Results and returns the data updated in the database.
     * @param {ResultUpdateManyAndReturnArgs} args - Arguments to update many Results.
     * @example
     * // Update many Results
     * const result = await prisma.result.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Results and only return the `id`
     * const resultWithIdOnly = await prisma.result.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResultUpdateManyAndReturnArgs>(args: SelectSubset<T, ResultUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Result.
     * @param {ResultUpsertArgs} args - Arguments to update or create a Result.
     * @example
     * // Update or create a Result
     * const result = await prisma.result.upsert({
     *   create: {
     *     // ... data to create a Result
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Result we want to update
     *   }
     * })
     */
    upsert<T extends ResultUpsertArgs>(args: SelectSubset<T, ResultUpsertArgs<ExtArgs>>): Prisma__ResultClient<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Results.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultCountArgs} args - Arguments to filter Results to count.
     * @example
     * // Count the number of Results
     * const count = await prisma.result.count({
     *   where: {
     *     // ... the filter for the Results we want to count
     *   }
     * })
    **/
    count<T extends ResultCountArgs>(
      args?: Subset<T, ResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Result.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResultAggregateArgs>(args: Subset<T, ResultAggregateArgs>): Prisma.PrismaPromise<GetResultAggregateType<T>>

    /**
     * Group by Result.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResultGroupByArgs['orderBy'] }
        : { orderBy?: ResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Result model
   */
  readonly fields: ResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Result.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    serp<T extends SerpDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SerpDefaultArgs<ExtArgs>>): Prisma__SerpClient<$Result.GetResult<Prisma.$SerpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Result model
   */
  interface ResultFieldRefs {
    readonly id: FieldRef<"Result", 'String'>
    readonly serpId: FieldRef<"Result", 'String'>
    readonly position: FieldRef<"Result", 'Int'>
    readonly url: FieldRef<"Result", 'String'>
    readonly type: FieldRef<"Result", 'String'>
    readonly title: FieldRef<"Result", 'String'>
    readonly snippet: FieldRef<"Result", 'String'>
    readonly createdAt: FieldRef<"Result", 'DateTime'>
    readonly updatedAt: FieldRef<"Result", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Result findUnique
   */
  export type ResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter, which Result to fetch.
     */
    where: ResultWhereUniqueInput
  }

  /**
   * Result findUniqueOrThrow
   */
  export type ResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter, which Result to fetch.
     */
    where: ResultWhereUniqueInput
  }

  /**
   * Result findFirst
   */
  export type ResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter, which Result to fetch.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Results.
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Results.
     */
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * Result findFirstOrThrow
   */
  export type ResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter, which Result to fetch.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Results.
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Results.
     */
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * Result findMany
   */
  export type ResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter, which Results to fetch.
     */
    where?: ResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Results to fetch.
     */
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Results.
     */
    cursor?: ResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Results from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Results.
     */
    skip?: number
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * Result create
   */
  export type ResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * The data needed to create a Result.
     */
    data: XOR<ResultCreateInput, ResultUncheckedCreateInput>
  }

  /**
   * Result createMany
   */
  export type ResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Results.
     */
    data: ResultCreateManyInput | ResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Result createManyAndReturn
   */
  export type ResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * The data used to create many Results.
     */
    data: ResultCreateManyInput | ResultCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Result update
   */
  export type ResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * The data needed to update a Result.
     */
    data: XOR<ResultUpdateInput, ResultUncheckedUpdateInput>
    /**
     * Choose, which Result to update.
     */
    where: ResultWhereUniqueInput
  }

  /**
   * Result updateMany
   */
  export type ResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Results.
     */
    data: XOR<ResultUpdateManyMutationInput, ResultUncheckedUpdateManyInput>
    /**
     * Filter which Results to update
     */
    where?: ResultWhereInput
    /**
     * Limit how many Results to update.
     */
    limit?: number
  }

  /**
   * Result updateManyAndReturn
   */
  export type ResultUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * The data used to update Results.
     */
    data: XOR<ResultUpdateManyMutationInput, ResultUncheckedUpdateManyInput>
    /**
     * Filter which Results to update
     */
    where?: ResultWhereInput
    /**
     * Limit how many Results to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Result upsert
   */
  export type ResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * The filter to search for the Result to update in case it exists.
     */
    where: ResultWhereUniqueInput
    /**
     * In case the Result found by the `where` argument doesn't exist, create a new Result with this data.
     */
    create: XOR<ResultCreateInput, ResultUncheckedCreateInput>
    /**
     * In case the Result was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResultUpdateInput, ResultUncheckedUpdateInput>
  }

  /**
   * Result delete
   */
  export type ResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    /**
     * Filter which Result to delete.
     */
    where: ResultWhereUniqueInput
  }

  /**
   * Result deleteMany
   */
  export type ResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Results to delete
     */
    where?: ResultWhereInput
    /**
     * Limit how many Results to delete.
     */
    limit?: number
  }

  /**
   * Result without action
   */
  export type ResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
  }


  /**
   * Model Serp
   */

  export type AggregateSerp = {
    _count: SerpCountAggregateOutputType | null
    _avg: SerpAvgAggregateOutputType | null
    _sum: SerpSumAggregateOutputType | null
    _min: SerpMinAggregateOutputType | null
    _max: SerpMaxAggregateOutputType | null
  }

  export type SerpAvgAggregateOutputType = {
    locationCode: number | null
    seResultsCount: number | null
    itemsCount: number | null
  }

  export type SerpSumAggregateOutputType = {
    locationCode: number | null
    seResultsCount: bigint | null
    itemsCount: number | null
  }

  export type SerpMinAggregateOutputType = {
    id: string | null
    taskId: string | null
    keywordId: string | null
    type: string | null
    seDomain: string | null
    locationCode: number | null
    languageCode: string | null
    checkUrl: string | null
    fetchTimestampFromApi: Date | null
    seResultsCount: bigint | null
    itemsCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SerpMaxAggregateOutputType = {
    id: string | null
    taskId: string | null
    keywordId: string | null
    type: string | null
    seDomain: string | null
    locationCode: number | null
    languageCode: string | null
    checkUrl: string | null
    fetchTimestampFromApi: Date | null
    seResultsCount: bigint | null
    itemsCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SerpCountAggregateOutputType = {
    id: number
    taskId: number
    keywordId: number
    type: number
    seDomain: number
    locationCode: number
    languageCode: number
    checkUrl: number
    fetchTimestampFromApi: number
    itemTypes: number
    seResultsCount: number
    itemsCount: number
    refinementChips: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SerpAvgAggregateInputType = {
    locationCode?: true
    seResultsCount?: true
    itemsCount?: true
  }

  export type SerpSumAggregateInputType = {
    locationCode?: true
    seResultsCount?: true
    itemsCount?: true
  }

  export type SerpMinAggregateInputType = {
    id?: true
    taskId?: true
    keywordId?: true
    type?: true
    seDomain?: true
    locationCode?: true
    languageCode?: true
    checkUrl?: true
    fetchTimestampFromApi?: true
    seResultsCount?: true
    itemsCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SerpMaxAggregateInputType = {
    id?: true
    taskId?: true
    keywordId?: true
    type?: true
    seDomain?: true
    locationCode?: true
    languageCode?: true
    checkUrl?: true
    fetchTimestampFromApi?: true
    seResultsCount?: true
    itemsCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SerpCountAggregateInputType = {
    id?: true
    taskId?: true
    keywordId?: true
    type?: true
    seDomain?: true
    locationCode?: true
    languageCode?: true
    checkUrl?: true
    fetchTimestampFromApi?: true
    itemTypes?: true
    seResultsCount?: true
    itemsCount?: true
    refinementChips?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SerpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Serp to aggregate.
     */
    where?: SerpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Serps to fetch.
     */
    orderBy?: SerpOrderByWithRelationInput | SerpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SerpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Serps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Serps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Serps
    **/
    _count?: true | SerpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SerpAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SerpSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SerpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SerpMaxAggregateInputType
  }

  export type GetSerpAggregateType<T extends SerpAggregateArgs> = {
        [P in keyof T & keyof AggregateSerp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSerp[P]>
      : GetScalarType<T[P], AggregateSerp[P]>
  }




  export type SerpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SerpWhereInput
    orderBy?: SerpOrderByWithAggregationInput | SerpOrderByWithAggregationInput[]
    by: SerpScalarFieldEnum[] | SerpScalarFieldEnum
    having?: SerpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SerpCountAggregateInputType | true
    _avg?: SerpAvgAggregateInputType
    _sum?: SerpSumAggregateInputType
    _min?: SerpMinAggregateInputType
    _max?: SerpMaxAggregateInputType
  }

  export type SerpGroupByOutputType = {
    id: string
    taskId: string
    keywordId: string
    type: string | null
    seDomain: string | null
    locationCode: number | null
    languageCode: string | null
    checkUrl: string | null
    fetchTimestampFromApi: Date | null
    itemTypes: string[]
    seResultsCount: bigint | null
    itemsCount: number | null
    refinementChips: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: SerpCountAggregateOutputType | null
    _avg: SerpAvgAggregateOutputType | null
    _sum: SerpSumAggregateOutputType | null
    _min: SerpMinAggregateOutputType | null
    _max: SerpMaxAggregateOutputType | null
  }

  type GetSerpGroupByPayload<T extends SerpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SerpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SerpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SerpGroupByOutputType[P]>
            : GetScalarType<T[P], SerpGroupByOutputType[P]>
        }
      >
    >


  export type SerpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskId?: boolean
    keywordId?: boolean
    type?: boolean
    seDomain?: boolean
    locationCode?: boolean
    languageCode?: boolean
    checkUrl?: boolean
    fetchTimestampFromApi?: boolean
    itemTypes?: boolean
    seResultsCount?: boolean
    itemsCount?: boolean
    refinementChips?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
    result?: boolean | Serp$resultArgs<ExtArgs>
    _count?: boolean | SerpCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serp"]>

  export type SerpSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskId?: boolean
    keywordId?: boolean
    type?: boolean
    seDomain?: boolean
    locationCode?: boolean
    languageCode?: boolean
    checkUrl?: boolean
    fetchTimestampFromApi?: boolean
    itemTypes?: boolean
    seResultsCount?: boolean
    itemsCount?: boolean
    refinementChips?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serp"]>

  export type SerpSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    taskId?: boolean
    keywordId?: boolean
    type?: boolean
    seDomain?: boolean
    locationCode?: boolean
    languageCode?: boolean
    checkUrl?: boolean
    fetchTimestampFromApi?: boolean
    itemTypes?: boolean
    seResultsCount?: boolean
    itemsCount?: boolean
    refinementChips?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    task?: boolean | TaskDefaultArgs<ExtArgs>
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serp"]>

  export type SerpSelectScalar = {
    id?: boolean
    taskId?: boolean
    keywordId?: boolean
    type?: boolean
    seDomain?: boolean
    locationCode?: boolean
    languageCode?: boolean
    checkUrl?: boolean
    fetchTimestampFromApi?: boolean
    itemTypes?: boolean
    seResultsCount?: boolean
    itemsCount?: boolean
    refinementChips?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SerpOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "taskId" | "keywordId" | "type" | "seDomain" | "locationCode" | "languageCode" | "checkUrl" | "fetchTimestampFromApi" | "itemTypes" | "seResultsCount" | "itemsCount" | "refinementChips" | "createdAt" | "updatedAt", ExtArgs["result"]["serp"]>
  export type SerpInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
    result?: boolean | Serp$resultArgs<ExtArgs>
    _count?: boolean | SerpCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SerpIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }
  export type SerpIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | TaskDefaultArgs<ExtArgs>
    keyword?: boolean | KeywordDefaultArgs<ExtArgs>
  }

  export type $SerpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Serp"
    objects: {
      task: Prisma.$TaskPayload<ExtArgs>
      keyword: Prisma.$KeywordPayload<ExtArgs>
      result: Prisma.$ResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      taskId: string
      keywordId: string
      type: string | null
      seDomain: string | null
      locationCode: number | null
      languageCode: string | null
      checkUrl: string | null
      fetchTimestampFromApi: Date | null
      itemTypes: string[]
      seResultsCount: bigint | null
      itemsCount: number | null
      refinementChips: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["serp"]>
    composites: {}
  }

  type SerpGetPayload<S extends boolean | null | undefined | SerpDefaultArgs> = $Result.GetResult<Prisma.$SerpPayload, S>

  type SerpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SerpFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SerpCountAggregateInputType | true
    }

  export interface SerpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Serp'], meta: { name: 'Serp' } }
    /**
     * Find zero or one Serp that matches the filter.
     * @param {SerpFindUniqueArgs} args - Arguments to find a Serp
     * @example
     * // Get one Serp
     * const serp = await prisma.serp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SerpFindUniqueArgs>(args: SelectSubset<T, SerpFindUniqueArgs<ExtArgs>>): Prisma__SerpClient<$Result.GetResult<Prisma.$SerpPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Serp that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SerpFindUniqueOrThrowArgs} args - Arguments to find a Serp
     * @example
     * // Get one Serp
     * const serp = await prisma.serp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SerpFindUniqueOrThrowArgs>(args: SelectSubset<T, SerpFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SerpClient<$Result.GetResult<Prisma.$SerpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Serp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerpFindFirstArgs} args - Arguments to find a Serp
     * @example
     * // Get one Serp
     * const serp = await prisma.serp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SerpFindFirstArgs>(args?: SelectSubset<T, SerpFindFirstArgs<ExtArgs>>): Prisma__SerpClient<$Result.GetResult<Prisma.$SerpPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Serp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerpFindFirstOrThrowArgs} args - Arguments to find a Serp
     * @example
     * // Get one Serp
     * const serp = await prisma.serp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SerpFindFirstOrThrowArgs>(args?: SelectSubset<T, SerpFindFirstOrThrowArgs<ExtArgs>>): Prisma__SerpClient<$Result.GetResult<Prisma.$SerpPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Serps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerpFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Serps
     * const serps = await prisma.serp.findMany()
     * 
     * // Get first 10 Serps
     * const serps = await prisma.serp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serpWithIdOnly = await prisma.serp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SerpFindManyArgs>(args?: SelectSubset<T, SerpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SerpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Serp.
     * @param {SerpCreateArgs} args - Arguments to create a Serp.
     * @example
     * // Create one Serp
     * const Serp = await prisma.serp.create({
     *   data: {
     *     // ... data to create a Serp
     *   }
     * })
     * 
     */
    create<T extends SerpCreateArgs>(args: SelectSubset<T, SerpCreateArgs<ExtArgs>>): Prisma__SerpClient<$Result.GetResult<Prisma.$SerpPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Serps.
     * @param {SerpCreateManyArgs} args - Arguments to create many Serps.
     * @example
     * // Create many Serps
     * const serp = await prisma.serp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SerpCreateManyArgs>(args?: SelectSubset<T, SerpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Serps and returns the data saved in the database.
     * @param {SerpCreateManyAndReturnArgs} args - Arguments to create many Serps.
     * @example
     * // Create many Serps
     * const serp = await prisma.serp.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Serps and only return the `id`
     * const serpWithIdOnly = await prisma.serp.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SerpCreateManyAndReturnArgs>(args?: SelectSubset<T, SerpCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SerpPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Serp.
     * @param {SerpDeleteArgs} args - Arguments to delete one Serp.
     * @example
     * // Delete one Serp
     * const Serp = await prisma.serp.delete({
     *   where: {
     *     // ... filter to delete one Serp
     *   }
     * })
     * 
     */
    delete<T extends SerpDeleteArgs>(args: SelectSubset<T, SerpDeleteArgs<ExtArgs>>): Prisma__SerpClient<$Result.GetResult<Prisma.$SerpPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Serp.
     * @param {SerpUpdateArgs} args - Arguments to update one Serp.
     * @example
     * // Update one Serp
     * const serp = await prisma.serp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SerpUpdateArgs>(args: SelectSubset<T, SerpUpdateArgs<ExtArgs>>): Prisma__SerpClient<$Result.GetResult<Prisma.$SerpPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Serps.
     * @param {SerpDeleteManyArgs} args - Arguments to filter Serps to delete.
     * @example
     * // Delete a few Serps
     * const { count } = await prisma.serp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SerpDeleteManyArgs>(args?: SelectSubset<T, SerpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Serps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Serps
     * const serp = await prisma.serp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SerpUpdateManyArgs>(args: SelectSubset<T, SerpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Serps and returns the data updated in the database.
     * @param {SerpUpdateManyAndReturnArgs} args - Arguments to update many Serps.
     * @example
     * // Update many Serps
     * const serp = await prisma.serp.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Serps and only return the `id`
     * const serpWithIdOnly = await prisma.serp.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SerpUpdateManyAndReturnArgs>(args: SelectSubset<T, SerpUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SerpPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Serp.
     * @param {SerpUpsertArgs} args - Arguments to update or create a Serp.
     * @example
     * // Update or create a Serp
     * const serp = await prisma.serp.upsert({
     *   create: {
     *     // ... data to create a Serp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Serp we want to update
     *   }
     * })
     */
    upsert<T extends SerpUpsertArgs>(args: SelectSubset<T, SerpUpsertArgs<ExtArgs>>): Prisma__SerpClient<$Result.GetResult<Prisma.$SerpPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Serps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerpCountArgs} args - Arguments to filter Serps to count.
     * @example
     * // Count the number of Serps
     * const count = await prisma.serp.count({
     *   where: {
     *     // ... the filter for the Serps we want to count
     *   }
     * })
    **/
    count<T extends SerpCountArgs>(
      args?: Subset<T, SerpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SerpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Serp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SerpAggregateArgs>(args: Subset<T, SerpAggregateArgs>): Prisma.PrismaPromise<GetSerpAggregateType<T>>

    /**
     * Group by Serp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SerpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SerpGroupByArgs['orderBy'] }
        : { orderBy?: SerpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SerpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSerpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Serp model
   */
  readonly fields: SerpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Serp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SerpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    task<T extends TaskDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaskDefaultArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    keyword<T extends KeywordDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KeywordDefaultArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    result<T extends Serp$resultArgs<ExtArgs> = {}>(args?: Subset<T, Serp$resultArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Serp model
   */
  interface SerpFieldRefs {
    readonly id: FieldRef<"Serp", 'String'>
    readonly taskId: FieldRef<"Serp", 'String'>
    readonly keywordId: FieldRef<"Serp", 'String'>
    readonly type: FieldRef<"Serp", 'String'>
    readonly seDomain: FieldRef<"Serp", 'String'>
    readonly locationCode: FieldRef<"Serp", 'Int'>
    readonly languageCode: FieldRef<"Serp", 'String'>
    readonly checkUrl: FieldRef<"Serp", 'String'>
    readonly fetchTimestampFromApi: FieldRef<"Serp", 'DateTime'>
    readonly itemTypes: FieldRef<"Serp", 'String[]'>
    readonly seResultsCount: FieldRef<"Serp", 'BigInt'>
    readonly itemsCount: FieldRef<"Serp", 'Int'>
    readonly refinementChips: FieldRef<"Serp", 'Json'>
    readonly createdAt: FieldRef<"Serp", 'DateTime'>
    readonly updatedAt: FieldRef<"Serp", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Serp findUnique
   */
  export type SerpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serp
     */
    select?: SerpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Serp
     */
    omit?: SerpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerpInclude<ExtArgs> | null
    /**
     * Filter, which Serp to fetch.
     */
    where: SerpWhereUniqueInput
  }

  /**
   * Serp findUniqueOrThrow
   */
  export type SerpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serp
     */
    select?: SerpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Serp
     */
    omit?: SerpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerpInclude<ExtArgs> | null
    /**
     * Filter, which Serp to fetch.
     */
    where: SerpWhereUniqueInput
  }

  /**
   * Serp findFirst
   */
  export type SerpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serp
     */
    select?: SerpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Serp
     */
    omit?: SerpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerpInclude<ExtArgs> | null
    /**
     * Filter, which Serp to fetch.
     */
    where?: SerpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Serps to fetch.
     */
    orderBy?: SerpOrderByWithRelationInput | SerpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Serps.
     */
    cursor?: SerpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Serps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Serps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Serps.
     */
    distinct?: SerpScalarFieldEnum | SerpScalarFieldEnum[]
  }

  /**
   * Serp findFirstOrThrow
   */
  export type SerpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serp
     */
    select?: SerpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Serp
     */
    omit?: SerpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerpInclude<ExtArgs> | null
    /**
     * Filter, which Serp to fetch.
     */
    where?: SerpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Serps to fetch.
     */
    orderBy?: SerpOrderByWithRelationInput | SerpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Serps.
     */
    cursor?: SerpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Serps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Serps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Serps.
     */
    distinct?: SerpScalarFieldEnum | SerpScalarFieldEnum[]
  }

  /**
   * Serp findMany
   */
  export type SerpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serp
     */
    select?: SerpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Serp
     */
    omit?: SerpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerpInclude<ExtArgs> | null
    /**
     * Filter, which Serps to fetch.
     */
    where?: SerpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Serps to fetch.
     */
    orderBy?: SerpOrderByWithRelationInput | SerpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Serps.
     */
    cursor?: SerpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Serps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Serps.
     */
    skip?: number
    distinct?: SerpScalarFieldEnum | SerpScalarFieldEnum[]
  }

  /**
   * Serp create
   */
  export type SerpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serp
     */
    select?: SerpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Serp
     */
    omit?: SerpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerpInclude<ExtArgs> | null
    /**
     * The data needed to create a Serp.
     */
    data: XOR<SerpCreateInput, SerpUncheckedCreateInput>
  }

  /**
   * Serp createMany
   */
  export type SerpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Serps.
     */
    data: SerpCreateManyInput | SerpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Serp createManyAndReturn
   */
  export type SerpCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serp
     */
    select?: SerpSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Serp
     */
    omit?: SerpOmit<ExtArgs> | null
    /**
     * The data used to create many Serps.
     */
    data: SerpCreateManyInput | SerpCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerpIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Serp update
   */
  export type SerpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serp
     */
    select?: SerpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Serp
     */
    omit?: SerpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerpInclude<ExtArgs> | null
    /**
     * The data needed to update a Serp.
     */
    data: XOR<SerpUpdateInput, SerpUncheckedUpdateInput>
    /**
     * Choose, which Serp to update.
     */
    where: SerpWhereUniqueInput
  }

  /**
   * Serp updateMany
   */
  export type SerpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Serps.
     */
    data: XOR<SerpUpdateManyMutationInput, SerpUncheckedUpdateManyInput>
    /**
     * Filter which Serps to update
     */
    where?: SerpWhereInput
    /**
     * Limit how many Serps to update.
     */
    limit?: number
  }

  /**
   * Serp updateManyAndReturn
   */
  export type SerpUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serp
     */
    select?: SerpSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Serp
     */
    omit?: SerpOmit<ExtArgs> | null
    /**
     * The data used to update Serps.
     */
    data: XOR<SerpUpdateManyMutationInput, SerpUncheckedUpdateManyInput>
    /**
     * Filter which Serps to update
     */
    where?: SerpWhereInput
    /**
     * Limit how many Serps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerpIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Serp upsert
   */
  export type SerpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serp
     */
    select?: SerpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Serp
     */
    omit?: SerpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerpInclude<ExtArgs> | null
    /**
     * The filter to search for the Serp to update in case it exists.
     */
    where: SerpWhereUniqueInput
    /**
     * In case the Serp found by the `where` argument doesn't exist, create a new Serp with this data.
     */
    create: XOR<SerpCreateInput, SerpUncheckedCreateInput>
    /**
     * In case the Serp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SerpUpdateInput, SerpUncheckedUpdateInput>
  }

  /**
   * Serp delete
   */
  export type SerpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serp
     */
    select?: SerpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Serp
     */
    omit?: SerpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerpInclude<ExtArgs> | null
    /**
     * Filter which Serp to delete.
     */
    where: SerpWhereUniqueInput
  }

  /**
   * Serp deleteMany
   */
  export type SerpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Serps to delete
     */
    where?: SerpWhereInput
    /**
     * Limit how many Serps to delete.
     */
    limit?: number
  }

  /**
   * Serp.result
   */
  export type Serp$resultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Result
     */
    select?: ResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Result
     */
    omit?: ResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResultInclude<ExtArgs> | null
    where?: ResultWhereInput
    orderBy?: ResultOrderByWithRelationInput | ResultOrderByWithRelationInput[]
    cursor?: ResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResultScalarFieldEnum | ResultScalarFieldEnum[]
  }

  /**
   * Serp without action
   */
  export type SerpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serp
     */
    select?: SerpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Serp
     */
    omit?: SerpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerpInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    resultStatusCode: number | null
    resultCost: number | null
    resultCount: number | null
    depth: number | null
  }

  export type TaskSumAggregateOutputType = {
    resultStatusCode: number | null
    resultCost: number | null
    resultCount: number | null
    depth: number | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    seedKeywordId: string | null
    keyword: string | null
    statusFromApi: string | null
    receivedTimestamp: Date | null
    resultStatusCode: number | null
    resultStatusMessage: string | null
    resultTime: string | null
    resultCost: number | null
    resultCount: number | null
    location: string | null
    searchEngine: string | null
    languageCode: string | null
    device: string | null
    os: string | null
    depth: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    seedKeywordId: string | null
    keyword: string | null
    statusFromApi: string | null
    receivedTimestamp: Date | null
    resultStatusCode: number | null
    resultStatusMessage: string | null
    resultTime: string | null
    resultCost: number | null
    resultCount: number | null
    location: string | null
    searchEngine: string | null
    languageCode: string | null
    device: string | null
    os: string | null
    depth: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    jobId: number
    seedKeywordId: number
    keyword: number
    statusFromApi: number
    receivedTimestamp: number
    resultStatusCode: number
    resultStatusMessage: number
    resultTime: number
    resultCost: number
    resultCount: number
    path: number
    resultPath: number
    location: number
    searchEngine: number
    languageCode: number
    device: number
    os: number
    depth: number
    errorDetails: number
    resultData: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    resultStatusCode?: true
    resultCost?: true
    resultCount?: true
    depth?: true
  }

  export type TaskSumAggregateInputType = {
    resultStatusCode?: true
    resultCost?: true
    resultCount?: true
    depth?: true
  }

  export type TaskMinAggregateInputType = {
    id?: true
    jobId?: true
    seedKeywordId?: true
    keyword?: true
    statusFromApi?: true
    receivedTimestamp?: true
    resultStatusCode?: true
    resultStatusMessage?: true
    resultTime?: true
    resultCost?: true
    resultCount?: true
    location?: true
    searchEngine?: true
    languageCode?: true
    device?: true
    os?: true
    depth?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    jobId?: true
    seedKeywordId?: true
    keyword?: true
    statusFromApi?: true
    receivedTimestamp?: true
    resultStatusCode?: true
    resultStatusMessage?: true
    resultTime?: true
    resultCost?: true
    resultCount?: true
    location?: true
    searchEngine?: true
    languageCode?: true
    device?: true
    os?: true
    depth?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    jobId?: true
    seedKeywordId?: true
    keyword?: true
    statusFromApi?: true
    receivedTimestamp?: true
    resultStatusCode?: true
    resultStatusMessage?: true
    resultTime?: true
    resultCost?: true
    resultCount?: true
    path?: true
    resultPath?: true
    location?: true
    searchEngine?: true
    languageCode?: true
    device?: true
    os?: true
    depth?: true
    errorDetails?: true
    resultData?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    jobId: string
    seedKeywordId: string | null
    keyword: string
    statusFromApi: string | null
    receivedTimestamp: Date
    resultStatusCode: number | null
    resultStatusMessage: string | null
    resultTime: string | null
    resultCost: number | null
    resultCount: number | null
    path: string[]
    resultPath: JsonValue | null
    location: string | null
    searchEngine: string | null
    languageCode: string | null
    device: string | null
    os: string | null
    depth: number | null
    errorDetails: JsonValue | null
    resultData: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    seedKeywordId?: boolean
    keyword?: boolean
    statusFromApi?: boolean
    receivedTimestamp?: boolean
    resultStatusCode?: boolean
    resultStatusMessage?: boolean
    resultTime?: boolean
    resultCost?: boolean
    resultCount?: boolean
    path?: boolean
    resultPath?: boolean
    location?: boolean
    searchEngine?: boolean
    languageCode?: boolean
    device?: boolean
    os?: boolean
    depth?: boolean
    errorDetails?: boolean
    resultData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    seedKeyword?: boolean | Task$seedKeywordArgs<ExtArgs>
    serps?: boolean | Task$serpsArgs<ExtArgs>
    keywordRelations?: boolean | Task$keywordRelationsArgs<ExtArgs>
    relatedResults?: boolean | Task$relatedResultsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    seedKeywordId?: boolean
    keyword?: boolean
    statusFromApi?: boolean
    receivedTimestamp?: boolean
    resultStatusCode?: boolean
    resultStatusMessage?: boolean
    resultTime?: boolean
    resultCost?: boolean
    resultCount?: boolean
    path?: boolean
    resultPath?: boolean
    location?: boolean
    searchEngine?: boolean
    languageCode?: boolean
    device?: boolean
    os?: boolean
    depth?: boolean
    errorDetails?: boolean
    resultData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    seedKeyword?: boolean | Task$seedKeywordArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    seedKeywordId?: boolean
    keyword?: boolean
    statusFromApi?: boolean
    receivedTimestamp?: boolean
    resultStatusCode?: boolean
    resultStatusMessage?: boolean
    resultTime?: boolean
    resultCost?: boolean
    resultCount?: boolean
    path?: boolean
    resultPath?: boolean
    location?: boolean
    searchEngine?: boolean
    languageCode?: boolean
    device?: boolean
    os?: boolean
    depth?: boolean
    errorDetails?: boolean
    resultData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    seedKeyword?: boolean | Task$seedKeywordArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    jobId?: boolean
    seedKeywordId?: boolean
    keyword?: boolean
    statusFromApi?: boolean
    receivedTimestamp?: boolean
    resultStatusCode?: boolean
    resultStatusMessage?: boolean
    resultTime?: boolean
    resultCost?: boolean
    resultCount?: boolean
    path?: boolean
    resultPath?: boolean
    location?: boolean
    searchEngine?: boolean
    languageCode?: boolean
    device?: boolean
    os?: boolean
    depth?: boolean
    errorDetails?: boolean
    resultData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TaskOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "seedKeywordId" | "keyword" | "statusFromApi" | "receivedTimestamp" | "resultStatusCode" | "resultStatusMessage" | "resultTime" | "resultCost" | "resultCount" | "path" | "resultPath" | "location" | "searchEngine" | "languageCode" | "device" | "os" | "depth" | "errorDetails" | "resultData" | "createdAt" | "updatedAt", ExtArgs["result"]["task"]>
  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    seedKeyword?: boolean | Task$seedKeywordArgs<ExtArgs>
    serps?: boolean | Task$serpsArgs<ExtArgs>
    keywordRelations?: boolean | Task$keywordRelationsArgs<ExtArgs>
    relatedResults?: boolean | Task$relatedResultsArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    seedKeyword?: boolean | Task$seedKeywordArgs<ExtArgs>
  }
  export type TaskIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    seedKeyword?: boolean | Task$seedKeywordArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
      seedKeyword: Prisma.$KeywordPayload<ExtArgs> | null
      serps: Prisma.$SerpPayload<ExtArgs>[]
      keywordRelations: Prisma.$KeywordRelationPayload<ExtArgs>[]
      relatedResults: Prisma.$RelatedResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      seedKeywordId: string | null
      keyword: string
      statusFromApi: string | null
      receivedTimestamp: Date
      resultStatusCode: number | null
      resultStatusMessage: string | null
      resultTime: string | null
      resultCost: number | null
      resultCount: number | null
      path: string[]
      resultPath: Prisma.JsonValue | null
      location: string | null
      searchEngine: string | null
      languageCode: string | null
      device: string | null
      os: string | null
      depth: number | null
      errorDetails: Prisma.JsonValue | null
      resultData: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(args: SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    seedKeyword<T extends Task$seedKeywordArgs<ExtArgs> = {}>(args?: Subset<T, Task$seedKeywordArgs<ExtArgs>>): Prisma__KeywordClient<$Result.GetResult<Prisma.$KeywordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    serps<T extends Task$serpsArgs<ExtArgs> = {}>(args?: Subset<T, Task$serpsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SerpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    keywordRelations<T extends Task$keywordRelationsArgs<ExtArgs> = {}>(args?: Subset<T, Task$keywordRelationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeywordRelationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    relatedResults<T extends Task$relatedResultsArgs<ExtArgs> = {}>(args?: Subset<T, Task$relatedResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly jobId: FieldRef<"Task", 'String'>
    readonly seedKeywordId: FieldRef<"Task", 'String'>
    readonly keyword: FieldRef<"Task", 'String'>
    readonly statusFromApi: FieldRef<"Task", 'String'>
    readonly receivedTimestamp: FieldRef<"Task", 'DateTime'>
    readonly resultStatusCode: FieldRef<"Task", 'Int'>
    readonly resultStatusMessage: FieldRef<"Task", 'String'>
    readonly resultTime: FieldRef<"Task", 'String'>
    readonly resultCost: FieldRef<"Task", 'Float'>
    readonly resultCount: FieldRef<"Task", 'Int'>
    readonly path: FieldRef<"Task", 'String[]'>
    readonly resultPath: FieldRef<"Task", 'Json'>
    readonly location: FieldRef<"Task", 'String'>
    readonly searchEngine: FieldRef<"Task", 'String'>
    readonly languageCode: FieldRef<"Task", 'String'>
    readonly device: FieldRef<"Task", 'String'>
    readonly os: FieldRef<"Task", 'String'>
    readonly depth: FieldRef<"Task", 'Int'>
    readonly errorDetails: FieldRef<"Task", 'Json'>
    readonly resultData: FieldRef<"Task", 'Json'>
    readonly createdAt: FieldRef<"Task", 'DateTime'>
    readonly updatedAt: FieldRef<"Task", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
  }

  /**
   * Task updateManyAndReturn
   */
  export type TaskUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
    /**
     * Limit how many Tasks to delete.
     */
    limit?: number
  }

  /**
   * Task.seedKeyword
   */
  export type Task$seedKeywordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Keyword
     */
    select?: KeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Keyword
     */
    omit?: KeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordInclude<ExtArgs> | null
    where?: KeywordWhereInput
  }

  /**
   * Task.serps
   */
  export type Task$serpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serp
     */
    select?: SerpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Serp
     */
    omit?: SerpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SerpInclude<ExtArgs> | null
    where?: SerpWhereInput
    orderBy?: SerpOrderByWithRelationInput | SerpOrderByWithRelationInput[]
    cursor?: SerpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SerpScalarFieldEnum | SerpScalarFieldEnum[]
  }

  /**
   * Task.keywordRelations
   */
  export type Task$keywordRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeywordRelation
     */
    select?: KeywordRelationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KeywordRelation
     */
    omit?: KeywordRelationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeywordRelationInclude<ExtArgs> | null
    where?: KeywordRelationWhereInput
    orderBy?: KeywordRelationOrderByWithRelationInput | KeywordRelationOrderByWithRelationInput[]
    cursor?: KeywordRelationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KeywordRelationScalarFieldEnum | KeywordRelationScalarFieldEnum[]
  }

  /**
   * Task.relatedResults
   */
  export type Task$relatedResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedResult
     */
    select?: RelatedResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedResult
     */
    omit?: RelatedResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedResultInclude<ExtArgs> | null
    where?: RelatedResultWhereInput
    orderBy?: RelatedResultOrderByWithRelationInput | RelatedResultOrderByWithRelationInput[]
    cursor?: RelatedResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelatedResultScalarFieldEnum | RelatedResultScalarFieldEnum[]
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Task
     */
    omit?: TaskOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const JobScalarFieldEnum: {
    id: 'id',
    status: 'status',
    version: 'version',
    statusCode: 'statusCode',
    statusMessage: 'statusMessage',
    time: 'time',
    cost: 'cost',
    tasksCount: 'tasksCount',
    tasksError: 'tasksError',
    requestTimestamp: 'requestTimestamp',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const KeywordProfileScalarFieldEnum: {
    id: 'id',
    keywordId: 'keywordId',
    locationCode: 'locationCode',
    languageCode: 'languageCode',
    kiLastCheck: 'kiLastCheck',
    kiCompetition: 'kiCompetition',
    kiCompetitionLevel: 'kiCompetitionLevel',
    kiCpc: 'kiCpc',
    kiSearchVolume: 'kiSearchVolume',
    kiLowTopOfPageBid: 'kiLowTopOfPageBid',
    kiHighTopOfPageBid: 'kiHighTopOfPageBid',
    kiCategories: 'kiCategories',
    kiMonthlySearches: 'kiMonthlySearches',
    kpSynonymClusteringAlgorithm: 'kpSynonymClusteringAlgorithm',
    kpKeywordDifficulty: 'kpKeywordDifficulty',
    kpDetectedLanguage: 'kpDetectedLanguage',
    kpIsAnotherLanguage: 'kpIsAnotherLanguage',
    avgBacklinks: 'avgBacklinks',
    avgDofollow: 'avgDofollow',
    avgReferringPages: 'avgReferringPages',
    avgReferringDomains: 'avgReferringDomains',
    avgReferringMainDomains: 'avgReferringMainDomains',
    avgRank: 'avgRank',
    avgMainDomainRank: 'avgMainDomainRank',
    avgLastUpdatedTime: 'avgLastUpdatedTime',
    siMainIntent: 'siMainIntent',
    relatedKeywordIds: 'relatedKeywordIds',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KeywordProfileScalarFieldEnum = (typeof KeywordProfileScalarFieldEnum)[keyof typeof KeywordProfileScalarFieldEnum]


  export const KeywordRelationScalarFieldEnum: {
    id: 'id',
    seedKeywordId: 'seedKeywordId',
    relatedKeywordId: 'relatedKeywordId',
    taskId: 'taskId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KeywordRelationScalarFieldEnum = (typeof KeywordRelationScalarFieldEnum)[keyof typeof KeywordRelationScalarFieldEnum]


  export const KeywordScalarFieldEnum: {
    id: 'id',
    text: 'text',
    kiLastCheck: 'kiLastCheck',
    kiCompetition: 'kiCompetition',
    kiCompetitionLevel: 'kiCompetitionLevel',
    kiCpc: 'kiCpc',
    kiSearchVolume: 'kiSearchVolume',
    kiLowTopOfPageBid: 'kiLowTopOfPageBid',
    kiHighTopOfPageBid: 'kiHighTopOfPageBid',
    kiKeywordDifficulty: 'kiKeywordDifficulty',
    kiMainIntent: 'kiMainIntent',
    kiLastUpdatedKeywordInfo: 'kiLastUpdatedKeywordInfo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KeywordScalarFieldEnum = (typeof KeywordScalarFieldEnum)[keyof typeof KeywordScalarFieldEnum]


  export const RelatedResultScalarFieldEnum: {
    id: 'id',
    taskId: 'taskId',
    seedKeywordId: 'seedKeywordId',
    seType: 'seType',
    seedKeywords: 'seedKeywords',
    locationCode: 'locationCode',
    languageCode: 'languageCode',
    totalCount: 'totalCount',
    itemsCount: 'itemsCount',
    offset: 'offset',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RelatedResultScalarFieldEnum = (typeof RelatedResultScalarFieldEnum)[keyof typeof RelatedResultScalarFieldEnum]


  export const ResultScalarFieldEnum: {
    id: 'id',
    serpId: 'serpId',
    position: 'position',
    url: 'url',
    type: 'type',
    title: 'title',
    snippet: 'snippet',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ResultScalarFieldEnum = (typeof ResultScalarFieldEnum)[keyof typeof ResultScalarFieldEnum]


  export const SerpScalarFieldEnum: {
    id: 'id',
    taskId: 'taskId',
    keywordId: 'keywordId',
    type: 'type',
    seDomain: 'seDomain',
    locationCode: 'locationCode',
    languageCode: 'languageCode',
    checkUrl: 'checkUrl',
    fetchTimestampFromApi: 'fetchTimestampFromApi',
    itemTypes: 'itemTypes',
    seResultsCount: 'seResultsCount',
    itemsCount: 'itemsCount',
    refinementChips: 'refinementChips',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SerpScalarFieldEnum = (typeof SerpScalarFieldEnum)[keyof typeof SerpScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    seedKeywordId: 'seedKeywordId',
    keyword: 'keyword',
    statusFromApi: 'statusFromApi',
    receivedTimestamp: 'receivedTimestamp',
    resultStatusCode: 'resultStatusCode',
    resultStatusMessage: 'resultStatusMessage',
    resultTime: 'resultTime',
    resultCost: 'resultCost',
    resultCount: 'resultCount',
    path: 'path',
    resultPath: 'resultPath',
    location: 'location',
    searchEngine: 'searchEngine',
    languageCode: 'languageCode',
    device: 'device',
    os: 'os',
    depth: 'depth',
    errorDetails: 'errorDetails',
    resultData: 'resultData',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    
  /**
   * Deep Input Types
   */


  export type JobWhereInput = {
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    id?: StringFilter<"Job"> | string
    status?: StringNullableFilter<"Job"> | string | null
    version?: StringNullableFilter<"Job"> | string | null
    statusCode?: IntNullableFilter<"Job"> | number | null
    statusMessage?: StringNullableFilter<"Job"> | string | null
    time?: StringNullableFilter<"Job"> | string | null
    cost?: FloatNullableFilter<"Job"> | number | null
    tasksCount?: IntNullableFilter<"Job"> | number | null
    tasksError?: IntNullableFilter<"Job"> | number | null
    requestTimestamp?: DateTimeFilter<"Job"> | Date | string
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
    tasks?: TaskListRelationFilter
  }

  export type JobOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrderInput | SortOrder
    version?: SortOrderInput | SortOrder
    statusCode?: SortOrderInput | SortOrder
    statusMessage?: SortOrderInput | SortOrder
    time?: SortOrderInput | SortOrder
    cost?: SortOrderInput | SortOrder
    tasksCount?: SortOrderInput | SortOrder
    tasksError?: SortOrderInput | SortOrder
    requestTimestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tasks?: TaskOrderByRelationAggregateInput
  }

  export type JobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    status?: StringNullableFilter<"Job"> | string | null
    version?: StringNullableFilter<"Job"> | string | null
    statusCode?: IntNullableFilter<"Job"> | number | null
    statusMessage?: StringNullableFilter<"Job"> | string | null
    time?: StringNullableFilter<"Job"> | string | null
    cost?: FloatNullableFilter<"Job"> | number | null
    tasksCount?: IntNullableFilter<"Job"> | number | null
    tasksError?: IntNullableFilter<"Job"> | number | null
    requestTimestamp?: DateTimeFilter<"Job"> | Date | string
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
    tasks?: TaskListRelationFilter
  }, "id">

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrderInput | SortOrder
    version?: SortOrderInput | SortOrder
    statusCode?: SortOrderInput | SortOrder
    statusMessage?: SortOrderInput | SortOrder
    time?: SortOrderInput | SortOrder
    cost?: SortOrderInput | SortOrder
    tasksCount?: SortOrderInput | SortOrder
    tasksError?: SortOrderInput | SortOrder
    requestTimestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobCountOrderByAggregateInput
    _avg?: JobAvgOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
    _sum?: JobSumOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    OR?: JobScalarWhereWithAggregatesInput[]
    NOT?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Job"> | string
    status?: StringNullableWithAggregatesFilter<"Job"> | string | null
    version?: StringNullableWithAggregatesFilter<"Job"> | string | null
    statusCode?: IntNullableWithAggregatesFilter<"Job"> | number | null
    statusMessage?: StringNullableWithAggregatesFilter<"Job"> | string | null
    time?: StringNullableWithAggregatesFilter<"Job"> | string | null
    cost?: FloatNullableWithAggregatesFilter<"Job"> | number | null
    tasksCount?: IntNullableWithAggregatesFilter<"Job"> | number | null
    tasksError?: IntNullableWithAggregatesFilter<"Job"> | number | null
    requestTimestamp?: DateTimeWithAggregatesFilter<"Job"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
  }

  export type KeywordProfileWhereInput = {
    AND?: KeywordProfileWhereInput | KeywordProfileWhereInput[]
    OR?: KeywordProfileWhereInput[]
    NOT?: KeywordProfileWhereInput | KeywordProfileWhereInput[]
    id?: StringFilter<"KeywordProfile"> | string
    keywordId?: StringFilter<"KeywordProfile"> | string
    locationCode?: IntFilter<"KeywordProfile"> | number
    languageCode?: StringFilter<"KeywordProfile"> | string
    kiLastCheck?: DateTimeNullableFilter<"KeywordProfile"> | Date | string | null
    kiCompetition?: FloatNullableFilter<"KeywordProfile"> | number | null
    kiCompetitionLevel?: StringNullableFilter<"KeywordProfile"> | string | null
    kiCpc?: FloatNullableFilter<"KeywordProfile"> | number | null
    kiSearchVolume?: IntNullableFilter<"KeywordProfile"> | number | null
    kiLowTopOfPageBid?: FloatNullableFilter<"KeywordProfile"> | number | null
    kiHighTopOfPageBid?: FloatNullableFilter<"KeywordProfile"> | number | null
    kiCategories?: IntNullableListFilter<"KeywordProfile">
    kiMonthlySearches?: JsonNullableFilter<"KeywordProfile">
    kpSynonymClusteringAlgorithm?: StringNullableFilter<"KeywordProfile"> | string | null
    kpKeywordDifficulty?: IntNullableFilter<"KeywordProfile"> | number | null
    kpDetectedLanguage?: StringNullableFilter<"KeywordProfile"> | string | null
    kpIsAnotherLanguage?: BoolNullableFilter<"KeywordProfile"> | boolean | null
    avgBacklinks?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgDofollow?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgReferringPages?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgReferringDomains?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgReferringMainDomains?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgRank?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgMainDomainRank?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgLastUpdatedTime?: DateTimeNullableFilter<"KeywordProfile"> | Date | string | null
    siMainIntent?: StringNullableFilter<"KeywordProfile"> | string | null
    relatedKeywordIds?: StringNullableListFilter<"KeywordProfile">
    createdAt?: DateTimeFilter<"KeywordProfile"> | Date | string
    updatedAt?: DateTimeFilter<"KeywordProfile"> | Date | string
    keyword?: XOR<KeywordScalarRelationFilter, KeywordWhereInput>
  }

  export type KeywordProfileOrderByWithRelationInput = {
    id?: SortOrder
    keywordId?: SortOrder
    locationCode?: SortOrder
    languageCode?: SortOrder
    kiLastCheck?: SortOrderInput | SortOrder
    kiCompetition?: SortOrderInput | SortOrder
    kiCompetitionLevel?: SortOrderInput | SortOrder
    kiCpc?: SortOrderInput | SortOrder
    kiSearchVolume?: SortOrderInput | SortOrder
    kiLowTopOfPageBid?: SortOrderInput | SortOrder
    kiHighTopOfPageBid?: SortOrderInput | SortOrder
    kiCategories?: SortOrder
    kiMonthlySearches?: SortOrderInput | SortOrder
    kpSynonymClusteringAlgorithm?: SortOrderInput | SortOrder
    kpKeywordDifficulty?: SortOrderInput | SortOrder
    kpDetectedLanguage?: SortOrderInput | SortOrder
    kpIsAnotherLanguage?: SortOrderInput | SortOrder
    avgBacklinks?: SortOrderInput | SortOrder
    avgDofollow?: SortOrderInput | SortOrder
    avgReferringPages?: SortOrderInput | SortOrder
    avgReferringDomains?: SortOrderInput | SortOrder
    avgReferringMainDomains?: SortOrderInput | SortOrder
    avgRank?: SortOrderInput | SortOrder
    avgMainDomainRank?: SortOrderInput | SortOrder
    avgLastUpdatedTime?: SortOrderInput | SortOrder
    siMainIntent?: SortOrderInput | SortOrder
    relatedKeywordIds?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    keyword?: KeywordOrderByWithRelationInput
  }

  export type KeywordProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    keyword_location_language_unique?: KeywordProfileKeyword_location_language_uniqueCompoundUniqueInput
    AND?: KeywordProfileWhereInput | KeywordProfileWhereInput[]
    OR?: KeywordProfileWhereInput[]
    NOT?: KeywordProfileWhereInput | KeywordProfileWhereInput[]
    keywordId?: StringFilter<"KeywordProfile"> | string
    locationCode?: IntFilter<"KeywordProfile"> | number
    languageCode?: StringFilter<"KeywordProfile"> | string
    kiLastCheck?: DateTimeNullableFilter<"KeywordProfile"> | Date | string | null
    kiCompetition?: FloatNullableFilter<"KeywordProfile"> | number | null
    kiCompetitionLevel?: StringNullableFilter<"KeywordProfile"> | string | null
    kiCpc?: FloatNullableFilter<"KeywordProfile"> | number | null
    kiSearchVolume?: IntNullableFilter<"KeywordProfile"> | number | null
    kiLowTopOfPageBid?: FloatNullableFilter<"KeywordProfile"> | number | null
    kiHighTopOfPageBid?: FloatNullableFilter<"KeywordProfile"> | number | null
    kiCategories?: IntNullableListFilter<"KeywordProfile">
    kiMonthlySearches?: JsonNullableFilter<"KeywordProfile">
    kpSynonymClusteringAlgorithm?: StringNullableFilter<"KeywordProfile"> | string | null
    kpKeywordDifficulty?: IntNullableFilter<"KeywordProfile"> | number | null
    kpDetectedLanguage?: StringNullableFilter<"KeywordProfile"> | string | null
    kpIsAnotherLanguage?: BoolNullableFilter<"KeywordProfile"> | boolean | null
    avgBacklinks?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgDofollow?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgReferringPages?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgReferringDomains?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgReferringMainDomains?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgRank?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgMainDomainRank?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgLastUpdatedTime?: DateTimeNullableFilter<"KeywordProfile"> | Date | string | null
    siMainIntent?: StringNullableFilter<"KeywordProfile"> | string | null
    relatedKeywordIds?: StringNullableListFilter<"KeywordProfile">
    createdAt?: DateTimeFilter<"KeywordProfile"> | Date | string
    updatedAt?: DateTimeFilter<"KeywordProfile"> | Date | string
    keyword?: XOR<KeywordScalarRelationFilter, KeywordWhereInput>
  }, "id" | "keyword_location_language_unique">

  export type KeywordProfileOrderByWithAggregationInput = {
    id?: SortOrder
    keywordId?: SortOrder
    locationCode?: SortOrder
    languageCode?: SortOrder
    kiLastCheck?: SortOrderInput | SortOrder
    kiCompetition?: SortOrderInput | SortOrder
    kiCompetitionLevel?: SortOrderInput | SortOrder
    kiCpc?: SortOrderInput | SortOrder
    kiSearchVolume?: SortOrderInput | SortOrder
    kiLowTopOfPageBid?: SortOrderInput | SortOrder
    kiHighTopOfPageBid?: SortOrderInput | SortOrder
    kiCategories?: SortOrder
    kiMonthlySearches?: SortOrderInput | SortOrder
    kpSynonymClusteringAlgorithm?: SortOrderInput | SortOrder
    kpKeywordDifficulty?: SortOrderInput | SortOrder
    kpDetectedLanguage?: SortOrderInput | SortOrder
    kpIsAnotherLanguage?: SortOrderInput | SortOrder
    avgBacklinks?: SortOrderInput | SortOrder
    avgDofollow?: SortOrderInput | SortOrder
    avgReferringPages?: SortOrderInput | SortOrder
    avgReferringDomains?: SortOrderInput | SortOrder
    avgReferringMainDomains?: SortOrderInput | SortOrder
    avgRank?: SortOrderInput | SortOrder
    avgMainDomainRank?: SortOrderInput | SortOrder
    avgLastUpdatedTime?: SortOrderInput | SortOrder
    siMainIntent?: SortOrderInput | SortOrder
    relatedKeywordIds?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KeywordProfileCountOrderByAggregateInput
    _avg?: KeywordProfileAvgOrderByAggregateInput
    _max?: KeywordProfileMaxOrderByAggregateInput
    _min?: KeywordProfileMinOrderByAggregateInput
    _sum?: KeywordProfileSumOrderByAggregateInput
  }

  export type KeywordProfileScalarWhereWithAggregatesInput = {
    AND?: KeywordProfileScalarWhereWithAggregatesInput | KeywordProfileScalarWhereWithAggregatesInput[]
    OR?: KeywordProfileScalarWhereWithAggregatesInput[]
    NOT?: KeywordProfileScalarWhereWithAggregatesInput | KeywordProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"KeywordProfile"> | string
    keywordId?: StringWithAggregatesFilter<"KeywordProfile"> | string
    locationCode?: IntWithAggregatesFilter<"KeywordProfile"> | number
    languageCode?: StringWithAggregatesFilter<"KeywordProfile"> | string
    kiLastCheck?: DateTimeNullableWithAggregatesFilter<"KeywordProfile"> | Date | string | null
    kiCompetition?: FloatNullableWithAggregatesFilter<"KeywordProfile"> | number | null
    kiCompetitionLevel?: StringNullableWithAggregatesFilter<"KeywordProfile"> | string | null
    kiCpc?: FloatNullableWithAggregatesFilter<"KeywordProfile"> | number | null
    kiSearchVolume?: IntNullableWithAggregatesFilter<"KeywordProfile"> | number | null
    kiLowTopOfPageBid?: FloatNullableWithAggregatesFilter<"KeywordProfile"> | number | null
    kiHighTopOfPageBid?: FloatNullableWithAggregatesFilter<"KeywordProfile"> | number | null
    kiCategories?: IntNullableListFilter<"KeywordProfile">
    kiMonthlySearches?: JsonNullableWithAggregatesFilter<"KeywordProfile">
    kpSynonymClusteringAlgorithm?: StringNullableWithAggregatesFilter<"KeywordProfile"> | string | null
    kpKeywordDifficulty?: IntNullableWithAggregatesFilter<"KeywordProfile"> | number | null
    kpDetectedLanguage?: StringNullableWithAggregatesFilter<"KeywordProfile"> | string | null
    kpIsAnotherLanguage?: BoolNullableWithAggregatesFilter<"KeywordProfile"> | boolean | null
    avgBacklinks?: FloatNullableWithAggregatesFilter<"KeywordProfile"> | number | null
    avgDofollow?: FloatNullableWithAggregatesFilter<"KeywordProfile"> | number | null
    avgReferringPages?: FloatNullableWithAggregatesFilter<"KeywordProfile"> | number | null
    avgReferringDomains?: FloatNullableWithAggregatesFilter<"KeywordProfile"> | number | null
    avgReferringMainDomains?: FloatNullableWithAggregatesFilter<"KeywordProfile"> | number | null
    avgRank?: FloatNullableWithAggregatesFilter<"KeywordProfile"> | number | null
    avgMainDomainRank?: FloatNullableWithAggregatesFilter<"KeywordProfile"> | number | null
    avgLastUpdatedTime?: DateTimeNullableWithAggregatesFilter<"KeywordProfile"> | Date | string | null
    siMainIntent?: StringNullableWithAggregatesFilter<"KeywordProfile"> | string | null
    relatedKeywordIds?: StringNullableListFilter<"KeywordProfile">
    createdAt?: DateTimeWithAggregatesFilter<"KeywordProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KeywordProfile"> | Date | string
  }

  export type KeywordRelationWhereInput = {
    AND?: KeywordRelationWhereInput | KeywordRelationWhereInput[]
    OR?: KeywordRelationWhereInput[]
    NOT?: KeywordRelationWhereInput | KeywordRelationWhereInput[]
    id?: StringFilter<"KeywordRelation"> | string
    seedKeywordId?: StringFilter<"KeywordRelation"> | string
    relatedKeywordId?: StringFilter<"KeywordRelation"> | string
    taskId?: StringFilter<"KeywordRelation"> | string
    createdAt?: DateTimeFilter<"KeywordRelation"> | Date | string
    updatedAt?: DateTimeFilter<"KeywordRelation"> | Date | string
    seedKeyword?: XOR<KeywordScalarRelationFilter, KeywordWhereInput>
    relatedKeyword?: XOR<KeywordScalarRelationFilter, KeywordWhereInput>
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
  }

  export type KeywordRelationOrderByWithRelationInput = {
    id?: SortOrder
    seedKeywordId?: SortOrder
    relatedKeywordId?: SortOrder
    taskId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    seedKeyword?: KeywordOrderByWithRelationInput
    relatedKeyword?: KeywordOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
  }

  export type KeywordRelationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    seedKeywordId_relatedKeywordId?: KeywordRelationSeedKeywordIdRelatedKeywordIdCompoundUniqueInput
    AND?: KeywordRelationWhereInput | KeywordRelationWhereInput[]
    OR?: KeywordRelationWhereInput[]
    NOT?: KeywordRelationWhereInput | KeywordRelationWhereInput[]
    seedKeywordId?: StringFilter<"KeywordRelation"> | string
    relatedKeywordId?: StringFilter<"KeywordRelation"> | string
    taskId?: StringFilter<"KeywordRelation"> | string
    createdAt?: DateTimeFilter<"KeywordRelation"> | Date | string
    updatedAt?: DateTimeFilter<"KeywordRelation"> | Date | string
    seedKeyword?: XOR<KeywordScalarRelationFilter, KeywordWhereInput>
    relatedKeyword?: XOR<KeywordScalarRelationFilter, KeywordWhereInput>
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
  }, "id" | "seedKeywordId_relatedKeywordId">

  export type KeywordRelationOrderByWithAggregationInput = {
    id?: SortOrder
    seedKeywordId?: SortOrder
    relatedKeywordId?: SortOrder
    taskId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KeywordRelationCountOrderByAggregateInput
    _max?: KeywordRelationMaxOrderByAggregateInput
    _min?: KeywordRelationMinOrderByAggregateInput
  }

  export type KeywordRelationScalarWhereWithAggregatesInput = {
    AND?: KeywordRelationScalarWhereWithAggregatesInput | KeywordRelationScalarWhereWithAggregatesInput[]
    OR?: KeywordRelationScalarWhereWithAggregatesInput[]
    NOT?: KeywordRelationScalarWhereWithAggregatesInput | KeywordRelationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"KeywordRelation"> | string
    seedKeywordId?: StringWithAggregatesFilter<"KeywordRelation"> | string
    relatedKeywordId?: StringWithAggregatesFilter<"KeywordRelation"> | string
    taskId?: StringWithAggregatesFilter<"KeywordRelation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"KeywordRelation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KeywordRelation"> | Date | string
  }

  export type KeywordWhereInput = {
    AND?: KeywordWhereInput | KeywordWhereInput[]
    OR?: KeywordWhereInput[]
    NOT?: KeywordWhereInput | KeywordWhereInput[]
    id?: StringFilter<"Keyword"> | string
    text?: StringFilter<"Keyword"> | string
    kiLastCheck?: DateTimeNullableFilter<"Keyword"> | Date | string | null
    kiCompetition?: FloatNullableFilter<"Keyword"> | number | null
    kiCompetitionLevel?: StringNullableFilter<"Keyword"> | string | null
    kiCpc?: FloatNullableFilter<"Keyword"> | number | null
    kiSearchVolume?: IntNullableFilter<"Keyword"> | number | null
    kiLowTopOfPageBid?: FloatNullableFilter<"Keyword"> | number | null
    kiHighTopOfPageBid?: FloatNullableFilter<"Keyword"> | number | null
    kiKeywordDifficulty?: IntNullableFilter<"Keyword"> | number | null
    kiMainIntent?: StringNullableFilter<"Keyword"> | string | null
    kiLastUpdatedKeywordInfo?: DateTimeNullableFilter<"Keyword"> | Date | string | null
    createdAt?: DateTimeFilter<"Keyword"> | Date | string
    updatedAt?: DateTimeFilter<"Keyword"> | Date | string
    serps?: SerpListRelationFilter
    tasksAsSeed?: TaskListRelationFilter
    relationsAsSeed?: KeywordRelationListRelationFilter
    relationsAsRelated?: KeywordRelationListRelationFilter
    relatedResults?: RelatedResultListRelationFilter
    keywordProfiles?: KeywordProfileListRelationFilter
  }

  export type KeywordOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    kiLastCheck?: SortOrderInput | SortOrder
    kiCompetition?: SortOrderInput | SortOrder
    kiCompetitionLevel?: SortOrderInput | SortOrder
    kiCpc?: SortOrderInput | SortOrder
    kiSearchVolume?: SortOrderInput | SortOrder
    kiLowTopOfPageBid?: SortOrderInput | SortOrder
    kiHighTopOfPageBid?: SortOrderInput | SortOrder
    kiKeywordDifficulty?: SortOrderInput | SortOrder
    kiMainIntent?: SortOrderInput | SortOrder
    kiLastUpdatedKeywordInfo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serps?: SerpOrderByRelationAggregateInput
    tasksAsSeed?: TaskOrderByRelationAggregateInput
    relationsAsSeed?: KeywordRelationOrderByRelationAggregateInput
    relationsAsRelated?: KeywordRelationOrderByRelationAggregateInput
    relatedResults?: RelatedResultOrderByRelationAggregateInput
    keywordProfiles?: KeywordProfileOrderByRelationAggregateInput
  }

  export type KeywordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    text?: string
    AND?: KeywordWhereInput | KeywordWhereInput[]
    OR?: KeywordWhereInput[]
    NOT?: KeywordWhereInput | KeywordWhereInput[]
    kiLastCheck?: DateTimeNullableFilter<"Keyword"> | Date | string | null
    kiCompetition?: FloatNullableFilter<"Keyword"> | number | null
    kiCompetitionLevel?: StringNullableFilter<"Keyword"> | string | null
    kiCpc?: FloatNullableFilter<"Keyword"> | number | null
    kiSearchVolume?: IntNullableFilter<"Keyword"> | number | null
    kiLowTopOfPageBid?: FloatNullableFilter<"Keyword"> | number | null
    kiHighTopOfPageBid?: FloatNullableFilter<"Keyword"> | number | null
    kiKeywordDifficulty?: IntNullableFilter<"Keyword"> | number | null
    kiMainIntent?: StringNullableFilter<"Keyword"> | string | null
    kiLastUpdatedKeywordInfo?: DateTimeNullableFilter<"Keyword"> | Date | string | null
    createdAt?: DateTimeFilter<"Keyword"> | Date | string
    updatedAt?: DateTimeFilter<"Keyword"> | Date | string
    serps?: SerpListRelationFilter
    tasksAsSeed?: TaskListRelationFilter
    relationsAsSeed?: KeywordRelationListRelationFilter
    relationsAsRelated?: KeywordRelationListRelationFilter
    relatedResults?: RelatedResultListRelationFilter
    keywordProfiles?: KeywordProfileListRelationFilter
  }, "id" | "text">

  export type KeywordOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    kiLastCheck?: SortOrderInput | SortOrder
    kiCompetition?: SortOrderInput | SortOrder
    kiCompetitionLevel?: SortOrderInput | SortOrder
    kiCpc?: SortOrderInput | SortOrder
    kiSearchVolume?: SortOrderInput | SortOrder
    kiLowTopOfPageBid?: SortOrderInput | SortOrder
    kiHighTopOfPageBid?: SortOrderInput | SortOrder
    kiKeywordDifficulty?: SortOrderInput | SortOrder
    kiMainIntent?: SortOrderInput | SortOrder
    kiLastUpdatedKeywordInfo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KeywordCountOrderByAggregateInput
    _avg?: KeywordAvgOrderByAggregateInput
    _max?: KeywordMaxOrderByAggregateInput
    _min?: KeywordMinOrderByAggregateInput
    _sum?: KeywordSumOrderByAggregateInput
  }

  export type KeywordScalarWhereWithAggregatesInput = {
    AND?: KeywordScalarWhereWithAggregatesInput | KeywordScalarWhereWithAggregatesInput[]
    OR?: KeywordScalarWhereWithAggregatesInput[]
    NOT?: KeywordScalarWhereWithAggregatesInput | KeywordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Keyword"> | string
    text?: StringWithAggregatesFilter<"Keyword"> | string
    kiLastCheck?: DateTimeNullableWithAggregatesFilter<"Keyword"> | Date | string | null
    kiCompetition?: FloatNullableWithAggregatesFilter<"Keyword"> | number | null
    kiCompetitionLevel?: StringNullableWithAggregatesFilter<"Keyword"> | string | null
    kiCpc?: FloatNullableWithAggregatesFilter<"Keyword"> | number | null
    kiSearchVolume?: IntNullableWithAggregatesFilter<"Keyword"> | number | null
    kiLowTopOfPageBid?: FloatNullableWithAggregatesFilter<"Keyword"> | number | null
    kiHighTopOfPageBid?: FloatNullableWithAggregatesFilter<"Keyword"> | number | null
    kiKeywordDifficulty?: IntNullableWithAggregatesFilter<"Keyword"> | number | null
    kiMainIntent?: StringNullableWithAggregatesFilter<"Keyword"> | string | null
    kiLastUpdatedKeywordInfo?: DateTimeNullableWithAggregatesFilter<"Keyword"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Keyword"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Keyword"> | Date | string
  }

  export type RelatedResultWhereInput = {
    AND?: RelatedResultWhereInput | RelatedResultWhereInput[]
    OR?: RelatedResultWhereInput[]
    NOT?: RelatedResultWhereInput | RelatedResultWhereInput[]
    id?: StringFilter<"RelatedResult"> | string
    taskId?: StringFilter<"RelatedResult"> | string
    seedKeywordId?: StringFilter<"RelatedResult"> | string
    seType?: StringNullableFilter<"RelatedResult"> | string | null
    seedKeywords?: StringNullableListFilter<"RelatedResult">
    locationCode?: IntNullableFilter<"RelatedResult"> | number | null
    languageCode?: StringNullableFilter<"RelatedResult"> | string | null
    totalCount?: BigIntNullableFilter<"RelatedResult"> | bigint | number | null
    itemsCount?: IntNullableFilter<"RelatedResult"> | number | null
    offset?: IntNullableFilter<"RelatedResult"> | number | null
    createdAt?: DateTimeFilter<"RelatedResult"> | Date | string
    updatedAt?: DateTimeFilter<"RelatedResult"> | Date | string
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    seedKeyword?: XOR<KeywordScalarRelationFilter, KeywordWhereInput>
  }

  export type RelatedResultOrderByWithRelationInput = {
    id?: SortOrder
    taskId?: SortOrder
    seedKeywordId?: SortOrder
    seType?: SortOrderInput | SortOrder
    seedKeywords?: SortOrder
    locationCode?: SortOrderInput | SortOrder
    languageCode?: SortOrderInput | SortOrder
    totalCount?: SortOrderInput | SortOrder
    itemsCount?: SortOrderInput | SortOrder
    offset?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    task?: TaskOrderByWithRelationInput
    seedKeyword?: KeywordOrderByWithRelationInput
  }

  export type RelatedResultWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RelatedResultWhereInput | RelatedResultWhereInput[]
    OR?: RelatedResultWhereInput[]
    NOT?: RelatedResultWhereInput | RelatedResultWhereInput[]
    taskId?: StringFilter<"RelatedResult"> | string
    seedKeywordId?: StringFilter<"RelatedResult"> | string
    seType?: StringNullableFilter<"RelatedResult"> | string | null
    seedKeywords?: StringNullableListFilter<"RelatedResult">
    locationCode?: IntNullableFilter<"RelatedResult"> | number | null
    languageCode?: StringNullableFilter<"RelatedResult"> | string | null
    totalCount?: BigIntNullableFilter<"RelatedResult"> | bigint | number | null
    itemsCount?: IntNullableFilter<"RelatedResult"> | number | null
    offset?: IntNullableFilter<"RelatedResult"> | number | null
    createdAt?: DateTimeFilter<"RelatedResult"> | Date | string
    updatedAt?: DateTimeFilter<"RelatedResult"> | Date | string
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    seedKeyword?: XOR<KeywordScalarRelationFilter, KeywordWhereInput>
  }, "id">

  export type RelatedResultOrderByWithAggregationInput = {
    id?: SortOrder
    taskId?: SortOrder
    seedKeywordId?: SortOrder
    seType?: SortOrderInput | SortOrder
    seedKeywords?: SortOrder
    locationCode?: SortOrderInput | SortOrder
    languageCode?: SortOrderInput | SortOrder
    totalCount?: SortOrderInput | SortOrder
    itemsCount?: SortOrderInput | SortOrder
    offset?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RelatedResultCountOrderByAggregateInput
    _avg?: RelatedResultAvgOrderByAggregateInput
    _max?: RelatedResultMaxOrderByAggregateInput
    _min?: RelatedResultMinOrderByAggregateInput
    _sum?: RelatedResultSumOrderByAggregateInput
  }

  export type RelatedResultScalarWhereWithAggregatesInput = {
    AND?: RelatedResultScalarWhereWithAggregatesInput | RelatedResultScalarWhereWithAggregatesInput[]
    OR?: RelatedResultScalarWhereWithAggregatesInput[]
    NOT?: RelatedResultScalarWhereWithAggregatesInput | RelatedResultScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RelatedResult"> | string
    taskId?: StringWithAggregatesFilter<"RelatedResult"> | string
    seedKeywordId?: StringWithAggregatesFilter<"RelatedResult"> | string
    seType?: StringNullableWithAggregatesFilter<"RelatedResult"> | string | null
    seedKeywords?: StringNullableListFilter<"RelatedResult">
    locationCode?: IntNullableWithAggregatesFilter<"RelatedResult"> | number | null
    languageCode?: StringNullableWithAggregatesFilter<"RelatedResult"> | string | null
    totalCount?: BigIntNullableWithAggregatesFilter<"RelatedResult"> | bigint | number | null
    itemsCount?: IntNullableWithAggregatesFilter<"RelatedResult"> | number | null
    offset?: IntNullableWithAggregatesFilter<"RelatedResult"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"RelatedResult"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RelatedResult"> | Date | string
  }

  export type ResultWhereInput = {
    AND?: ResultWhereInput | ResultWhereInput[]
    OR?: ResultWhereInput[]
    NOT?: ResultWhereInput | ResultWhereInput[]
    id?: StringFilter<"Result"> | string
    serpId?: StringFilter<"Result"> | string
    position?: IntFilter<"Result"> | number
    url?: StringFilter<"Result"> | string
    type?: StringNullableFilter<"Result"> | string | null
    title?: StringNullableFilter<"Result"> | string | null
    snippet?: StringNullableFilter<"Result"> | string | null
    createdAt?: DateTimeFilter<"Result"> | Date | string
    updatedAt?: DateTimeFilter<"Result"> | Date | string
    serp?: XOR<SerpScalarRelationFilter, SerpWhereInput>
  }

  export type ResultOrderByWithRelationInput = {
    id?: SortOrder
    serpId?: SortOrder
    position?: SortOrder
    url?: SortOrder
    type?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    snippet?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    serp?: SerpOrderByWithRelationInput
  }

  export type ResultWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ResultWhereInput | ResultWhereInput[]
    OR?: ResultWhereInput[]
    NOT?: ResultWhereInput | ResultWhereInput[]
    serpId?: StringFilter<"Result"> | string
    position?: IntFilter<"Result"> | number
    url?: StringFilter<"Result"> | string
    type?: StringNullableFilter<"Result"> | string | null
    title?: StringNullableFilter<"Result"> | string | null
    snippet?: StringNullableFilter<"Result"> | string | null
    createdAt?: DateTimeFilter<"Result"> | Date | string
    updatedAt?: DateTimeFilter<"Result"> | Date | string
    serp?: XOR<SerpScalarRelationFilter, SerpWhereInput>
  }, "id">

  export type ResultOrderByWithAggregationInput = {
    id?: SortOrder
    serpId?: SortOrder
    position?: SortOrder
    url?: SortOrder
    type?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    snippet?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ResultCountOrderByAggregateInput
    _avg?: ResultAvgOrderByAggregateInput
    _max?: ResultMaxOrderByAggregateInput
    _min?: ResultMinOrderByAggregateInput
    _sum?: ResultSumOrderByAggregateInput
  }

  export type ResultScalarWhereWithAggregatesInput = {
    AND?: ResultScalarWhereWithAggregatesInput | ResultScalarWhereWithAggregatesInput[]
    OR?: ResultScalarWhereWithAggregatesInput[]
    NOT?: ResultScalarWhereWithAggregatesInput | ResultScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Result"> | string
    serpId?: StringWithAggregatesFilter<"Result"> | string
    position?: IntWithAggregatesFilter<"Result"> | number
    url?: StringWithAggregatesFilter<"Result"> | string
    type?: StringNullableWithAggregatesFilter<"Result"> | string | null
    title?: StringNullableWithAggregatesFilter<"Result"> | string | null
    snippet?: StringNullableWithAggregatesFilter<"Result"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Result"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Result"> | Date | string
  }

  export type SerpWhereInput = {
    AND?: SerpWhereInput | SerpWhereInput[]
    OR?: SerpWhereInput[]
    NOT?: SerpWhereInput | SerpWhereInput[]
    id?: StringFilter<"Serp"> | string
    taskId?: StringFilter<"Serp"> | string
    keywordId?: StringFilter<"Serp"> | string
    type?: StringNullableFilter<"Serp"> | string | null
    seDomain?: StringNullableFilter<"Serp"> | string | null
    locationCode?: IntNullableFilter<"Serp"> | number | null
    languageCode?: StringNullableFilter<"Serp"> | string | null
    checkUrl?: StringNullableFilter<"Serp"> | string | null
    fetchTimestampFromApi?: DateTimeNullableFilter<"Serp"> | Date | string | null
    itemTypes?: StringNullableListFilter<"Serp">
    seResultsCount?: BigIntNullableFilter<"Serp"> | bigint | number | null
    itemsCount?: IntNullableFilter<"Serp"> | number | null
    refinementChips?: JsonNullableFilter<"Serp">
    createdAt?: DateTimeFilter<"Serp"> | Date | string
    updatedAt?: DateTimeFilter<"Serp"> | Date | string
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    keyword?: XOR<KeywordScalarRelationFilter, KeywordWhereInput>
    result?: ResultListRelationFilter
  }

  export type SerpOrderByWithRelationInput = {
    id?: SortOrder
    taskId?: SortOrder
    keywordId?: SortOrder
    type?: SortOrderInput | SortOrder
    seDomain?: SortOrderInput | SortOrder
    locationCode?: SortOrderInput | SortOrder
    languageCode?: SortOrderInput | SortOrder
    checkUrl?: SortOrderInput | SortOrder
    fetchTimestampFromApi?: SortOrderInput | SortOrder
    itemTypes?: SortOrder
    seResultsCount?: SortOrderInput | SortOrder
    itemsCount?: SortOrderInput | SortOrder
    refinementChips?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    task?: TaskOrderByWithRelationInput
    keyword?: KeywordOrderByWithRelationInput
    result?: ResultOrderByRelationAggregateInput
  }

  export type SerpWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SerpWhereInput | SerpWhereInput[]
    OR?: SerpWhereInput[]
    NOT?: SerpWhereInput | SerpWhereInput[]
    taskId?: StringFilter<"Serp"> | string
    keywordId?: StringFilter<"Serp"> | string
    type?: StringNullableFilter<"Serp"> | string | null
    seDomain?: StringNullableFilter<"Serp"> | string | null
    locationCode?: IntNullableFilter<"Serp"> | number | null
    languageCode?: StringNullableFilter<"Serp"> | string | null
    checkUrl?: StringNullableFilter<"Serp"> | string | null
    fetchTimestampFromApi?: DateTimeNullableFilter<"Serp"> | Date | string | null
    itemTypes?: StringNullableListFilter<"Serp">
    seResultsCount?: BigIntNullableFilter<"Serp"> | bigint | number | null
    itemsCount?: IntNullableFilter<"Serp"> | number | null
    refinementChips?: JsonNullableFilter<"Serp">
    createdAt?: DateTimeFilter<"Serp"> | Date | string
    updatedAt?: DateTimeFilter<"Serp"> | Date | string
    task?: XOR<TaskScalarRelationFilter, TaskWhereInput>
    keyword?: XOR<KeywordScalarRelationFilter, KeywordWhereInput>
    result?: ResultListRelationFilter
  }, "id">

  export type SerpOrderByWithAggregationInput = {
    id?: SortOrder
    taskId?: SortOrder
    keywordId?: SortOrder
    type?: SortOrderInput | SortOrder
    seDomain?: SortOrderInput | SortOrder
    locationCode?: SortOrderInput | SortOrder
    languageCode?: SortOrderInput | SortOrder
    checkUrl?: SortOrderInput | SortOrder
    fetchTimestampFromApi?: SortOrderInput | SortOrder
    itemTypes?: SortOrder
    seResultsCount?: SortOrderInput | SortOrder
    itemsCount?: SortOrderInput | SortOrder
    refinementChips?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SerpCountOrderByAggregateInput
    _avg?: SerpAvgOrderByAggregateInput
    _max?: SerpMaxOrderByAggregateInput
    _min?: SerpMinOrderByAggregateInput
    _sum?: SerpSumOrderByAggregateInput
  }

  export type SerpScalarWhereWithAggregatesInput = {
    AND?: SerpScalarWhereWithAggregatesInput | SerpScalarWhereWithAggregatesInput[]
    OR?: SerpScalarWhereWithAggregatesInput[]
    NOT?: SerpScalarWhereWithAggregatesInput | SerpScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Serp"> | string
    taskId?: StringWithAggregatesFilter<"Serp"> | string
    keywordId?: StringWithAggregatesFilter<"Serp"> | string
    type?: StringNullableWithAggregatesFilter<"Serp"> | string | null
    seDomain?: StringNullableWithAggregatesFilter<"Serp"> | string | null
    locationCode?: IntNullableWithAggregatesFilter<"Serp"> | number | null
    languageCode?: StringNullableWithAggregatesFilter<"Serp"> | string | null
    checkUrl?: StringNullableWithAggregatesFilter<"Serp"> | string | null
    fetchTimestampFromApi?: DateTimeNullableWithAggregatesFilter<"Serp"> | Date | string | null
    itemTypes?: StringNullableListFilter<"Serp">
    seResultsCount?: BigIntNullableWithAggregatesFilter<"Serp"> | bigint | number | null
    itemsCount?: IntNullableWithAggregatesFilter<"Serp"> | number | null
    refinementChips?: JsonNullableWithAggregatesFilter<"Serp">
    createdAt?: DateTimeWithAggregatesFilter<"Serp"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Serp"> | Date | string
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: StringFilter<"Task"> | string
    jobId?: StringFilter<"Task"> | string
    seedKeywordId?: StringNullableFilter<"Task"> | string | null
    keyword?: StringFilter<"Task"> | string
    statusFromApi?: StringNullableFilter<"Task"> | string | null
    receivedTimestamp?: DateTimeFilter<"Task"> | Date | string
    resultStatusCode?: IntNullableFilter<"Task"> | number | null
    resultStatusMessage?: StringNullableFilter<"Task"> | string | null
    resultTime?: StringNullableFilter<"Task"> | string | null
    resultCost?: FloatNullableFilter<"Task"> | number | null
    resultCount?: IntNullableFilter<"Task"> | number | null
    path?: StringNullableListFilter<"Task">
    resultPath?: JsonNullableFilter<"Task">
    location?: StringNullableFilter<"Task"> | string | null
    searchEngine?: StringNullableFilter<"Task"> | string | null
    languageCode?: StringNullableFilter<"Task"> | string | null
    device?: StringNullableFilter<"Task"> | string | null
    os?: StringNullableFilter<"Task"> | string | null
    depth?: IntNullableFilter<"Task"> | number | null
    errorDetails?: JsonNullableFilter<"Task">
    resultData?: JsonNullableFilter<"Task">
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    seedKeyword?: XOR<KeywordNullableScalarRelationFilter, KeywordWhereInput> | null
    serps?: SerpListRelationFilter
    keywordRelations?: KeywordRelationListRelationFilter
    relatedResults?: RelatedResultListRelationFilter
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    seedKeywordId?: SortOrderInput | SortOrder
    keyword?: SortOrder
    statusFromApi?: SortOrderInput | SortOrder
    receivedTimestamp?: SortOrder
    resultStatusCode?: SortOrderInput | SortOrder
    resultStatusMessage?: SortOrderInput | SortOrder
    resultTime?: SortOrderInput | SortOrder
    resultCost?: SortOrderInput | SortOrder
    resultCount?: SortOrderInput | SortOrder
    path?: SortOrder
    resultPath?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    searchEngine?: SortOrderInput | SortOrder
    languageCode?: SortOrderInput | SortOrder
    device?: SortOrderInput | SortOrder
    os?: SortOrderInput | SortOrder
    depth?: SortOrderInput | SortOrder
    errorDetails?: SortOrderInput | SortOrder
    resultData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    job?: JobOrderByWithRelationInput
    seedKeyword?: KeywordOrderByWithRelationInput
    serps?: SerpOrderByRelationAggregateInput
    keywordRelations?: KeywordRelationOrderByRelationAggregateInput
    relatedResults?: RelatedResultOrderByRelationAggregateInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    jobId?: StringFilter<"Task"> | string
    seedKeywordId?: StringNullableFilter<"Task"> | string | null
    keyword?: StringFilter<"Task"> | string
    statusFromApi?: StringNullableFilter<"Task"> | string | null
    receivedTimestamp?: DateTimeFilter<"Task"> | Date | string
    resultStatusCode?: IntNullableFilter<"Task"> | number | null
    resultStatusMessage?: StringNullableFilter<"Task"> | string | null
    resultTime?: StringNullableFilter<"Task"> | string | null
    resultCost?: FloatNullableFilter<"Task"> | number | null
    resultCount?: IntNullableFilter<"Task"> | number | null
    path?: StringNullableListFilter<"Task">
    resultPath?: JsonNullableFilter<"Task">
    location?: StringNullableFilter<"Task"> | string | null
    searchEngine?: StringNullableFilter<"Task"> | string | null
    languageCode?: StringNullableFilter<"Task"> | string | null
    device?: StringNullableFilter<"Task"> | string | null
    os?: StringNullableFilter<"Task"> | string | null
    depth?: IntNullableFilter<"Task"> | number | null
    errorDetails?: JsonNullableFilter<"Task">
    resultData?: JsonNullableFilter<"Task">
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    seedKeyword?: XOR<KeywordNullableScalarRelationFilter, KeywordWhereInput> | null
    serps?: SerpListRelationFilter
    keywordRelations?: KeywordRelationListRelationFilter
    relatedResults?: RelatedResultListRelationFilter
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    seedKeywordId?: SortOrderInput | SortOrder
    keyword?: SortOrder
    statusFromApi?: SortOrderInput | SortOrder
    receivedTimestamp?: SortOrder
    resultStatusCode?: SortOrderInput | SortOrder
    resultStatusMessage?: SortOrderInput | SortOrder
    resultTime?: SortOrderInput | SortOrder
    resultCost?: SortOrderInput | SortOrder
    resultCount?: SortOrderInput | SortOrder
    path?: SortOrder
    resultPath?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    searchEngine?: SortOrderInput | SortOrder
    languageCode?: SortOrderInput | SortOrder
    device?: SortOrderInput | SortOrder
    os?: SortOrderInput | SortOrder
    depth?: SortOrderInput | SortOrder
    errorDetails?: SortOrderInput | SortOrder
    resultData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _avg?: TaskAvgOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
    _sum?: TaskSumOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Task"> | string
    jobId?: StringWithAggregatesFilter<"Task"> | string
    seedKeywordId?: StringNullableWithAggregatesFilter<"Task"> | string | null
    keyword?: StringWithAggregatesFilter<"Task"> | string
    statusFromApi?: StringNullableWithAggregatesFilter<"Task"> | string | null
    receivedTimestamp?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    resultStatusCode?: IntNullableWithAggregatesFilter<"Task"> | number | null
    resultStatusMessage?: StringNullableWithAggregatesFilter<"Task"> | string | null
    resultTime?: StringNullableWithAggregatesFilter<"Task"> | string | null
    resultCost?: FloatNullableWithAggregatesFilter<"Task"> | number | null
    resultCount?: IntNullableWithAggregatesFilter<"Task"> | number | null
    path?: StringNullableListFilter<"Task">
    resultPath?: JsonNullableWithAggregatesFilter<"Task">
    location?: StringNullableWithAggregatesFilter<"Task"> | string | null
    searchEngine?: StringNullableWithAggregatesFilter<"Task"> | string | null
    languageCode?: StringNullableWithAggregatesFilter<"Task"> | string | null
    device?: StringNullableWithAggregatesFilter<"Task"> | string | null
    os?: StringNullableWithAggregatesFilter<"Task"> | string | null
    depth?: IntNullableWithAggregatesFilter<"Task"> | number | null
    errorDetails?: JsonNullableWithAggregatesFilter<"Task">
    resultData?: JsonNullableWithAggregatesFilter<"Task">
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
  }

  export type JobCreateInput = {
    id?: string
    status?: string | null
    version?: string | null
    statusCode?: number | null
    statusMessage?: string | null
    time?: string | null
    cost?: number | null
    tasksCount?: number | null
    tasksError?: number | null
    requestTimestamp: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateInput = {
    id?: string
    status?: string | null
    version?: string | null
    statusCode?: number | null
    statusMessage?: string | null
    time?: string | null
    cost?: number | null
    tasksCount?: number | null
    tasksError?: number | null
    requestTimestamp: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    tasks?: TaskUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    statusCode?: NullableIntFieldUpdateOperationsInput | number | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    tasksCount?: NullableIntFieldUpdateOperationsInput | number | null
    tasksError?: NullableIntFieldUpdateOperationsInput | number | null
    requestTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    statusCode?: NullableIntFieldUpdateOperationsInput | number | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    tasksCount?: NullableIntFieldUpdateOperationsInput | number | null
    tasksError?: NullableIntFieldUpdateOperationsInput | number | null
    requestTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasks?: TaskUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobCreateManyInput = {
    id?: string
    status?: string | null
    version?: string | null
    statusCode?: number | null
    statusMessage?: string | null
    time?: string | null
    cost?: number | null
    tasksCount?: number | null
    tasksError?: number | null
    requestTimestamp: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    statusCode?: NullableIntFieldUpdateOperationsInput | number | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    tasksCount?: NullableIntFieldUpdateOperationsInput | number | null
    tasksError?: NullableIntFieldUpdateOperationsInput | number | null
    requestTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    statusCode?: NullableIntFieldUpdateOperationsInput | number | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    tasksCount?: NullableIntFieldUpdateOperationsInput | number | null
    tasksError?: NullableIntFieldUpdateOperationsInput | number | null
    requestTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordProfileCreateInput = {
    id?: string
    locationCode: number
    languageCode: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiCategories?: KeywordProfileCreatekiCategoriesInput | number[]
    kiMonthlySearches?: NullableJsonNullValueInput | InputJsonValue
    kpSynonymClusteringAlgorithm?: string | null
    kpKeywordDifficulty?: number | null
    kpDetectedLanguage?: string | null
    kpIsAnotherLanguage?: boolean | null
    avgBacklinks?: number | null
    avgDofollow?: number | null
    avgReferringPages?: number | null
    avgReferringDomains?: number | null
    avgReferringMainDomains?: number | null
    avgRank?: number | null
    avgMainDomainRank?: number | null
    avgLastUpdatedTime?: Date | string | null
    siMainIntent?: string | null
    relatedKeywordIds?: KeywordProfileCreaterelatedKeywordIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    keyword: KeywordCreateNestedOneWithoutKeywordProfilesInput
  }

  export type KeywordProfileUncheckedCreateInput = {
    id?: string
    keywordId: string
    locationCode: number
    languageCode: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiCategories?: KeywordProfileCreatekiCategoriesInput | number[]
    kiMonthlySearches?: NullableJsonNullValueInput | InputJsonValue
    kpSynonymClusteringAlgorithm?: string | null
    kpKeywordDifficulty?: number | null
    kpDetectedLanguage?: string | null
    kpIsAnotherLanguage?: boolean | null
    avgBacklinks?: number | null
    avgDofollow?: number | null
    avgReferringPages?: number | null
    avgReferringDomains?: number | null
    avgReferringMainDomains?: number | null
    avgRank?: number | null
    avgMainDomainRank?: number | null
    avgLastUpdatedTime?: Date | string | null
    siMainIntent?: string | null
    relatedKeywordIds?: KeywordProfileCreaterelatedKeywordIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeywordProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationCode?: IntFieldUpdateOperationsInput | number
    languageCode?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCategories?: KeywordProfileUpdatekiCategoriesInput | number[]
    kiMonthlySearches?: NullableJsonNullValueInput | InputJsonValue
    kpSynonymClusteringAlgorithm?: NullableStringFieldUpdateOperationsInput | string | null
    kpKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kpDetectedLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    kpIsAnotherLanguage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    avgBacklinks?: NullableFloatFieldUpdateOperationsInput | number | null
    avgDofollow?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringPages?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringDomains?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringMainDomains?: NullableFloatFieldUpdateOperationsInput | number | null
    avgRank?: NullableFloatFieldUpdateOperationsInput | number | null
    avgMainDomainRank?: NullableFloatFieldUpdateOperationsInput | number | null
    avgLastUpdatedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    siMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    relatedKeywordIds?: KeywordProfileUpdaterelatedKeywordIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keyword?: KeywordUpdateOneRequiredWithoutKeywordProfilesNestedInput
  }

  export type KeywordProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    keywordId?: StringFieldUpdateOperationsInput | string
    locationCode?: IntFieldUpdateOperationsInput | number
    languageCode?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCategories?: KeywordProfileUpdatekiCategoriesInput | number[]
    kiMonthlySearches?: NullableJsonNullValueInput | InputJsonValue
    kpSynonymClusteringAlgorithm?: NullableStringFieldUpdateOperationsInput | string | null
    kpKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kpDetectedLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    kpIsAnotherLanguage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    avgBacklinks?: NullableFloatFieldUpdateOperationsInput | number | null
    avgDofollow?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringPages?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringDomains?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringMainDomains?: NullableFloatFieldUpdateOperationsInput | number | null
    avgRank?: NullableFloatFieldUpdateOperationsInput | number | null
    avgMainDomainRank?: NullableFloatFieldUpdateOperationsInput | number | null
    avgLastUpdatedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    siMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    relatedKeywordIds?: KeywordProfileUpdaterelatedKeywordIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordProfileCreateManyInput = {
    id?: string
    keywordId: string
    locationCode: number
    languageCode: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiCategories?: KeywordProfileCreatekiCategoriesInput | number[]
    kiMonthlySearches?: NullableJsonNullValueInput | InputJsonValue
    kpSynonymClusteringAlgorithm?: string | null
    kpKeywordDifficulty?: number | null
    kpDetectedLanguage?: string | null
    kpIsAnotherLanguage?: boolean | null
    avgBacklinks?: number | null
    avgDofollow?: number | null
    avgReferringPages?: number | null
    avgReferringDomains?: number | null
    avgReferringMainDomains?: number | null
    avgRank?: number | null
    avgMainDomainRank?: number | null
    avgLastUpdatedTime?: Date | string | null
    siMainIntent?: string | null
    relatedKeywordIds?: KeywordProfileCreaterelatedKeywordIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeywordProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationCode?: IntFieldUpdateOperationsInput | number
    languageCode?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCategories?: KeywordProfileUpdatekiCategoriesInput | number[]
    kiMonthlySearches?: NullableJsonNullValueInput | InputJsonValue
    kpSynonymClusteringAlgorithm?: NullableStringFieldUpdateOperationsInput | string | null
    kpKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kpDetectedLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    kpIsAnotherLanguage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    avgBacklinks?: NullableFloatFieldUpdateOperationsInput | number | null
    avgDofollow?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringPages?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringDomains?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringMainDomains?: NullableFloatFieldUpdateOperationsInput | number | null
    avgRank?: NullableFloatFieldUpdateOperationsInput | number | null
    avgMainDomainRank?: NullableFloatFieldUpdateOperationsInput | number | null
    avgLastUpdatedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    siMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    relatedKeywordIds?: KeywordProfileUpdaterelatedKeywordIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    keywordId?: StringFieldUpdateOperationsInput | string
    locationCode?: IntFieldUpdateOperationsInput | number
    languageCode?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCategories?: KeywordProfileUpdatekiCategoriesInput | number[]
    kiMonthlySearches?: NullableJsonNullValueInput | InputJsonValue
    kpSynonymClusteringAlgorithm?: NullableStringFieldUpdateOperationsInput | string | null
    kpKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kpDetectedLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    kpIsAnotherLanguage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    avgBacklinks?: NullableFloatFieldUpdateOperationsInput | number | null
    avgDofollow?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringPages?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringDomains?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringMainDomains?: NullableFloatFieldUpdateOperationsInput | number | null
    avgRank?: NullableFloatFieldUpdateOperationsInput | number | null
    avgMainDomainRank?: NullableFloatFieldUpdateOperationsInput | number | null
    avgLastUpdatedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    siMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    relatedKeywordIds?: KeywordProfileUpdaterelatedKeywordIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordRelationCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    seedKeyword: KeywordCreateNestedOneWithoutRelationsAsSeedInput
    relatedKeyword: KeywordCreateNestedOneWithoutRelationsAsRelatedInput
    task: TaskCreateNestedOneWithoutKeywordRelationsInput
  }

  export type KeywordRelationUncheckedCreateInput = {
    id?: string
    seedKeywordId: string
    relatedKeywordId: string
    taskId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeywordRelationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seedKeyword?: KeywordUpdateOneRequiredWithoutRelationsAsSeedNestedInput
    relatedKeyword?: KeywordUpdateOneRequiredWithoutRelationsAsRelatedNestedInput
    task?: TaskUpdateOneRequiredWithoutKeywordRelationsNestedInput
  }

  export type KeywordRelationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: StringFieldUpdateOperationsInput | string
    relatedKeywordId?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordRelationCreateManyInput = {
    id?: string
    seedKeywordId: string
    relatedKeywordId: string
    taskId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeywordRelationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordRelationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: StringFieldUpdateOperationsInput | string
    relatedKeywordId?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordCreateInput = {
    id?: string
    text: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiKeywordDifficulty?: number | null
    kiMainIntent?: string | null
    kiLastUpdatedKeywordInfo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpCreateNestedManyWithoutKeywordInput
    tasksAsSeed?: TaskCreateNestedManyWithoutSeedKeywordInput
    relationsAsSeed?: KeywordRelationCreateNestedManyWithoutSeedKeywordInput
    relationsAsRelated?: KeywordRelationCreateNestedManyWithoutRelatedKeywordInput
    relatedResults?: RelatedResultCreateNestedManyWithoutSeedKeywordInput
    keywordProfiles?: KeywordProfileCreateNestedManyWithoutKeywordInput
  }

  export type KeywordUncheckedCreateInput = {
    id?: string
    text: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiKeywordDifficulty?: number | null
    kiMainIntent?: string | null
    kiLastUpdatedKeywordInfo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpUncheckedCreateNestedManyWithoutKeywordInput
    tasksAsSeed?: TaskUncheckedCreateNestedManyWithoutSeedKeywordInput
    relationsAsSeed?: KeywordRelationUncheckedCreateNestedManyWithoutSeedKeywordInput
    relationsAsRelated?: KeywordRelationUncheckedCreateNestedManyWithoutRelatedKeywordInput
    relatedResults?: RelatedResultUncheckedCreateNestedManyWithoutSeedKeywordInput
    keywordProfiles?: KeywordProfileUncheckedCreateNestedManyWithoutKeywordInput
  }

  export type KeywordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUpdateManyWithoutKeywordNestedInput
    tasksAsSeed?: TaskUpdateManyWithoutSeedKeywordNestedInput
    relationsAsSeed?: KeywordRelationUpdateManyWithoutSeedKeywordNestedInput
    relationsAsRelated?: KeywordRelationUpdateManyWithoutRelatedKeywordNestedInput
    relatedResults?: RelatedResultUpdateManyWithoutSeedKeywordNestedInput
    keywordProfiles?: KeywordProfileUpdateManyWithoutKeywordNestedInput
  }

  export type KeywordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUncheckedUpdateManyWithoutKeywordNestedInput
    tasksAsSeed?: TaskUncheckedUpdateManyWithoutSeedKeywordNestedInput
    relationsAsSeed?: KeywordRelationUncheckedUpdateManyWithoutSeedKeywordNestedInput
    relationsAsRelated?: KeywordRelationUncheckedUpdateManyWithoutRelatedKeywordNestedInput
    relatedResults?: RelatedResultUncheckedUpdateManyWithoutSeedKeywordNestedInput
    keywordProfiles?: KeywordProfileUncheckedUpdateManyWithoutKeywordNestedInput
  }

  export type KeywordCreateManyInput = {
    id?: string
    text: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiKeywordDifficulty?: number | null
    kiMainIntent?: string | null
    kiLastUpdatedKeywordInfo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeywordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RelatedResultCreateInput = {
    id?: string
    seType?: string | null
    seedKeywords?: RelatedResultCreateseedKeywordsInput | string[]
    locationCode?: number | null
    languageCode?: string | null
    totalCount?: bigint | number | null
    itemsCount?: number | null
    offset?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    task: TaskCreateNestedOneWithoutRelatedResultsInput
    seedKeyword: KeywordCreateNestedOneWithoutRelatedResultsInput
  }

  export type RelatedResultUncheckedCreateInput = {
    id?: string
    taskId: string
    seedKeywordId: string
    seType?: string | null
    seedKeywords?: RelatedResultCreateseedKeywordsInput | string[]
    locationCode?: number | null
    languageCode?: string | null
    totalCount?: bigint | number | null
    itemsCount?: number | null
    offset?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RelatedResultUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    seType?: NullableStringFieldUpdateOperationsInput | string | null
    seedKeywords?: RelatedResultUpdateseedKeywordsInput | string[]
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    totalCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    offset?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutRelatedResultsNestedInput
    seedKeyword?: KeywordUpdateOneRequiredWithoutRelatedResultsNestedInput
  }

  export type RelatedResultUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: StringFieldUpdateOperationsInput | string
    seType?: NullableStringFieldUpdateOperationsInput | string | null
    seedKeywords?: RelatedResultUpdateseedKeywordsInput | string[]
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    totalCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    offset?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RelatedResultCreateManyInput = {
    id?: string
    taskId: string
    seedKeywordId: string
    seType?: string | null
    seedKeywords?: RelatedResultCreateseedKeywordsInput | string[]
    locationCode?: number | null
    languageCode?: string | null
    totalCount?: bigint | number | null
    itemsCount?: number | null
    offset?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RelatedResultUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    seType?: NullableStringFieldUpdateOperationsInput | string | null
    seedKeywords?: RelatedResultUpdateseedKeywordsInput | string[]
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    totalCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    offset?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RelatedResultUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: StringFieldUpdateOperationsInput | string
    seType?: NullableStringFieldUpdateOperationsInput | string | null
    seedKeywords?: RelatedResultUpdateseedKeywordsInput | string[]
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    totalCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    offset?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResultCreateInput = {
    id?: string
    position: number
    url: string
    type?: string | null
    title?: string | null
    snippet?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serp: SerpCreateNestedOneWithoutResultInput
  }

  export type ResultUncheckedCreateInput = {
    id?: string
    serpId: string
    position: number
    url: string
    type?: string | null
    title?: string | null
    snippet?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResultUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    snippet?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serp?: SerpUpdateOneRequiredWithoutResultNestedInput
  }

  export type ResultUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serpId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    snippet?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResultCreateManyInput = {
    id?: string
    serpId: string
    position: number
    url: string
    type?: string | null
    title?: string | null
    snippet?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResultUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    snippet?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResultUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serpId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    snippet?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SerpCreateInput = {
    id?: string
    type?: string | null
    seDomain?: string | null
    locationCode?: number | null
    languageCode?: string | null
    checkUrl?: string | null
    fetchTimestampFromApi?: Date | string | null
    itemTypes?: SerpCreateitemTypesInput | string[]
    seResultsCount?: bigint | number | null
    itemsCount?: number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    task: TaskCreateNestedOneWithoutSerpsInput
    keyword: KeywordCreateNestedOneWithoutSerpsInput
    result?: ResultCreateNestedManyWithoutSerpInput
  }

  export type SerpUncheckedCreateInput = {
    id?: string
    taskId: string
    keywordId: string
    type?: string | null
    seDomain?: string | null
    locationCode?: number | null
    languageCode?: string | null
    checkUrl?: string | null
    fetchTimestampFromApi?: Date | string | null
    itemTypes?: SerpCreateitemTypesInput | string[]
    seResultsCount?: bigint | number | null
    itemsCount?: number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    result?: ResultUncheckedCreateNestedManyWithoutSerpInput
  }

  export type SerpUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    seDomain?: NullableStringFieldUpdateOperationsInput | string | null
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    checkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    fetchTimestampFromApi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itemTypes?: SerpUpdateitemTypesInput | string[]
    seResultsCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutSerpsNestedInput
    keyword?: KeywordUpdateOneRequiredWithoutSerpsNestedInput
    result?: ResultUpdateManyWithoutSerpNestedInput
  }

  export type SerpUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    keywordId?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    seDomain?: NullableStringFieldUpdateOperationsInput | string | null
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    checkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    fetchTimestampFromApi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itemTypes?: SerpUpdateitemTypesInput | string[]
    seResultsCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    result?: ResultUncheckedUpdateManyWithoutSerpNestedInput
  }

  export type SerpCreateManyInput = {
    id?: string
    taskId: string
    keywordId: string
    type?: string | null
    seDomain?: string | null
    locationCode?: number | null
    languageCode?: string | null
    checkUrl?: string | null
    fetchTimestampFromApi?: Date | string | null
    itemTypes?: SerpCreateitemTypesInput | string[]
    seResultsCount?: bigint | number | null
    itemsCount?: number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SerpUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    seDomain?: NullableStringFieldUpdateOperationsInput | string | null
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    checkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    fetchTimestampFromApi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itemTypes?: SerpUpdateitemTypesInput | string[]
    seResultsCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SerpUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    keywordId?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    seDomain?: NullableStringFieldUpdateOperationsInput | string | null
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    checkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    fetchTimestampFromApi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itemTypes?: SerpUpdateitemTypesInput | string[]
    seResultsCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateInput = {
    id: string
    keyword: string
    statusFromApi?: string | null
    receivedTimestamp?: Date | string
    resultStatusCode?: number | null
    resultStatusMessage?: string | null
    resultTime?: string | null
    resultCost?: number | null
    resultCount?: number | null
    path?: TaskCreatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: string | null
    searchEngine?: string | null
    languageCode?: string | null
    device?: string | null
    os?: string | null
    depth?: number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutTasksInput
    seedKeyword?: KeywordCreateNestedOneWithoutTasksAsSeedInput
    serps?: SerpCreateNestedManyWithoutTaskInput
    keywordRelations?: KeywordRelationCreateNestedManyWithoutTaskInput
    relatedResults?: RelatedResultCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateInput = {
    id: string
    jobId: string
    seedKeywordId?: string | null
    keyword: string
    statusFromApi?: string | null
    receivedTimestamp?: Date | string
    resultStatusCode?: number | null
    resultStatusMessage?: string | null
    resultTime?: string | null
    resultCost?: number | null
    resultCount?: number | null
    path?: TaskCreatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: string | null
    searchEngine?: string | null
    languageCode?: string | null
    device?: string | null
    os?: string | null
    depth?: number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpUncheckedCreateNestedManyWithoutTaskInput
    keywordRelations?: KeywordRelationUncheckedCreateNestedManyWithoutTaskInput
    relatedResults?: RelatedResultUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutTasksNestedInput
    seedKeyword?: KeywordUpdateOneWithoutTasksAsSeedNestedInput
    serps?: SerpUpdateManyWithoutTaskNestedInput
    keywordRelations?: KeywordRelationUpdateManyWithoutTaskNestedInput
    relatedResults?: RelatedResultUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: NullableStringFieldUpdateOperationsInput | string | null
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUncheckedUpdateManyWithoutTaskNestedInput
    keywordRelations?: KeywordRelationUncheckedUpdateManyWithoutTaskNestedInput
    relatedResults?: RelatedResultUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    id: string
    jobId: string
    seedKeywordId?: string | null
    keyword: string
    statusFromApi?: string | null
    receivedTimestamp?: Date | string
    resultStatusCode?: number | null
    resultStatusMessage?: string | null
    resultTime?: string | null
    resultCost?: number | null
    resultCount?: number | null
    path?: TaskCreatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: string | null
    searchEngine?: string | null
    languageCode?: string | null
    device?: string | null
    os?: string | null
    depth?: number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: NullableStringFieldUpdateOperationsInput | string | null
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    version?: SortOrder
    statusCode?: SortOrder
    statusMessage?: SortOrder
    time?: SortOrder
    cost?: SortOrder
    tasksCount?: SortOrder
    tasksError?: SortOrder
    requestTimestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobAvgOrderByAggregateInput = {
    statusCode?: SortOrder
    cost?: SortOrder
    tasksCount?: SortOrder
    tasksError?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    version?: SortOrder
    statusCode?: SortOrder
    statusMessage?: SortOrder
    time?: SortOrder
    cost?: SortOrder
    tasksCount?: SortOrder
    tasksError?: SortOrder
    requestTimestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    version?: SortOrder
    statusCode?: SortOrder
    statusMessage?: SortOrder
    time?: SortOrder
    cost?: SortOrder
    tasksCount?: SortOrder
    tasksError?: SortOrder
    requestTimestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobSumOrderByAggregateInput = {
    statusCode?: SortOrder
    cost?: SortOrder
    tasksCount?: SortOrder
    tasksError?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type KeywordScalarRelationFilter = {
    is?: KeywordWhereInput
    isNot?: KeywordWhereInput
  }

  export type KeywordProfileKeyword_location_language_uniqueCompoundUniqueInput = {
    keywordId: string
    locationCode: number
    languageCode: string
  }

  export type KeywordProfileCountOrderByAggregateInput = {
    id?: SortOrder
    keywordId?: SortOrder
    locationCode?: SortOrder
    languageCode?: SortOrder
    kiLastCheck?: SortOrder
    kiCompetition?: SortOrder
    kiCompetitionLevel?: SortOrder
    kiCpc?: SortOrder
    kiSearchVolume?: SortOrder
    kiLowTopOfPageBid?: SortOrder
    kiHighTopOfPageBid?: SortOrder
    kiCategories?: SortOrder
    kiMonthlySearches?: SortOrder
    kpSynonymClusteringAlgorithm?: SortOrder
    kpKeywordDifficulty?: SortOrder
    kpDetectedLanguage?: SortOrder
    kpIsAnotherLanguage?: SortOrder
    avgBacklinks?: SortOrder
    avgDofollow?: SortOrder
    avgReferringPages?: SortOrder
    avgReferringDomains?: SortOrder
    avgReferringMainDomains?: SortOrder
    avgRank?: SortOrder
    avgMainDomainRank?: SortOrder
    avgLastUpdatedTime?: SortOrder
    siMainIntent?: SortOrder
    relatedKeywordIds?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KeywordProfileAvgOrderByAggregateInput = {
    locationCode?: SortOrder
    kiCompetition?: SortOrder
    kiCpc?: SortOrder
    kiSearchVolume?: SortOrder
    kiLowTopOfPageBid?: SortOrder
    kiHighTopOfPageBid?: SortOrder
    kiCategories?: SortOrder
    kpKeywordDifficulty?: SortOrder
    avgBacklinks?: SortOrder
    avgDofollow?: SortOrder
    avgReferringPages?: SortOrder
    avgReferringDomains?: SortOrder
    avgReferringMainDomains?: SortOrder
    avgRank?: SortOrder
    avgMainDomainRank?: SortOrder
  }

  export type KeywordProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    keywordId?: SortOrder
    locationCode?: SortOrder
    languageCode?: SortOrder
    kiLastCheck?: SortOrder
    kiCompetition?: SortOrder
    kiCompetitionLevel?: SortOrder
    kiCpc?: SortOrder
    kiSearchVolume?: SortOrder
    kiLowTopOfPageBid?: SortOrder
    kiHighTopOfPageBid?: SortOrder
    kpSynonymClusteringAlgorithm?: SortOrder
    kpKeywordDifficulty?: SortOrder
    kpDetectedLanguage?: SortOrder
    kpIsAnotherLanguage?: SortOrder
    avgBacklinks?: SortOrder
    avgDofollow?: SortOrder
    avgReferringPages?: SortOrder
    avgReferringDomains?: SortOrder
    avgReferringMainDomains?: SortOrder
    avgRank?: SortOrder
    avgMainDomainRank?: SortOrder
    avgLastUpdatedTime?: SortOrder
    siMainIntent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KeywordProfileMinOrderByAggregateInput = {
    id?: SortOrder
    keywordId?: SortOrder
    locationCode?: SortOrder
    languageCode?: SortOrder
    kiLastCheck?: SortOrder
    kiCompetition?: SortOrder
    kiCompetitionLevel?: SortOrder
    kiCpc?: SortOrder
    kiSearchVolume?: SortOrder
    kiLowTopOfPageBid?: SortOrder
    kiHighTopOfPageBid?: SortOrder
    kpSynonymClusteringAlgorithm?: SortOrder
    kpKeywordDifficulty?: SortOrder
    kpDetectedLanguage?: SortOrder
    kpIsAnotherLanguage?: SortOrder
    avgBacklinks?: SortOrder
    avgDofollow?: SortOrder
    avgReferringPages?: SortOrder
    avgReferringDomains?: SortOrder
    avgReferringMainDomains?: SortOrder
    avgRank?: SortOrder
    avgMainDomainRank?: SortOrder
    avgLastUpdatedTime?: SortOrder
    siMainIntent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KeywordProfileSumOrderByAggregateInput = {
    locationCode?: SortOrder
    kiCompetition?: SortOrder
    kiCpc?: SortOrder
    kiSearchVolume?: SortOrder
    kiLowTopOfPageBid?: SortOrder
    kiHighTopOfPageBid?: SortOrder
    kiCategories?: SortOrder
    kpKeywordDifficulty?: SortOrder
    avgBacklinks?: SortOrder
    avgDofollow?: SortOrder
    avgReferringPages?: SortOrder
    avgReferringDomains?: SortOrder
    avgReferringMainDomains?: SortOrder
    avgRank?: SortOrder
    avgMainDomainRank?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type TaskScalarRelationFilter = {
    is?: TaskWhereInput
    isNot?: TaskWhereInput
  }

  export type KeywordRelationSeedKeywordIdRelatedKeywordIdCompoundUniqueInput = {
    seedKeywordId: string
    relatedKeywordId: string
  }

  export type KeywordRelationCountOrderByAggregateInput = {
    id?: SortOrder
    seedKeywordId?: SortOrder
    relatedKeywordId?: SortOrder
    taskId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KeywordRelationMaxOrderByAggregateInput = {
    id?: SortOrder
    seedKeywordId?: SortOrder
    relatedKeywordId?: SortOrder
    taskId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KeywordRelationMinOrderByAggregateInput = {
    id?: SortOrder
    seedKeywordId?: SortOrder
    relatedKeywordId?: SortOrder
    taskId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SerpListRelationFilter = {
    every?: SerpWhereInput
    some?: SerpWhereInput
    none?: SerpWhereInput
  }

  export type KeywordRelationListRelationFilter = {
    every?: KeywordRelationWhereInput
    some?: KeywordRelationWhereInput
    none?: KeywordRelationWhereInput
  }

  export type RelatedResultListRelationFilter = {
    every?: RelatedResultWhereInput
    some?: RelatedResultWhereInput
    none?: RelatedResultWhereInput
  }

  export type KeywordProfileListRelationFilter = {
    every?: KeywordProfileWhereInput
    some?: KeywordProfileWhereInput
    none?: KeywordProfileWhereInput
  }

  export type SerpOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KeywordRelationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RelatedResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KeywordProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KeywordCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    kiLastCheck?: SortOrder
    kiCompetition?: SortOrder
    kiCompetitionLevel?: SortOrder
    kiCpc?: SortOrder
    kiSearchVolume?: SortOrder
    kiLowTopOfPageBid?: SortOrder
    kiHighTopOfPageBid?: SortOrder
    kiKeywordDifficulty?: SortOrder
    kiMainIntent?: SortOrder
    kiLastUpdatedKeywordInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KeywordAvgOrderByAggregateInput = {
    kiCompetition?: SortOrder
    kiCpc?: SortOrder
    kiSearchVolume?: SortOrder
    kiLowTopOfPageBid?: SortOrder
    kiHighTopOfPageBid?: SortOrder
    kiKeywordDifficulty?: SortOrder
  }

  export type KeywordMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    kiLastCheck?: SortOrder
    kiCompetition?: SortOrder
    kiCompetitionLevel?: SortOrder
    kiCpc?: SortOrder
    kiSearchVolume?: SortOrder
    kiLowTopOfPageBid?: SortOrder
    kiHighTopOfPageBid?: SortOrder
    kiKeywordDifficulty?: SortOrder
    kiMainIntent?: SortOrder
    kiLastUpdatedKeywordInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KeywordMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    kiLastCheck?: SortOrder
    kiCompetition?: SortOrder
    kiCompetitionLevel?: SortOrder
    kiCpc?: SortOrder
    kiSearchVolume?: SortOrder
    kiLowTopOfPageBid?: SortOrder
    kiHighTopOfPageBid?: SortOrder
    kiKeywordDifficulty?: SortOrder
    kiMainIntent?: SortOrder
    kiLastUpdatedKeywordInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KeywordSumOrderByAggregateInput = {
    kiCompetition?: SortOrder
    kiCpc?: SortOrder
    kiSearchVolume?: SortOrder
    kiLowTopOfPageBid?: SortOrder
    kiHighTopOfPageBid?: SortOrder
    kiKeywordDifficulty?: SortOrder
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type RelatedResultCountOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    seedKeywordId?: SortOrder
    seType?: SortOrder
    seedKeywords?: SortOrder
    locationCode?: SortOrder
    languageCode?: SortOrder
    totalCount?: SortOrder
    itemsCount?: SortOrder
    offset?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RelatedResultAvgOrderByAggregateInput = {
    locationCode?: SortOrder
    totalCount?: SortOrder
    itemsCount?: SortOrder
    offset?: SortOrder
  }

  export type RelatedResultMaxOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    seedKeywordId?: SortOrder
    seType?: SortOrder
    locationCode?: SortOrder
    languageCode?: SortOrder
    totalCount?: SortOrder
    itemsCount?: SortOrder
    offset?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RelatedResultMinOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    seedKeywordId?: SortOrder
    seType?: SortOrder
    locationCode?: SortOrder
    languageCode?: SortOrder
    totalCount?: SortOrder
    itemsCount?: SortOrder
    offset?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RelatedResultSumOrderByAggregateInput = {
    locationCode?: SortOrder
    totalCount?: SortOrder
    itemsCount?: SortOrder
    offset?: SortOrder
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type SerpScalarRelationFilter = {
    is?: SerpWhereInput
    isNot?: SerpWhereInput
  }

  export type ResultCountOrderByAggregateInput = {
    id?: SortOrder
    serpId?: SortOrder
    position?: SortOrder
    url?: SortOrder
    type?: SortOrder
    title?: SortOrder
    snippet?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResultAvgOrderByAggregateInput = {
    position?: SortOrder
  }

  export type ResultMaxOrderByAggregateInput = {
    id?: SortOrder
    serpId?: SortOrder
    position?: SortOrder
    url?: SortOrder
    type?: SortOrder
    title?: SortOrder
    snippet?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResultMinOrderByAggregateInput = {
    id?: SortOrder
    serpId?: SortOrder
    position?: SortOrder
    url?: SortOrder
    type?: SortOrder
    title?: SortOrder
    snippet?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResultSumOrderByAggregateInput = {
    position?: SortOrder
  }

  export type ResultListRelationFilter = {
    every?: ResultWhereInput
    some?: ResultWhereInput
    none?: ResultWhereInput
  }

  export type ResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SerpCountOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    keywordId?: SortOrder
    type?: SortOrder
    seDomain?: SortOrder
    locationCode?: SortOrder
    languageCode?: SortOrder
    checkUrl?: SortOrder
    fetchTimestampFromApi?: SortOrder
    itemTypes?: SortOrder
    seResultsCount?: SortOrder
    itemsCount?: SortOrder
    refinementChips?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SerpAvgOrderByAggregateInput = {
    locationCode?: SortOrder
    seResultsCount?: SortOrder
    itemsCount?: SortOrder
  }

  export type SerpMaxOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    keywordId?: SortOrder
    type?: SortOrder
    seDomain?: SortOrder
    locationCode?: SortOrder
    languageCode?: SortOrder
    checkUrl?: SortOrder
    fetchTimestampFromApi?: SortOrder
    seResultsCount?: SortOrder
    itemsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SerpMinOrderByAggregateInput = {
    id?: SortOrder
    taskId?: SortOrder
    keywordId?: SortOrder
    type?: SortOrder
    seDomain?: SortOrder
    locationCode?: SortOrder
    languageCode?: SortOrder
    checkUrl?: SortOrder
    fetchTimestampFromApi?: SortOrder
    seResultsCount?: SortOrder
    itemsCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SerpSumOrderByAggregateInput = {
    locationCode?: SortOrder
    seResultsCount?: SortOrder
    itemsCount?: SortOrder
  }

  export type JobScalarRelationFilter = {
    is?: JobWhereInput
    isNot?: JobWhereInput
  }

  export type KeywordNullableScalarRelationFilter = {
    is?: KeywordWhereInput | null
    isNot?: KeywordWhereInput | null
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    seedKeywordId?: SortOrder
    keyword?: SortOrder
    statusFromApi?: SortOrder
    receivedTimestamp?: SortOrder
    resultStatusCode?: SortOrder
    resultStatusMessage?: SortOrder
    resultTime?: SortOrder
    resultCost?: SortOrder
    resultCount?: SortOrder
    path?: SortOrder
    resultPath?: SortOrder
    location?: SortOrder
    searchEngine?: SortOrder
    languageCode?: SortOrder
    device?: SortOrder
    os?: SortOrder
    depth?: SortOrder
    errorDetails?: SortOrder
    resultData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskAvgOrderByAggregateInput = {
    resultStatusCode?: SortOrder
    resultCost?: SortOrder
    resultCount?: SortOrder
    depth?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    seedKeywordId?: SortOrder
    keyword?: SortOrder
    statusFromApi?: SortOrder
    receivedTimestamp?: SortOrder
    resultStatusCode?: SortOrder
    resultStatusMessage?: SortOrder
    resultTime?: SortOrder
    resultCost?: SortOrder
    resultCount?: SortOrder
    location?: SortOrder
    searchEngine?: SortOrder
    languageCode?: SortOrder
    device?: SortOrder
    os?: SortOrder
    depth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    seedKeywordId?: SortOrder
    keyword?: SortOrder
    statusFromApi?: SortOrder
    receivedTimestamp?: SortOrder
    resultStatusCode?: SortOrder
    resultStatusMessage?: SortOrder
    resultTime?: SortOrder
    resultCost?: SortOrder
    resultCount?: SortOrder
    location?: SortOrder
    searchEngine?: SortOrder
    languageCode?: SortOrder
    device?: SortOrder
    os?: SortOrder
    depth?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskSumOrderByAggregateInput = {
    resultStatusCode?: SortOrder
    resultCost?: SortOrder
    resultCount?: SortOrder
    depth?: SortOrder
  }

  export type TaskCreateNestedManyWithoutJobInput = {
    create?: XOR<TaskCreateWithoutJobInput, TaskUncheckedCreateWithoutJobInput> | TaskCreateWithoutJobInput[] | TaskUncheckedCreateWithoutJobInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutJobInput | TaskCreateOrConnectWithoutJobInput[]
    createMany?: TaskCreateManyJobInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<TaskCreateWithoutJobInput, TaskUncheckedCreateWithoutJobInput> | TaskCreateWithoutJobInput[] | TaskUncheckedCreateWithoutJobInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutJobInput | TaskCreateOrConnectWithoutJobInput[]
    createMany?: TaskCreateManyJobInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TaskUpdateManyWithoutJobNestedInput = {
    create?: XOR<TaskCreateWithoutJobInput, TaskUncheckedCreateWithoutJobInput> | TaskCreateWithoutJobInput[] | TaskUncheckedCreateWithoutJobInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutJobInput | TaskCreateOrConnectWithoutJobInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutJobInput | TaskUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: TaskCreateManyJobInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutJobInput | TaskUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutJobInput | TaskUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<TaskCreateWithoutJobInput, TaskUncheckedCreateWithoutJobInput> | TaskCreateWithoutJobInput[] | TaskUncheckedCreateWithoutJobInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutJobInput | TaskCreateOrConnectWithoutJobInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutJobInput | TaskUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: TaskCreateManyJobInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutJobInput | TaskUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutJobInput | TaskUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type KeywordProfileCreatekiCategoriesInput = {
    set: number[]
  }

  export type KeywordProfileCreaterelatedKeywordIdsInput = {
    set: string[]
  }

  export type KeywordCreateNestedOneWithoutKeywordProfilesInput = {
    create?: XOR<KeywordCreateWithoutKeywordProfilesInput, KeywordUncheckedCreateWithoutKeywordProfilesInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutKeywordProfilesInput
    connect?: KeywordWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type KeywordProfileUpdatekiCategoriesInput = {
    set?: number[]
    push?: number | number[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type KeywordProfileUpdaterelatedKeywordIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type KeywordUpdateOneRequiredWithoutKeywordProfilesNestedInput = {
    create?: XOR<KeywordCreateWithoutKeywordProfilesInput, KeywordUncheckedCreateWithoutKeywordProfilesInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutKeywordProfilesInput
    upsert?: KeywordUpsertWithoutKeywordProfilesInput
    connect?: KeywordWhereUniqueInput
    update?: XOR<XOR<KeywordUpdateToOneWithWhereWithoutKeywordProfilesInput, KeywordUpdateWithoutKeywordProfilesInput>, KeywordUncheckedUpdateWithoutKeywordProfilesInput>
  }

  export type KeywordCreateNestedOneWithoutRelationsAsSeedInput = {
    create?: XOR<KeywordCreateWithoutRelationsAsSeedInput, KeywordUncheckedCreateWithoutRelationsAsSeedInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutRelationsAsSeedInput
    connect?: KeywordWhereUniqueInput
  }

  export type KeywordCreateNestedOneWithoutRelationsAsRelatedInput = {
    create?: XOR<KeywordCreateWithoutRelationsAsRelatedInput, KeywordUncheckedCreateWithoutRelationsAsRelatedInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutRelationsAsRelatedInput
    connect?: KeywordWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutKeywordRelationsInput = {
    create?: XOR<TaskCreateWithoutKeywordRelationsInput, TaskUncheckedCreateWithoutKeywordRelationsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutKeywordRelationsInput
    connect?: TaskWhereUniqueInput
  }

  export type KeywordUpdateOneRequiredWithoutRelationsAsSeedNestedInput = {
    create?: XOR<KeywordCreateWithoutRelationsAsSeedInput, KeywordUncheckedCreateWithoutRelationsAsSeedInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutRelationsAsSeedInput
    upsert?: KeywordUpsertWithoutRelationsAsSeedInput
    connect?: KeywordWhereUniqueInput
    update?: XOR<XOR<KeywordUpdateToOneWithWhereWithoutRelationsAsSeedInput, KeywordUpdateWithoutRelationsAsSeedInput>, KeywordUncheckedUpdateWithoutRelationsAsSeedInput>
  }

  export type KeywordUpdateOneRequiredWithoutRelationsAsRelatedNestedInput = {
    create?: XOR<KeywordCreateWithoutRelationsAsRelatedInput, KeywordUncheckedCreateWithoutRelationsAsRelatedInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutRelationsAsRelatedInput
    upsert?: KeywordUpsertWithoutRelationsAsRelatedInput
    connect?: KeywordWhereUniqueInput
    update?: XOR<XOR<KeywordUpdateToOneWithWhereWithoutRelationsAsRelatedInput, KeywordUpdateWithoutRelationsAsRelatedInput>, KeywordUncheckedUpdateWithoutRelationsAsRelatedInput>
  }

  export type TaskUpdateOneRequiredWithoutKeywordRelationsNestedInput = {
    create?: XOR<TaskCreateWithoutKeywordRelationsInput, TaskUncheckedCreateWithoutKeywordRelationsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutKeywordRelationsInput
    upsert?: TaskUpsertWithoutKeywordRelationsInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutKeywordRelationsInput, TaskUpdateWithoutKeywordRelationsInput>, TaskUncheckedUpdateWithoutKeywordRelationsInput>
  }

  export type SerpCreateNestedManyWithoutKeywordInput = {
    create?: XOR<SerpCreateWithoutKeywordInput, SerpUncheckedCreateWithoutKeywordInput> | SerpCreateWithoutKeywordInput[] | SerpUncheckedCreateWithoutKeywordInput[]
    connectOrCreate?: SerpCreateOrConnectWithoutKeywordInput | SerpCreateOrConnectWithoutKeywordInput[]
    createMany?: SerpCreateManyKeywordInputEnvelope
    connect?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutSeedKeywordInput = {
    create?: XOR<TaskCreateWithoutSeedKeywordInput, TaskUncheckedCreateWithoutSeedKeywordInput> | TaskCreateWithoutSeedKeywordInput[] | TaskUncheckedCreateWithoutSeedKeywordInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutSeedKeywordInput | TaskCreateOrConnectWithoutSeedKeywordInput[]
    createMany?: TaskCreateManySeedKeywordInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type KeywordRelationCreateNestedManyWithoutSeedKeywordInput = {
    create?: XOR<KeywordRelationCreateWithoutSeedKeywordInput, KeywordRelationUncheckedCreateWithoutSeedKeywordInput> | KeywordRelationCreateWithoutSeedKeywordInput[] | KeywordRelationUncheckedCreateWithoutSeedKeywordInput[]
    connectOrCreate?: KeywordRelationCreateOrConnectWithoutSeedKeywordInput | KeywordRelationCreateOrConnectWithoutSeedKeywordInput[]
    createMany?: KeywordRelationCreateManySeedKeywordInputEnvelope
    connect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
  }

  export type KeywordRelationCreateNestedManyWithoutRelatedKeywordInput = {
    create?: XOR<KeywordRelationCreateWithoutRelatedKeywordInput, KeywordRelationUncheckedCreateWithoutRelatedKeywordInput> | KeywordRelationCreateWithoutRelatedKeywordInput[] | KeywordRelationUncheckedCreateWithoutRelatedKeywordInput[]
    connectOrCreate?: KeywordRelationCreateOrConnectWithoutRelatedKeywordInput | KeywordRelationCreateOrConnectWithoutRelatedKeywordInput[]
    createMany?: KeywordRelationCreateManyRelatedKeywordInputEnvelope
    connect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
  }

  export type RelatedResultCreateNestedManyWithoutSeedKeywordInput = {
    create?: XOR<RelatedResultCreateWithoutSeedKeywordInput, RelatedResultUncheckedCreateWithoutSeedKeywordInput> | RelatedResultCreateWithoutSeedKeywordInput[] | RelatedResultUncheckedCreateWithoutSeedKeywordInput[]
    connectOrCreate?: RelatedResultCreateOrConnectWithoutSeedKeywordInput | RelatedResultCreateOrConnectWithoutSeedKeywordInput[]
    createMany?: RelatedResultCreateManySeedKeywordInputEnvelope
    connect?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
  }

  export type KeywordProfileCreateNestedManyWithoutKeywordInput = {
    create?: XOR<KeywordProfileCreateWithoutKeywordInput, KeywordProfileUncheckedCreateWithoutKeywordInput> | KeywordProfileCreateWithoutKeywordInput[] | KeywordProfileUncheckedCreateWithoutKeywordInput[]
    connectOrCreate?: KeywordProfileCreateOrConnectWithoutKeywordInput | KeywordProfileCreateOrConnectWithoutKeywordInput[]
    createMany?: KeywordProfileCreateManyKeywordInputEnvelope
    connect?: KeywordProfileWhereUniqueInput | KeywordProfileWhereUniqueInput[]
  }

  export type SerpUncheckedCreateNestedManyWithoutKeywordInput = {
    create?: XOR<SerpCreateWithoutKeywordInput, SerpUncheckedCreateWithoutKeywordInput> | SerpCreateWithoutKeywordInput[] | SerpUncheckedCreateWithoutKeywordInput[]
    connectOrCreate?: SerpCreateOrConnectWithoutKeywordInput | SerpCreateOrConnectWithoutKeywordInput[]
    createMany?: SerpCreateManyKeywordInputEnvelope
    connect?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutSeedKeywordInput = {
    create?: XOR<TaskCreateWithoutSeedKeywordInput, TaskUncheckedCreateWithoutSeedKeywordInput> | TaskCreateWithoutSeedKeywordInput[] | TaskUncheckedCreateWithoutSeedKeywordInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutSeedKeywordInput | TaskCreateOrConnectWithoutSeedKeywordInput[]
    createMany?: TaskCreateManySeedKeywordInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type KeywordRelationUncheckedCreateNestedManyWithoutSeedKeywordInput = {
    create?: XOR<KeywordRelationCreateWithoutSeedKeywordInput, KeywordRelationUncheckedCreateWithoutSeedKeywordInput> | KeywordRelationCreateWithoutSeedKeywordInput[] | KeywordRelationUncheckedCreateWithoutSeedKeywordInput[]
    connectOrCreate?: KeywordRelationCreateOrConnectWithoutSeedKeywordInput | KeywordRelationCreateOrConnectWithoutSeedKeywordInput[]
    createMany?: KeywordRelationCreateManySeedKeywordInputEnvelope
    connect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
  }

  export type KeywordRelationUncheckedCreateNestedManyWithoutRelatedKeywordInput = {
    create?: XOR<KeywordRelationCreateWithoutRelatedKeywordInput, KeywordRelationUncheckedCreateWithoutRelatedKeywordInput> | KeywordRelationCreateWithoutRelatedKeywordInput[] | KeywordRelationUncheckedCreateWithoutRelatedKeywordInput[]
    connectOrCreate?: KeywordRelationCreateOrConnectWithoutRelatedKeywordInput | KeywordRelationCreateOrConnectWithoutRelatedKeywordInput[]
    createMany?: KeywordRelationCreateManyRelatedKeywordInputEnvelope
    connect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
  }

  export type RelatedResultUncheckedCreateNestedManyWithoutSeedKeywordInput = {
    create?: XOR<RelatedResultCreateWithoutSeedKeywordInput, RelatedResultUncheckedCreateWithoutSeedKeywordInput> | RelatedResultCreateWithoutSeedKeywordInput[] | RelatedResultUncheckedCreateWithoutSeedKeywordInput[]
    connectOrCreate?: RelatedResultCreateOrConnectWithoutSeedKeywordInput | RelatedResultCreateOrConnectWithoutSeedKeywordInput[]
    createMany?: RelatedResultCreateManySeedKeywordInputEnvelope
    connect?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
  }

  export type KeywordProfileUncheckedCreateNestedManyWithoutKeywordInput = {
    create?: XOR<KeywordProfileCreateWithoutKeywordInput, KeywordProfileUncheckedCreateWithoutKeywordInput> | KeywordProfileCreateWithoutKeywordInput[] | KeywordProfileUncheckedCreateWithoutKeywordInput[]
    connectOrCreate?: KeywordProfileCreateOrConnectWithoutKeywordInput | KeywordProfileCreateOrConnectWithoutKeywordInput[]
    createMany?: KeywordProfileCreateManyKeywordInputEnvelope
    connect?: KeywordProfileWhereUniqueInput | KeywordProfileWhereUniqueInput[]
  }

  export type SerpUpdateManyWithoutKeywordNestedInput = {
    create?: XOR<SerpCreateWithoutKeywordInput, SerpUncheckedCreateWithoutKeywordInput> | SerpCreateWithoutKeywordInput[] | SerpUncheckedCreateWithoutKeywordInput[]
    connectOrCreate?: SerpCreateOrConnectWithoutKeywordInput | SerpCreateOrConnectWithoutKeywordInput[]
    upsert?: SerpUpsertWithWhereUniqueWithoutKeywordInput | SerpUpsertWithWhereUniqueWithoutKeywordInput[]
    createMany?: SerpCreateManyKeywordInputEnvelope
    set?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    disconnect?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    delete?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    connect?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    update?: SerpUpdateWithWhereUniqueWithoutKeywordInput | SerpUpdateWithWhereUniqueWithoutKeywordInput[]
    updateMany?: SerpUpdateManyWithWhereWithoutKeywordInput | SerpUpdateManyWithWhereWithoutKeywordInput[]
    deleteMany?: SerpScalarWhereInput | SerpScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutSeedKeywordNestedInput = {
    create?: XOR<TaskCreateWithoutSeedKeywordInput, TaskUncheckedCreateWithoutSeedKeywordInput> | TaskCreateWithoutSeedKeywordInput[] | TaskUncheckedCreateWithoutSeedKeywordInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutSeedKeywordInput | TaskCreateOrConnectWithoutSeedKeywordInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutSeedKeywordInput | TaskUpsertWithWhereUniqueWithoutSeedKeywordInput[]
    createMany?: TaskCreateManySeedKeywordInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutSeedKeywordInput | TaskUpdateWithWhereUniqueWithoutSeedKeywordInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutSeedKeywordInput | TaskUpdateManyWithWhereWithoutSeedKeywordInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type KeywordRelationUpdateManyWithoutSeedKeywordNestedInput = {
    create?: XOR<KeywordRelationCreateWithoutSeedKeywordInput, KeywordRelationUncheckedCreateWithoutSeedKeywordInput> | KeywordRelationCreateWithoutSeedKeywordInput[] | KeywordRelationUncheckedCreateWithoutSeedKeywordInput[]
    connectOrCreate?: KeywordRelationCreateOrConnectWithoutSeedKeywordInput | KeywordRelationCreateOrConnectWithoutSeedKeywordInput[]
    upsert?: KeywordRelationUpsertWithWhereUniqueWithoutSeedKeywordInput | KeywordRelationUpsertWithWhereUniqueWithoutSeedKeywordInput[]
    createMany?: KeywordRelationCreateManySeedKeywordInputEnvelope
    set?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    disconnect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    delete?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    connect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    update?: KeywordRelationUpdateWithWhereUniqueWithoutSeedKeywordInput | KeywordRelationUpdateWithWhereUniqueWithoutSeedKeywordInput[]
    updateMany?: KeywordRelationUpdateManyWithWhereWithoutSeedKeywordInput | KeywordRelationUpdateManyWithWhereWithoutSeedKeywordInput[]
    deleteMany?: KeywordRelationScalarWhereInput | KeywordRelationScalarWhereInput[]
  }

  export type KeywordRelationUpdateManyWithoutRelatedKeywordNestedInput = {
    create?: XOR<KeywordRelationCreateWithoutRelatedKeywordInput, KeywordRelationUncheckedCreateWithoutRelatedKeywordInput> | KeywordRelationCreateWithoutRelatedKeywordInput[] | KeywordRelationUncheckedCreateWithoutRelatedKeywordInput[]
    connectOrCreate?: KeywordRelationCreateOrConnectWithoutRelatedKeywordInput | KeywordRelationCreateOrConnectWithoutRelatedKeywordInput[]
    upsert?: KeywordRelationUpsertWithWhereUniqueWithoutRelatedKeywordInput | KeywordRelationUpsertWithWhereUniqueWithoutRelatedKeywordInput[]
    createMany?: KeywordRelationCreateManyRelatedKeywordInputEnvelope
    set?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    disconnect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    delete?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    connect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    update?: KeywordRelationUpdateWithWhereUniqueWithoutRelatedKeywordInput | KeywordRelationUpdateWithWhereUniqueWithoutRelatedKeywordInput[]
    updateMany?: KeywordRelationUpdateManyWithWhereWithoutRelatedKeywordInput | KeywordRelationUpdateManyWithWhereWithoutRelatedKeywordInput[]
    deleteMany?: KeywordRelationScalarWhereInput | KeywordRelationScalarWhereInput[]
  }

  export type RelatedResultUpdateManyWithoutSeedKeywordNestedInput = {
    create?: XOR<RelatedResultCreateWithoutSeedKeywordInput, RelatedResultUncheckedCreateWithoutSeedKeywordInput> | RelatedResultCreateWithoutSeedKeywordInput[] | RelatedResultUncheckedCreateWithoutSeedKeywordInput[]
    connectOrCreate?: RelatedResultCreateOrConnectWithoutSeedKeywordInput | RelatedResultCreateOrConnectWithoutSeedKeywordInput[]
    upsert?: RelatedResultUpsertWithWhereUniqueWithoutSeedKeywordInput | RelatedResultUpsertWithWhereUniqueWithoutSeedKeywordInput[]
    createMany?: RelatedResultCreateManySeedKeywordInputEnvelope
    set?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    disconnect?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    delete?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    connect?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    update?: RelatedResultUpdateWithWhereUniqueWithoutSeedKeywordInput | RelatedResultUpdateWithWhereUniqueWithoutSeedKeywordInput[]
    updateMany?: RelatedResultUpdateManyWithWhereWithoutSeedKeywordInput | RelatedResultUpdateManyWithWhereWithoutSeedKeywordInput[]
    deleteMany?: RelatedResultScalarWhereInput | RelatedResultScalarWhereInput[]
  }

  export type KeywordProfileUpdateManyWithoutKeywordNestedInput = {
    create?: XOR<KeywordProfileCreateWithoutKeywordInput, KeywordProfileUncheckedCreateWithoutKeywordInput> | KeywordProfileCreateWithoutKeywordInput[] | KeywordProfileUncheckedCreateWithoutKeywordInput[]
    connectOrCreate?: KeywordProfileCreateOrConnectWithoutKeywordInput | KeywordProfileCreateOrConnectWithoutKeywordInput[]
    upsert?: KeywordProfileUpsertWithWhereUniqueWithoutKeywordInput | KeywordProfileUpsertWithWhereUniqueWithoutKeywordInput[]
    createMany?: KeywordProfileCreateManyKeywordInputEnvelope
    set?: KeywordProfileWhereUniqueInput | KeywordProfileWhereUniqueInput[]
    disconnect?: KeywordProfileWhereUniqueInput | KeywordProfileWhereUniqueInput[]
    delete?: KeywordProfileWhereUniqueInput | KeywordProfileWhereUniqueInput[]
    connect?: KeywordProfileWhereUniqueInput | KeywordProfileWhereUniqueInput[]
    update?: KeywordProfileUpdateWithWhereUniqueWithoutKeywordInput | KeywordProfileUpdateWithWhereUniqueWithoutKeywordInput[]
    updateMany?: KeywordProfileUpdateManyWithWhereWithoutKeywordInput | KeywordProfileUpdateManyWithWhereWithoutKeywordInput[]
    deleteMany?: KeywordProfileScalarWhereInput | KeywordProfileScalarWhereInput[]
  }

  export type SerpUncheckedUpdateManyWithoutKeywordNestedInput = {
    create?: XOR<SerpCreateWithoutKeywordInput, SerpUncheckedCreateWithoutKeywordInput> | SerpCreateWithoutKeywordInput[] | SerpUncheckedCreateWithoutKeywordInput[]
    connectOrCreate?: SerpCreateOrConnectWithoutKeywordInput | SerpCreateOrConnectWithoutKeywordInput[]
    upsert?: SerpUpsertWithWhereUniqueWithoutKeywordInput | SerpUpsertWithWhereUniqueWithoutKeywordInput[]
    createMany?: SerpCreateManyKeywordInputEnvelope
    set?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    disconnect?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    delete?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    connect?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    update?: SerpUpdateWithWhereUniqueWithoutKeywordInput | SerpUpdateWithWhereUniqueWithoutKeywordInput[]
    updateMany?: SerpUpdateManyWithWhereWithoutKeywordInput | SerpUpdateManyWithWhereWithoutKeywordInput[]
    deleteMany?: SerpScalarWhereInput | SerpScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutSeedKeywordNestedInput = {
    create?: XOR<TaskCreateWithoutSeedKeywordInput, TaskUncheckedCreateWithoutSeedKeywordInput> | TaskCreateWithoutSeedKeywordInput[] | TaskUncheckedCreateWithoutSeedKeywordInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutSeedKeywordInput | TaskCreateOrConnectWithoutSeedKeywordInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutSeedKeywordInput | TaskUpsertWithWhereUniqueWithoutSeedKeywordInput[]
    createMany?: TaskCreateManySeedKeywordInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutSeedKeywordInput | TaskUpdateWithWhereUniqueWithoutSeedKeywordInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutSeedKeywordInput | TaskUpdateManyWithWhereWithoutSeedKeywordInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type KeywordRelationUncheckedUpdateManyWithoutSeedKeywordNestedInput = {
    create?: XOR<KeywordRelationCreateWithoutSeedKeywordInput, KeywordRelationUncheckedCreateWithoutSeedKeywordInput> | KeywordRelationCreateWithoutSeedKeywordInput[] | KeywordRelationUncheckedCreateWithoutSeedKeywordInput[]
    connectOrCreate?: KeywordRelationCreateOrConnectWithoutSeedKeywordInput | KeywordRelationCreateOrConnectWithoutSeedKeywordInput[]
    upsert?: KeywordRelationUpsertWithWhereUniqueWithoutSeedKeywordInput | KeywordRelationUpsertWithWhereUniqueWithoutSeedKeywordInput[]
    createMany?: KeywordRelationCreateManySeedKeywordInputEnvelope
    set?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    disconnect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    delete?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    connect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    update?: KeywordRelationUpdateWithWhereUniqueWithoutSeedKeywordInput | KeywordRelationUpdateWithWhereUniqueWithoutSeedKeywordInput[]
    updateMany?: KeywordRelationUpdateManyWithWhereWithoutSeedKeywordInput | KeywordRelationUpdateManyWithWhereWithoutSeedKeywordInput[]
    deleteMany?: KeywordRelationScalarWhereInput | KeywordRelationScalarWhereInput[]
  }

  export type KeywordRelationUncheckedUpdateManyWithoutRelatedKeywordNestedInput = {
    create?: XOR<KeywordRelationCreateWithoutRelatedKeywordInput, KeywordRelationUncheckedCreateWithoutRelatedKeywordInput> | KeywordRelationCreateWithoutRelatedKeywordInput[] | KeywordRelationUncheckedCreateWithoutRelatedKeywordInput[]
    connectOrCreate?: KeywordRelationCreateOrConnectWithoutRelatedKeywordInput | KeywordRelationCreateOrConnectWithoutRelatedKeywordInput[]
    upsert?: KeywordRelationUpsertWithWhereUniqueWithoutRelatedKeywordInput | KeywordRelationUpsertWithWhereUniqueWithoutRelatedKeywordInput[]
    createMany?: KeywordRelationCreateManyRelatedKeywordInputEnvelope
    set?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    disconnect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    delete?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    connect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    update?: KeywordRelationUpdateWithWhereUniqueWithoutRelatedKeywordInput | KeywordRelationUpdateWithWhereUniqueWithoutRelatedKeywordInput[]
    updateMany?: KeywordRelationUpdateManyWithWhereWithoutRelatedKeywordInput | KeywordRelationUpdateManyWithWhereWithoutRelatedKeywordInput[]
    deleteMany?: KeywordRelationScalarWhereInput | KeywordRelationScalarWhereInput[]
  }

  export type RelatedResultUncheckedUpdateManyWithoutSeedKeywordNestedInput = {
    create?: XOR<RelatedResultCreateWithoutSeedKeywordInput, RelatedResultUncheckedCreateWithoutSeedKeywordInput> | RelatedResultCreateWithoutSeedKeywordInput[] | RelatedResultUncheckedCreateWithoutSeedKeywordInput[]
    connectOrCreate?: RelatedResultCreateOrConnectWithoutSeedKeywordInput | RelatedResultCreateOrConnectWithoutSeedKeywordInput[]
    upsert?: RelatedResultUpsertWithWhereUniqueWithoutSeedKeywordInput | RelatedResultUpsertWithWhereUniqueWithoutSeedKeywordInput[]
    createMany?: RelatedResultCreateManySeedKeywordInputEnvelope
    set?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    disconnect?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    delete?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    connect?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    update?: RelatedResultUpdateWithWhereUniqueWithoutSeedKeywordInput | RelatedResultUpdateWithWhereUniqueWithoutSeedKeywordInput[]
    updateMany?: RelatedResultUpdateManyWithWhereWithoutSeedKeywordInput | RelatedResultUpdateManyWithWhereWithoutSeedKeywordInput[]
    deleteMany?: RelatedResultScalarWhereInput | RelatedResultScalarWhereInput[]
  }

  export type KeywordProfileUncheckedUpdateManyWithoutKeywordNestedInput = {
    create?: XOR<KeywordProfileCreateWithoutKeywordInput, KeywordProfileUncheckedCreateWithoutKeywordInput> | KeywordProfileCreateWithoutKeywordInput[] | KeywordProfileUncheckedCreateWithoutKeywordInput[]
    connectOrCreate?: KeywordProfileCreateOrConnectWithoutKeywordInput | KeywordProfileCreateOrConnectWithoutKeywordInput[]
    upsert?: KeywordProfileUpsertWithWhereUniqueWithoutKeywordInput | KeywordProfileUpsertWithWhereUniqueWithoutKeywordInput[]
    createMany?: KeywordProfileCreateManyKeywordInputEnvelope
    set?: KeywordProfileWhereUniqueInput | KeywordProfileWhereUniqueInput[]
    disconnect?: KeywordProfileWhereUniqueInput | KeywordProfileWhereUniqueInput[]
    delete?: KeywordProfileWhereUniqueInput | KeywordProfileWhereUniqueInput[]
    connect?: KeywordProfileWhereUniqueInput | KeywordProfileWhereUniqueInput[]
    update?: KeywordProfileUpdateWithWhereUniqueWithoutKeywordInput | KeywordProfileUpdateWithWhereUniqueWithoutKeywordInput[]
    updateMany?: KeywordProfileUpdateManyWithWhereWithoutKeywordInput | KeywordProfileUpdateManyWithWhereWithoutKeywordInput[]
    deleteMany?: KeywordProfileScalarWhereInput | KeywordProfileScalarWhereInput[]
  }

  export type RelatedResultCreateseedKeywordsInput = {
    set: string[]
  }

  export type TaskCreateNestedOneWithoutRelatedResultsInput = {
    create?: XOR<TaskCreateWithoutRelatedResultsInput, TaskUncheckedCreateWithoutRelatedResultsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutRelatedResultsInput
    connect?: TaskWhereUniqueInput
  }

  export type KeywordCreateNestedOneWithoutRelatedResultsInput = {
    create?: XOR<KeywordCreateWithoutRelatedResultsInput, KeywordUncheckedCreateWithoutRelatedResultsInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutRelatedResultsInput
    connect?: KeywordWhereUniqueInput
  }

  export type RelatedResultUpdateseedKeywordsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type TaskUpdateOneRequiredWithoutRelatedResultsNestedInput = {
    create?: XOR<TaskCreateWithoutRelatedResultsInput, TaskUncheckedCreateWithoutRelatedResultsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutRelatedResultsInput
    upsert?: TaskUpsertWithoutRelatedResultsInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutRelatedResultsInput, TaskUpdateWithoutRelatedResultsInput>, TaskUncheckedUpdateWithoutRelatedResultsInput>
  }

  export type KeywordUpdateOneRequiredWithoutRelatedResultsNestedInput = {
    create?: XOR<KeywordCreateWithoutRelatedResultsInput, KeywordUncheckedCreateWithoutRelatedResultsInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutRelatedResultsInput
    upsert?: KeywordUpsertWithoutRelatedResultsInput
    connect?: KeywordWhereUniqueInput
    update?: XOR<XOR<KeywordUpdateToOneWithWhereWithoutRelatedResultsInput, KeywordUpdateWithoutRelatedResultsInput>, KeywordUncheckedUpdateWithoutRelatedResultsInput>
  }

  export type SerpCreateNestedOneWithoutResultInput = {
    create?: XOR<SerpCreateWithoutResultInput, SerpUncheckedCreateWithoutResultInput>
    connectOrCreate?: SerpCreateOrConnectWithoutResultInput
    connect?: SerpWhereUniqueInput
  }

  export type SerpUpdateOneRequiredWithoutResultNestedInput = {
    create?: XOR<SerpCreateWithoutResultInput, SerpUncheckedCreateWithoutResultInput>
    connectOrCreate?: SerpCreateOrConnectWithoutResultInput
    upsert?: SerpUpsertWithoutResultInput
    connect?: SerpWhereUniqueInput
    update?: XOR<XOR<SerpUpdateToOneWithWhereWithoutResultInput, SerpUpdateWithoutResultInput>, SerpUncheckedUpdateWithoutResultInput>
  }

  export type SerpCreateitemTypesInput = {
    set: string[]
  }

  export type TaskCreateNestedOneWithoutSerpsInput = {
    create?: XOR<TaskCreateWithoutSerpsInput, TaskUncheckedCreateWithoutSerpsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutSerpsInput
    connect?: TaskWhereUniqueInput
  }

  export type KeywordCreateNestedOneWithoutSerpsInput = {
    create?: XOR<KeywordCreateWithoutSerpsInput, KeywordUncheckedCreateWithoutSerpsInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutSerpsInput
    connect?: KeywordWhereUniqueInput
  }

  export type ResultCreateNestedManyWithoutSerpInput = {
    create?: XOR<ResultCreateWithoutSerpInput, ResultUncheckedCreateWithoutSerpInput> | ResultCreateWithoutSerpInput[] | ResultUncheckedCreateWithoutSerpInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutSerpInput | ResultCreateOrConnectWithoutSerpInput[]
    createMany?: ResultCreateManySerpInputEnvelope
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
  }

  export type ResultUncheckedCreateNestedManyWithoutSerpInput = {
    create?: XOR<ResultCreateWithoutSerpInput, ResultUncheckedCreateWithoutSerpInput> | ResultCreateWithoutSerpInput[] | ResultUncheckedCreateWithoutSerpInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutSerpInput | ResultCreateOrConnectWithoutSerpInput[]
    createMany?: ResultCreateManySerpInputEnvelope
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
  }

  export type SerpUpdateitemTypesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TaskUpdateOneRequiredWithoutSerpsNestedInput = {
    create?: XOR<TaskCreateWithoutSerpsInput, TaskUncheckedCreateWithoutSerpsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutSerpsInput
    upsert?: TaskUpsertWithoutSerpsInput
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutSerpsInput, TaskUpdateWithoutSerpsInput>, TaskUncheckedUpdateWithoutSerpsInput>
  }

  export type KeywordUpdateOneRequiredWithoutSerpsNestedInput = {
    create?: XOR<KeywordCreateWithoutSerpsInput, KeywordUncheckedCreateWithoutSerpsInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutSerpsInput
    upsert?: KeywordUpsertWithoutSerpsInput
    connect?: KeywordWhereUniqueInput
    update?: XOR<XOR<KeywordUpdateToOneWithWhereWithoutSerpsInput, KeywordUpdateWithoutSerpsInput>, KeywordUncheckedUpdateWithoutSerpsInput>
  }

  export type ResultUpdateManyWithoutSerpNestedInput = {
    create?: XOR<ResultCreateWithoutSerpInput, ResultUncheckedCreateWithoutSerpInput> | ResultCreateWithoutSerpInput[] | ResultUncheckedCreateWithoutSerpInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutSerpInput | ResultCreateOrConnectWithoutSerpInput[]
    upsert?: ResultUpsertWithWhereUniqueWithoutSerpInput | ResultUpsertWithWhereUniqueWithoutSerpInput[]
    createMany?: ResultCreateManySerpInputEnvelope
    set?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    disconnect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    delete?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    update?: ResultUpdateWithWhereUniqueWithoutSerpInput | ResultUpdateWithWhereUniqueWithoutSerpInput[]
    updateMany?: ResultUpdateManyWithWhereWithoutSerpInput | ResultUpdateManyWithWhereWithoutSerpInput[]
    deleteMany?: ResultScalarWhereInput | ResultScalarWhereInput[]
  }

  export type ResultUncheckedUpdateManyWithoutSerpNestedInput = {
    create?: XOR<ResultCreateWithoutSerpInput, ResultUncheckedCreateWithoutSerpInput> | ResultCreateWithoutSerpInput[] | ResultUncheckedCreateWithoutSerpInput[]
    connectOrCreate?: ResultCreateOrConnectWithoutSerpInput | ResultCreateOrConnectWithoutSerpInput[]
    upsert?: ResultUpsertWithWhereUniqueWithoutSerpInput | ResultUpsertWithWhereUniqueWithoutSerpInput[]
    createMany?: ResultCreateManySerpInputEnvelope
    set?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    disconnect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    delete?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    connect?: ResultWhereUniqueInput | ResultWhereUniqueInput[]
    update?: ResultUpdateWithWhereUniqueWithoutSerpInput | ResultUpdateWithWhereUniqueWithoutSerpInput[]
    updateMany?: ResultUpdateManyWithWhereWithoutSerpInput | ResultUpdateManyWithWhereWithoutSerpInput[]
    deleteMany?: ResultScalarWhereInput | ResultScalarWhereInput[]
  }

  export type TaskCreatepathInput = {
    set: string[]
  }

  export type JobCreateNestedOneWithoutTasksInput = {
    create?: XOR<JobCreateWithoutTasksInput, JobUncheckedCreateWithoutTasksInput>
    connectOrCreate?: JobCreateOrConnectWithoutTasksInput
    connect?: JobWhereUniqueInput
  }

  export type KeywordCreateNestedOneWithoutTasksAsSeedInput = {
    create?: XOR<KeywordCreateWithoutTasksAsSeedInput, KeywordUncheckedCreateWithoutTasksAsSeedInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutTasksAsSeedInput
    connect?: KeywordWhereUniqueInput
  }

  export type SerpCreateNestedManyWithoutTaskInput = {
    create?: XOR<SerpCreateWithoutTaskInput, SerpUncheckedCreateWithoutTaskInput> | SerpCreateWithoutTaskInput[] | SerpUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: SerpCreateOrConnectWithoutTaskInput | SerpCreateOrConnectWithoutTaskInput[]
    createMany?: SerpCreateManyTaskInputEnvelope
    connect?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
  }

  export type KeywordRelationCreateNestedManyWithoutTaskInput = {
    create?: XOR<KeywordRelationCreateWithoutTaskInput, KeywordRelationUncheckedCreateWithoutTaskInput> | KeywordRelationCreateWithoutTaskInput[] | KeywordRelationUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: KeywordRelationCreateOrConnectWithoutTaskInput | KeywordRelationCreateOrConnectWithoutTaskInput[]
    createMany?: KeywordRelationCreateManyTaskInputEnvelope
    connect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
  }

  export type RelatedResultCreateNestedManyWithoutTaskInput = {
    create?: XOR<RelatedResultCreateWithoutTaskInput, RelatedResultUncheckedCreateWithoutTaskInput> | RelatedResultCreateWithoutTaskInput[] | RelatedResultUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: RelatedResultCreateOrConnectWithoutTaskInput | RelatedResultCreateOrConnectWithoutTaskInput[]
    createMany?: RelatedResultCreateManyTaskInputEnvelope
    connect?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
  }

  export type SerpUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<SerpCreateWithoutTaskInput, SerpUncheckedCreateWithoutTaskInput> | SerpCreateWithoutTaskInput[] | SerpUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: SerpCreateOrConnectWithoutTaskInput | SerpCreateOrConnectWithoutTaskInput[]
    createMany?: SerpCreateManyTaskInputEnvelope
    connect?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
  }

  export type KeywordRelationUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<KeywordRelationCreateWithoutTaskInput, KeywordRelationUncheckedCreateWithoutTaskInput> | KeywordRelationCreateWithoutTaskInput[] | KeywordRelationUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: KeywordRelationCreateOrConnectWithoutTaskInput | KeywordRelationCreateOrConnectWithoutTaskInput[]
    createMany?: KeywordRelationCreateManyTaskInputEnvelope
    connect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
  }

  export type RelatedResultUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<RelatedResultCreateWithoutTaskInput, RelatedResultUncheckedCreateWithoutTaskInput> | RelatedResultCreateWithoutTaskInput[] | RelatedResultUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: RelatedResultCreateOrConnectWithoutTaskInput | RelatedResultCreateOrConnectWithoutTaskInput[]
    createMany?: RelatedResultCreateManyTaskInputEnvelope
    connect?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
  }

  export type TaskUpdatepathInput = {
    set?: string[]
    push?: string | string[]
  }

  export type JobUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<JobCreateWithoutTasksInput, JobUncheckedCreateWithoutTasksInput>
    connectOrCreate?: JobCreateOrConnectWithoutTasksInput
    upsert?: JobUpsertWithoutTasksInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutTasksInput, JobUpdateWithoutTasksInput>, JobUncheckedUpdateWithoutTasksInput>
  }

  export type KeywordUpdateOneWithoutTasksAsSeedNestedInput = {
    create?: XOR<KeywordCreateWithoutTasksAsSeedInput, KeywordUncheckedCreateWithoutTasksAsSeedInput>
    connectOrCreate?: KeywordCreateOrConnectWithoutTasksAsSeedInput
    upsert?: KeywordUpsertWithoutTasksAsSeedInput
    disconnect?: KeywordWhereInput | boolean
    delete?: KeywordWhereInput | boolean
    connect?: KeywordWhereUniqueInput
    update?: XOR<XOR<KeywordUpdateToOneWithWhereWithoutTasksAsSeedInput, KeywordUpdateWithoutTasksAsSeedInput>, KeywordUncheckedUpdateWithoutTasksAsSeedInput>
  }

  export type SerpUpdateManyWithoutTaskNestedInput = {
    create?: XOR<SerpCreateWithoutTaskInput, SerpUncheckedCreateWithoutTaskInput> | SerpCreateWithoutTaskInput[] | SerpUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: SerpCreateOrConnectWithoutTaskInput | SerpCreateOrConnectWithoutTaskInput[]
    upsert?: SerpUpsertWithWhereUniqueWithoutTaskInput | SerpUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: SerpCreateManyTaskInputEnvelope
    set?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    disconnect?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    delete?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    connect?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    update?: SerpUpdateWithWhereUniqueWithoutTaskInput | SerpUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: SerpUpdateManyWithWhereWithoutTaskInput | SerpUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: SerpScalarWhereInput | SerpScalarWhereInput[]
  }

  export type KeywordRelationUpdateManyWithoutTaskNestedInput = {
    create?: XOR<KeywordRelationCreateWithoutTaskInput, KeywordRelationUncheckedCreateWithoutTaskInput> | KeywordRelationCreateWithoutTaskInput[] | KeywordRelationUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: KeywordRelationCreateOrConnectWithoutTaskInput | KeywordRelationCreateOrConnectWithoutTaskInput[]
    upsert?: KeywordRelationUpsertWithWhereUniqueWithoutTaskInput | KeywordRelationUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: KeywordRelationCreateManyTaskInputEnvelope
    set?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    disconnect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    delete?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    connect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    update?: KeywordRelationUpdateWithWhereUniqueWithoutTaskInput | KeywordRelationUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: KeywordRelationUpdateManyWithWhereWithoutTaskInput | KeywordRelationUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: KeywordRelationScalarWhereInput | KeywordRelationScalarWhereInput[]
  }

  export type RelatedResultUpdateManyWithoutTaskNestedInput = {
    create?: XOR<RelatedResultCreateWithoutTaskInput, RelatedResultUncheckedCreateWithoutTaskInput> | RelatedResultCreateWithoutTaskInput[] | RelatedResultUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: RelatedResultCreateOrConnectWithoutTaskInput | RelatedResultCreateOrConnectWithoutTaskInput[]
    upsert?: RelatedResultUpsertWithWhereUniqueWithoutTaskInput | RelatedResultUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: RelatedResultCreateManyTaskInputEnvelope
    set?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    disconnect?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    delete?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    connect?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    update?: RelatedResultUpdateWithWhereUniqueWithoutTaskInput | RelatedResultUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: RelatedResultUpdateManyWithWhereWithoutTaskInput | RelatedResultUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: RelatedResultScalarWhereInput | RelatedResultScalarWhereInput[]
  }

  export type SerpUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<SerpCreateWithoutTaskInput, SerpUncheckedCreateWithoutTaskInput> | SerpCreateWithoutTaskInput[] | SerpUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: SerpCreateOrConnectWithoutTaskInput | SerpCreateOrConnectWithoutTaskInput[]
    upsert?: SerpUpsertWithWhereUniqueWithoutTaskInput | SerpUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: SerpCreateManyTaskInputEnvelope
    set?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    disconnect?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    delete?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    connect?: SerpWhereUniqueInput | SerpWhereUniqueInput[]
    update?: SerpUpdateWithWhereUniqueWithoutTaskInput | SerpUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: SerpUpdateManyWithWhereWithoutTaskInput | SerpUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: SerpScalarWhereInput | SerpScalarWhereInput[]
  }

  export type KeywordRelationUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<KeywordRelationCreateWithoutTaskInput, KeywordRelationUncheckedCreateWithoutTaskInput> | KeywordRelationCreateWithoutTaskInput[] | KeywordRelationUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: KeywordRelationCreateOrConnectWithoutTaskInput | KeywordRelationCreateOrConnectWithoutTaskInput[]
    upsert?: KeywordRelationUpsertWithWhereUniqueWithoutTaskInput | KeywordRelationUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: KeywordRelationCreateManyTaskInputEnvelope
    set?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    disconnect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    delete?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    connect?: KeywordRelationWhereUniqueInput | KeywordRelationWhereUniqueInput[]
    update?: KeywordRelationUpdateWithWhereUniqueWithoutTaskInput | KeywordRelationUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: KeywordRelationUpdateManyWithWhereWithoutTaskInput | KeywordRelationUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: KeywordRelationScalarWhereInput | KeywordRelationScalarWhereInput[]
  }

  export type RelatedResultUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<RelatedResultCreateWithoutTaskInput, RelatedResultUncheckedCreateWithoutTaskInput> | RelatedResultCreateWithoutTaskInput[] | RelatedResultUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: RelatedResultCreateOrConnectWithoutTaskInput | RelatedResultCreateOrConnectWithoutTaskInput[]
    upsert?: RelatedResultUpsertWithWhereUniqueWithoutTaskInput | RelatedResultUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: RelatedResultCreateManyTaskInputEnvelope
    set?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    disconnect?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    delete?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    connect?: RelatedResultWhereUniqueInput | RelatedResultWhereUniqueInput[]
    update?: RelatedResultUpdateWithWhereUniqueWithoutTaskInput | RelatedResultUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: RelatedResultUpdateManyWithWhereWithoutTaskInput | RelatedResultUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: RelatedResultScalarWhereInput | RelatedResultScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type TaskCreateWithoutJobInput = {
    id: string
    keyword: string
    statusFromApi?: string | null
    receivedTimestamp?: Date | string
    resultStatusCode?: number | null
    resultStatusMessage?: string | null
    resultTime?: string | null
    resultCost?: number | null
    resultCount?: number | null
    path?: TaskCreatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: string | null
    searchEngine?: string | null
    languageCode?: string | null
    device?: string | null
    os?: string | null
    depth?: number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    seedKeyword?: KeywordCreateNestedOneWithoutTasksAsSeedInput
    serps?: SerpCreateNestedManyWithoutTaskInput
    keywordRelations?: KeywordRelationCreateNestedManyWithoutTaskInput
    relatedResults?: RelatedResultCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutJobInput = {
    id: string
    seedKeywordId?: string | null
    keyword: string
    statusFromApi?: string | null
    receivedTimestamp?: Date | string
    resultStatusCode?: number | null
    resultStatusMessage?: string | null
    resultTime?: string | null
    resultCost?: number | null
    resultCount?: number | null
    path?: TaskCreatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: string | null
    searchEngine?: string | null
    languageCode?: string | null
    device?: string | null
    os?: string | null
    depth?: number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpUncheckedCreateNestedManyWithoutTaskInput
    keywordRelations?: KeywordRelationUncheckedCreateNestedManyWithoutTaskInput
    relatedResults?: RelatedResultUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutJobInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutJobInput, TaskUncheckedCreateWithoutJobInput>
  }

  export type TaskCreateManyJobInputEnvelope = {
    data: TaskCreateManyJobInput | TaskCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type TaskUpsertWithWhereUniqueWithoutJobInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutJobInput, TaskUncheckedUpdateWithoutJobInput>
    create: XOR<TaskCreateWithoutJobInput, TaskUncheckedCreateWithoutJobInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutJobInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutJobInput, TaskUncheckedUpdateWithoutJobInput>
  }

  export type TaskUpdateManyWithWhereWithoutJobInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutJobInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: StringFilter<"Task"> | string
    jobId?: StringFilter<"Task"> | string
    seedKeywordId?: StringNullableFilter<"Task"> | string | null
    keyword?: StringFilter<"Task"> | string
    statusFromApi?: StringNullableFilter<"Task"> | string | null
    receivedTimestamp?: DateTimeFilter<"Task"> | Date | string
    resultStatusCode?: IntNullableFilter<"Task"> | number | null
    resultStatusMessage?: StringNullableFilter<"Task"> | string | null
    resultTime?: StringNullableFilter<"Task"> | string | null
    resultCost?: FloatNullableFilter<"Task"> | number | null
    resultCount?: IntNullableFilter<"Task"> | number | null
    path?: StringNullableListFilter<"Task">
    resultPath?: JsonNullableFilter<"Task">
    location?: StringNullableFilter<"Task"> | string | null
    searchEngine?: StringNullableFilter<"Task"> | string | null
    languageCode?: StringNullableFilter<"Task"> | string | null
    device?: StringNullableFilter<"Task"> | string | null
    os?: StringNullableFilter<"Task"> | string | null
    depth?: IntNullableFilter<"Task"> | number | null
    errorDetails?: JsonNullableFilter<"Task">
    resultData?: JsonNullableFilter<"Task">
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
  }

  export type KeywordCreateWithoutKeywordProfilesInput = {
    id?: string
    text: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiKeywordDifficulty?: number | null
    kiMainIntent?: string | null
    kiLastUpdatedKeywordInfo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpCreateNestedManyWithoutKeywordInput
    tasksAsSeed?: TaskCreateNestedManyWithoutSeedKeywordInput
    relationsAsSeed?: KeywordRelationCreateNestedManyWithoutSeedKeywordInput
    relationsAsRelated?: KeywordRelationCreateNestedManyWithoutRelatedKeywordInput
    relatedResults?: RelatedResultCreateNestedManyWithoutSeedKeywordInput
  }

  export type KeywordUncheckedCreateWithoutKeywordProfilesInput = {
    id?: string
    text: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiKeywordDifficulty?: number | null
    kiMainIntent?: string | null
    kiLastUpdatedKeywordInfo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpUncheckedCreateNestedManyWithoutKeywordInput
    tasksAsSeed?: TaskUncheckedCreateNestedManyWithoutSeedKeywordInput
    relationsAsSeed?: KeywordRelationUncheckedCreateNestedManyWithoutSeedKeywordInput
    relationsAsRelated?: KeywordRelationUncheckedCreateNestedManyWithoutRelatedKeywordInput
    relatedResults?: RelatedResultUncheckedCreateNestedManyWithoutSeedKeywordInput
  }

  export type KeywordCreateOrConnectWithoutKeywordProfilesInput = {
    where: KeywordWhereUniqueInput
    create: XOR<KeywordCreateWithoutKeywordProfilesInput, KeywordUncheckedCreateWithoutKeywordProfilesInput>
  }

  export type KeywordUpsertWithoutKeywordProfilesInput = {
    update: XOR<KeywordUpdateWithoutKeywordProfilesInput, KeywordUncheckedUpdateWithoutKeywordProfilesInput>
    create: XOR<KeywordCreateWithoutKeywordProfilesInput, KeywordUncheckedCreateWithoutKeywordProfilesInput>
    where?: KeywordWhereInput
  }

  export type KeywordUpdateToOneWithWhereWithoutKeywordProfilesInput = {
    where?: KeywordWhereInput
    data: XOR<KeywordUpdateWithoutKeywordProfilesInput, KeywordUncheckedUpdateWithoutKeywordProfilesInput>
  }

  export type KeywordUpdateWithoutKeywordProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUpdateManyWithoutKeywordNestedInput
    tasksAsSeed?: TaskUpdateManyWithoutSeedKeywordNestedInput
    relationsAsSeed?: KeywordRelationUpdateManyWithoutSeedKeywordNestedInput
    relationsAsRelated?: KeywordRelationUpdateManyWithoutRelatedKeywordNestedInput
    relatedResults?: RelatedResultUpdateManyWithoutSeedKeywordNestedInput
  }

  export type KeywordUncheckedUpdateWithoutKeywordProfilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUncheckedUpdateManyWithoutKeywordNestedInput
    tasksAsSeed?: TaskUncheckedUpdateManyWithoutSeedKeywordNestedInput
    relationsAsSeed?: KeywordRelationUncheckedUpdateManyWithoutSeedKeywordNestedInput
    relationsAsRelated?: KeywordRelationUncheckedUpdateManyWithoutRelatedKeywordNestedInput
    relatedResults?: RelatedResultUncheckedUpdateManyWithoutSeedKeywordNestedInput
  }

  export type KeywordCreateWithoutRelationsAsSeedInput = {
    id?: string
    text: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiKeywordDifficulty?: number | null
    kiMainIntent?: string | null
    kiLastUpdatedKeywordInfo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpCreateNestedManyWithoutKeywordInput
    tasksAsSeed?: TaskCreateNestedManyWithoutSeedKeywordInput
    relationsAsRelated?: KeywordRelationCreateNestedManyWithoutRelatedKeywordInput
    relatedResults?: RelatedResultCreateNestedManyWithoutSeedKeywordInput
    keywordProfiles?: KeywordProfileCreateNestedManyWithoutKeywordInput
  }

  export type KeywordUncheckedCreateWithoutRelationsAsSeedInput = {
    id?: string
    text: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiKeywordDifficulty?: number | null
    kiMainIntent?: string | null
    kiLastUpdatedKeywordInfo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpUncheckedCreateNestedManyWithoutKeywordInput
    tasksAsSeed?: TaskUncheckedCreateNestedManyWithoutSeedKeywordInput
    relationsAsRelated?: KeywordRelationUncheckedCreateNestedManyWithoutRelatedKeywordInput
    relatedResults?: RelatedResultUncheckedCreateNestedManyWithoutSeedKeywordInput
    keywordProfiles?: KeywordProfileUncheckedCreateNestedManyWithoutKeywordInput
  }

  export type KeywordCreateOrConnectWithoutRelationsAsSeedInput = {
    where: KeywordWhereUniqueInput
    create: XOR<KeywordCreateWithoutRelationsAsSeedInput, KeywordUncheckedCreateWithoutRelationsAsSeedInput>
  }

  export type KeywordCreateWithoutRelationsAsRelatedInput = {
    id?: string
    text: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiKeywordDifficulty?: number | null
    kiMainIntent?: string | null
    kiLastUpdatedKeywordInfo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpCreateNestedManyWithoutKeywordInput
    tasksAsSeed?: TaskCreateNestedManyWithoutSeedKeywordInput
    relationsAsSeed?: KeywordRelationCreateNestedManyWithoutSeedKeywordInput
    relatedResults?: RelatedResultCreateNestedManyWithoutSeedKeywordInput
    keywordProfiles?: KeywordProfileCreateNestedManyWithoutKeywordInput
  }

  export type KeywordUncheckedCreateWithoutRelationsAsRelatedInput = {
    id?: string
    text: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiKeywordDifficulty?: number | null
    kiMainIntent?: string | null
    kiLastUpdatedKeywordInfo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpUncheckedCreateNestedManyWithoutKeywordInput
    tasksAsSeed?: TaskUncheckedCreateNestedManyWithoutSeedKeywordInput
    relationsAsSeed?: KeywordRelationUncheckedCreateNestedManyWithoutSeedKeywordInput
    relatedResults?: RelatedResultUncheckedCreateNestedManyWithoutSeedKeywordInput
    keywordProfiles?: KeywordProfileUncheckedCreateNestedManyWithoutKeywordInput
  }

  export type KeywordCreateOrConnectWithoutRelationsAsRelatedInput = {
    where: KeywordWhereUniqueInput
    create: XOR<KeywordCreateWithoutRelationsAsRelatedInput, KeywordUncheckedCreateWithoutRelationsAsRelatedInput>
  }

  export type TaskCreateWithoutKeywordRelationsInput = {
    id: string
    keyword: string
    statusFromApi?: string | null
    receivedTimestamp?: Date | string
    resultStatusCode?: number | null
    resultStatusMessage?: string | null
    resultTime?: string | null
    resultCost?: number | null
    resultCount?: number | null
    path?: TaskCreatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: string | null
    searchEngine?: string | null
    languageCode?: string | null
    device?: string | null
    os?: string | null
    depth?: number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutTasksInput
    seedKeyword?: KeywordCreateNestedOneWithoutTasksAsSeedInput
    serps?: SerpCreateNestedManyWithoutTaskInput
    relatedResults?: RelatedResultCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutKeywordRelationsInput = {
    id: string
    jobId: string
    seedKeywordId?: string | null
    keyword: string
    statusFromApi?: string | null
    receivedTimestamp?: Date | string
    resultStatusCode?: number | null
    resultStatusMessage?: string | null
    resultTime?: string | null
    resultCost?: number | null
    resultCount?: number | null
    path?: TaskCreatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: string | null
    searchEngine?: string | null
    languageCode?: string | null
    device?: string | null
    os?: string | null
    depth?: number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpUncheckedCreateNestedManyWithoutTaskInput
    relatedResults?: RelatedResultUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutKeywordRelationsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutKeywordRelationsInput, TaskUncheckedCreateWithoutKeywordRelationsInput>
  }

  export type KeywordUpsertWithoutRelationsAsSeedInput = {
    update: XOR<KeywordUpdateWithoutRelationsAsSeedInput, KeywordUncheckedUpdateWithoutRelationsAsSeedInput>
    create: XOR<KeywordCreateWithoutRelationsAsSeedInput, KeywordUncheckedCreateWithoutRelationsAsSeedInput>
    where?: KeywordWhereInput
  }

  export type KeywordUpdateToOneWithWhereWithoutRelationsAsSeedInput = {
    where?: KeywordWhereInput
    data: XOR<KeywordUpdateWithoutRelationsAsSeedInput, KeywordUncheckedUpdateWithoutRelationsAsSeedInput>
  }

  export type KeywordUpdateWithoutRelationsAsSeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUpdateManyWithoutKeywordNestedInput
    tasksAsSeed?: TaskUpdateManyWithoutSeedKeywordNestedInput
    relationsAsRelated?: KeywordRelationUpdateManyWithoutRelatedKeywordNestedInput
    relatedResults?: RelatedResultUpdateManyWithoutSeedKeywordNestedInput
    keywordProfiles?: KeywordProfileUpdateManyWithoutKeywordNestedInput
  }

  export type KeywordUncheckedUpdateWithoutRelationsAsSeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUncheckedUpdateManyWithoutKeywordNestedInput
    tasksAsSeed?: TaskUncheckedUpdateManyWithoutSeedKeywordNestedInput
    relationsAsRelated?: KeywordRelationUncheckedUpdateManyWithoutRelatedKeywordNestedInput
    relatedResults?: RelatedResultUncheckedUpdateManyWithoutSeedKeywordNestedInput
    keywordProfiles?: KeywordProfileUncheckedUpdateManyWithoutKeywordNestedInput
  }

  export type KeywordUpsertWithoutRelationsAsRelatedInput = {
    update: XOR<KeywordUpdateWithoutRelationsAsRelatedInput, KeywordUncheckedUpdateWithoutRelationsAsRelatedInput>
    create: XOR<KeywordCreateWithoutRelationsAsRelatedInput, KeywordUncheckedCreateWithoutRelationsAsRelatedInput>
    where?: KeywordWhereInput
  }

  export type KeywordUpdateToOneWithWhereWithoutRelationsAsRelatedInput = {
    where?: KeywordWhereInput
    data: XOR<KeywordUpdateWithoutRelationsAsRelatedInput, KeywordUncheckedUpdateWithoutRelationsAsRelatedInput>
  }

  export type KeywordUpdateWithoutRelationsAsRelatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUpdateManyWithoutKeywordNestedInput
    tasksAsSeed?: TaskUpdateManyWithoutSeedKeywordNestedInput
    relationsAsSeed?: KeywordRelationUpdateManyWithoutSeedKeywordNestedInput
    relatedResults?: RelatedResultUpdateManyWithoutSeedKeywordNestedInput
    keywordProfiles?: KeywordProfileUpdateManyWithoutKeywordNestedInput
  }

  export type KeywordUncheckedUpdateWithoutRelationsAsRelatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUncheckedUpdateManyWithoutKeywordNestedInput
    tasksAsSeed?: TaskUncheckedUpdateManyWithoutSeedKeywordNestedInput
    relationsAsSeed?: KeywordRelationUncheckedUpdateManyWithoutSeedKeywordNestedInput
    relatedResults?: RelatedResultUncheckedUpdateManyWithoutSeedKeywordNestedInput
    keywordProfiles?: KeywordProfileUncheckedUpdateManyWithoutKeywordNestedInput
  }

  export type TaskUpsertWithoutKeywordRelationsInput = {
    update: XOR<TaskUpdateWithoutKeywordRelationsInput, TaskUncheckedUpdateWithoutKeywordRelationsInput>
    create: XOR<TaskCreateWithoutKeywordRelationsInput, TaskUncheckedCreateWithoutKeywordRelationsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutKeywordRelationsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutKeywordRelationsInput, TaskUncheckedUpdateWithoutKeywordRelationsInput>
  }

  export type TaskUpdateWithoutKeywordRelationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutTasksNestedInput
    seedKeyword?: KeywordUpdateOneWithoutTasksAsSeedNestedInput
    serps?: SerpUpdateManyWithoutTaskNestedInput
    relatedResults?: RelatedResultUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutKeywordRelationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: NullableStringFieldUpdateOperationsInput | string | null
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUncheckedUpdateManyWithoutTaskNestedInput
    relatedResults?: RelatedResultUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type SerpCreateWithoutKeywordInput = {
    id?: string
    type?: string | null
    seDomain?: string | null
    locationCode?: number | null
    languageCode?: string | null
    checkUrl?: string | null
    fetchTimestampFromApi?: Date | string | null
    itemTypes?: SerpCreateitemTypesInput | string[]
    seResultsCount?: bigint | number | null
    itemsCount?: number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    task: TaskCreateNestedOneWithoutSerpsInput
    result?: ResultCreateNestedManyWithoutSerpInput
  }

  export type SerpUncheckedCreateWithoutKeywordInput = {
    id?: string
    taskId: string
    type?: string | null
    seDomain?: string | null
    locationCode?: number | null
    languageCode?: string | null
    checkUrl?: string | null
    fetchTimestampFromApi?: Date | string | null
    itemTypes?: SerpCreateitemTypesInput | string[]
    seResultsCount?: bigint | number | null
    itemsCount?: number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    result?: ResultUncheckedCreateNestedManyWithoutSerpInput
  }

  export type SerpCreateOrConnectWithoutKeywordInput = {
    where: SerpWhereUniqueInput
    create: XOR<SerpCreateWithoutKeywordInput, SerpUncheckedCreateWithoutKeywordInput>
  }

  export type SerpCreateManyKeywordInputEnvelope = {
    data: SerpCreateManyKeywordInput | SerpCreateManyKeywordInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutSeedKeywordInput = {
    id: string
    keyword: string
    statusFromApi?: string | null
    receivedTimestamp?: Date | string
    resultStatusCode?: number | null
    resultStatusMessage?: string | null
    resultTime?: string | null
    resultCost?: number | null
    resultCount?: number | null
    path?: TaskCreatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: string | null
    searchEngine?: string | null
    languageCode?: string | null
    device?: string | null
    os?: string | null
    depth?: number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutTasksInput
    serps?: SerpCreateNestedManyWithoutTaskInput
    keywordRelations?: KeywordRelationCreateNestedManyWithoutTaskInput
    relatedResults?: RelatedResultCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutSeedKeywordInput = {
    id: string
    jobId: string
    keyword: string
    statusFromApi?: string | null
    receivedTimestamp?: Date | string
    resultStatusCode?: number | null
    resultStatusMessage?: string | null
    resultTime?: string | null
    resultCost?: number | null
    resultCount?: number | null
    path?: TaskCreatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: string | null
    searchEngine?: string | null
    languageCode?: string | null
    device?: string | null
    os?: string | null
    depth?: number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpUncheckedCreateNestedManyWithoutTaskInput
    keywordRelations?: KeywordRelationUncheckedCreateNestedManyWithoutTaskInput
    relatedResults?: RelatedResultUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutSeedKeywordInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutSeedKeywordInput, TaskUncheckedCreateWithoutSeedKeywordInput>
  }

  export type TaskCreateManySeedKeywordInputEnvelope = {
    data: TaskCreateManySeedKeywordInput | TaskCreateManySeedKeywordInput[]
    skipDuplicates?: boolean
  }

  export type KeywordRelationCreateWithoutSeedKeywordInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    relatedKeyword: KeywordCreateNestedOneWithoutRelationsAsRelatedInput
    task: TaskCreateNestedOneWithoutKeywordRelationsInput
  }

  export type KeywordRelationUncheckedCreateWithoutSeedKeywordInput = {
    id?: string
    relatedKeywordId: string
    taskId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeywordRelationCreateOrConnectWithoutSeedKeywordInput = {
    where: KeywordRelationWhereUniqueInput
    create: XOR<KeywordRelationCreateWithoutSeedKeywordInput, KeywordRelationUncheckedCreateWithoutSeedKeywordInput>
  }

  export type KeywordRelationCreateManySeedKeywordInputEnvelope = {
    data: KeywordRelationCreateManySeedKeywordInput | KeywordRelationCreateManySeedKeywordInput[]
    skipDuplicates?: boolean
  }

  export type KeywordRelationCreateWithoutRelatedKeywordInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    seedKeyword: KeywordCreateNestedOneWithoutRelationsAsSeedInput
    task: TaskCreateNestedOneWithoutKeywordRelationsInput
  }

  export type KeywordRelationUncheckedCreateWithoutRelatedKeywordInput = {
    id?: string
    seedKeywordId: string
    taskId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeywordRelationCreateOrConnectWithoutRelatedKeywordInput = {
    where: KeywordRelationWhereUniqueInput
    create: XOR<KeywordRelationCreateWithoutRelatedKeywordInput, KeywordRelationUncheckedCreateWithoutRelatedKeywordInput>
  }

  export type KeywordRelationCreateManyRelatedKeywordInputEnvelope = {
    data: KeywordRelationCreateManyRelatedKeywordInput | KeywordRelationCreateManyRelatedKeywordInput[]
    skipDuplicates?: boolean
  }

  export type RelatedResultCreateWithoutSeedKeywordInput = {
    id?: string
    seType?: string | null
    seedKeywords?: RelatedResultCreateseedKeywordsInput | string[]
    locationCode?: number | null
    languageCode?: string | null
    totalCount?: bigint | number | null
    itemsCount?: number | null
    offset?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    task: TaskCreateNestedOneWithoutRelatedResultsInput
  }

  export type RelatedResultUncheckedCreateWithoutSeedKeywordInput = {
    id?: string
    taskId: string
    seType?: string | null
    seedKeywords?: RelatedResultCreateseedKeywordsInput | string[]
    locationCode?: number | null
    languageCode?: string | null
    totalCount?: bigint | number | null
    itemsCount?: number | null
    offset?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RelatedResultCreateOrConnectWithoutSeedKeywordInput = {
    where: RelatedResultWhereUniqueInput
    create: XOR<RelatedResultCreateWithoutSeedKeywordInput, RelatedResultUncheckedCreateWithoutSeedKeywordInput>
  }

  export type RelatedResultCreateManySeedKeywordInputEnvelope = {
    data: RelatedResultCreateManySeedKeywordInput | RelatedResultCreateManySeedKeywordInput[]
    skipDuplicates?: boolean
  }

  export type KeywordProfileCreateWithoutKeywordInput = {
    id?: string
    locationCode: number
    languageCode: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiCategories?: KeywordProfileCreatekiCategoriesInput | number[]
    kiMonthlySearches?: NullableJsonNullValueInput | InputJsonValue
    kpSynonymClusteringAlgorithm?: string | null
    kpKeywordDifficulty?: number | null
    kpDetectedLanguage?: string | null
    kpIsAnotherLanguage?: boolean | null
    avgBacklinks?: number | null
    avgDofollow?: number | null
    avgReferringPages?: number | null
    avgReferringDomains?: number | null
    avgReferringMainDomains?: number | null
    avgRank?: number | null
    avgMainDomainRank?: number | null
    avgLastUpdatedTime?: Date | string | null
    siMainIntent?: string | null
    relatedKeywordIds?: KeywordProfileCreaterelatedKeywordIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeywordProfileUncheckedCreateWithoutKeywordInput = {
    id?: string
    locationCode: number
    languageCode: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiCategories?: KeywordProfileCreatekiCategoriesInput | number[]
    kiMonthlySearches?: NullableJsonNullValueInput | InputJsonValue
    kpSynonymClusteringAlgorithm?: string | null
    kpKeywordDifficulty?: number | null
    kpDetectedLanguage?: string | null
    kpIsAnotherLanguage?: boolean | null
    avgBacklinks?: number | null
    avgDofollow?: number | null
    avgReferringPages?: number | null
    avgReferringDomains?: number | null
    avgReferringMainDomains?: number | null
    avgRank?: number | null
    avgMainDomainRank?: number | null
    avgLastUpdatedTime?: Date | string | null
    siMainIntent?: string | null
    relatedKeywordIds?: KeywordProfileCreaterelatedKeywordIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeywordProfileCreateOrConnectWithoutKeywordInput = {
    where: KeywordProfileWhereUniqueInput
    create: XOR<KeywordProfileCreateWithoutKeywordInput, KeywordProfileUncheckedCreateWithoutKeywordInput>
  }

  export type KeywordProfileCreateManyKeywordInputEnvelope = {
    data: KeywordProfileCreateManyKeywordInput | KeywordProfileCreateManyKeywordInput[]
    skipDuplicates?: boolean
  }

  export type SerpUpsertWithWhereUniqueWithoutKeywordInput = {
    where: SerpWhereUniqueInput
    update: XOR<SerpUpdateWithoutKeywordInput, SerpUncheckedUpdateWithoutKeywordInput>
    create: XOR<SerpCreateWithoutKeywordInput, SerpUncheckedCreateWithoutKeywordInput>
  }

  export type SerpUpdateWithWhereUniqueWithoutKeywordInput = {
    where: SerpWhereUniqueInput
    data: XOR<SerpUpdateWithoutKeywordInput, SerpUncheckedUpdateWithoutKeywordInput>
  }

  export type SerpUpdateManyWithWhereWithoutKeywordInput = {
    where: SerpScalarWhereInput
    data: XOR<SerpUpdateManyMutationInput, SerpUncheckedUpdateManyWithoutKeywordInput>
  }

  export type SerpScalarWhereInput = {
    AND?: SerpScalarWhereInput | SerpScalarWhereInput[]
    OR?: SerpScalarWhereInput[]
    NOT?: SerpScalarWhereInput | SerpScalarWhereInput[]
    id?: StringFilter<"Serp"> | string
    taskId?: StringFilter<"Serp"> | string
    keywordId?: StringFilter<"Serp"> | string
    type?: StringNullableFilter<"Serp"> | string | null
    seDomain?: StringNullableFilter<"Serp"> | string | null
    locationCode?: IntNullableFilter<"Serp"> | number | null
    languageCode?: StringNullableFilter<"Serp"> | string | null
    checkUrl?: StringNullableFilter<"Serp"> | string | null
    fetchTimestampFromApi?: DateTimeNullableFilter<"Serp"> | Date | string | null
    itemTypes?: StringNullableListFilter<"Serp">
    seResultsCount?: BigIntNullableFilter<"Serp"> | bigint | number | null
    itemsCount?: IntNullableFilter<"Serp"> | number | null
    refinementChips?: JsonNullableFilter<"Serp">
    createdAt?: DateTimeFilter<"Serp"> | Date | string
    updatedAt?: DateTimeFilter<"Serp"> | Date | string
  }

  export type TaskUpsertWithWhereUniqueWithoutSeedKeywordInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutSeedKeywordInput, TaskUncheckedUpdateWithoutSeedKeywordInput>
    create: XOR<TaskCreateWithoutSeedKeywordInput, TaskUncheckedCreateWithoutSeedKeywordInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutSeedKeywordInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutSeedKeywordInput, TaskUncheckedUpdateWithoutSeedKeywordInput>
  }

  export type TaskUpdateManyWithWhereWithoutSeedKeywordInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutSeedKeywordInput>
  }

  export type KeywordRelationUpsertWithWhereUniqueWithoutSeedKeywordInput = {
    where: KeywordRelationWhereUniqueInput
    update: XOR<KeywordRelationUpdateWithoutSeedKeywordInput, KeywordRelationUncheckedUpdateWithoutSeedKeywordInput>
    create: XOR<KeywordRelationCreateWithoutSeedKeywordInput, KeywordRelationUncheckedCreateWithoutSeedKeywordInput>
  }

  export type KeywordRelationUpdateWithWhereUniqueWithoutSeedKeywordInput = {
    where: KeywordRelationWhereUniqueInput
    data: XOR<KeywordRelationUpdateWithoutSeedKeywordInput, KeywordRelationUncheckedUpdateWithoutSeedKeywordInput>
  }

  export type KeywordRelationUpdateManyWithWhereWithoutSeedKeywordInput = {
    where: KeywordRelationScalarWhereInput
    data: XOR<KeywordRelationUpdateManyMutationInput, KeywordRelationUncheckedUpdateManyWithoutSeedKeywordInput>
  }

  export type KeywordRelationScalarWhereInput = {
    AND?: KeywordRelationScalarWhereInput | KeywordRelationScalarWhereInput[]
    OR?: KeywordRelationScalarWhereInput[]
    NOT?: KeywordRelationScalarWhereInput | KeywordRelationScalarWhereInput[]
    id?: StringFilter<"KeywordRelation"> | string
    seedKeywordId?: StringFilter<"KeywordRelation"> | string
    relatedKeywordId?: StringFilter<"KeywordRelation"> | string
    taskId?: StringFilter<"KeywordRelation"> | string
    createdAt?: DateTimeFilter<"KeywordRelation"> | Date | string
    updatedAt?: DateTimeFilter<"KeywordRelation"> | Date | string
  }

  export type KeywordRelationUpsertWithWhereUniqueWithoutRelatedKeywordInput = {
    where: KeywordRelationWhereUniqueInput
    update: XOR<KeywordRelationUpdateWithoutRelatedKeywordInput, KeywordRelationUncheckedUpdateWithoutRelatedKeywordInput>
    create: XOR<KeywordRelationCreateWithoutRelatedKeywordInput, KeywordRelationUncheckedCreateWithoutRelatedKeywordInput>
  }

  export type KeywordRelationUpdateWithWhereUniqueWithoutRelatedKeywordInput = {
    where: KeywordRelationWhereUniqueInput
    data: XOR<KeywordRelationUpdateWithoutRelatedKeywordInput, KeywordRelationUncheckedUpdateWithoutRelatedKeywordInput>
  }

  export type KeywordRelationUpdateManyWithWhereWithoutRelatedKeywordInput = {
    where: KeywordRelationScalarWhereInput
    data: XOR<KeywordRelationUpdateManyMutationInput, KeywordRelationUncheckedUpdateManyWithoutRelatedKeywordInput>
  }

  export type RelatedResultUpsertWithWhereUniqueWithoutSeedKeywordInput = {
    where: RelatedResultWhereUniqueInput
    update: XOR<RelatedResultUpdateWithoutSeedKeywordInput, RelatedResultUncheckedUpdateWithoutSeedKeywordInput>
    create: XOR<RelatedResultCreateWithoutSeedKeywordInput, RelatedResultUncheckedCreateWithoutSeedKeywordInput>
  }

  export type RelatedResultUpdateWithWhereUniqueWithoutSeedKeywordInput = {
    where: RelatedResultWhereUniqueInput
    data: XOR<RelatedResultUpdateWithoutSeedKeywordInput, RelatedResultUncheckedUpdateWithoutSeedKeywordInput>
  }

  export type RelatedResultUpdateManyWithWhereWithoutSeedKeywordInput = {
    where: RelatedResultScalarWhereInput
    data: XOR<RelatedResultUpdateManyMutationInput, RelatedResultUncheckedUpdateManyWithoutSeedKeywordInput>
  }

  export type RelatedResultScalarWhereInput = {
    AND?: RelatedResultScalarWhereInput | RelatedResultScalarWhereInput[]
    OR?: RelatedResultScalarWhereInput[]
    NOT?: RelatedResultScalarWhereInput | RelatedResultScalarWhereInput[]
    id?: StringFilter<"RelatedResult"> | string
    taskId?: StringFilter<"RelatedResult"> | string
    seedKeywordId?: StringFilter<"RelatedResult"> | string
    seType?: StringNullableFilter<"RelatedResult"> | string | null
    seedKeywords?: StringNullableListFilter<"RelatedResult">
    locationCode?: IntNullableFilter<"RelatedResult"> | number | null
    languageCode?: StringNullableFilter<"RelatedResult"> | string | null
    totalCount?: BigIntNullableFilter<"RelatedResult"> | bigint | number | null
    itemsCount?: IntNullableFilter<"RelatedResult"> | number | null
    offset?: IntNullableFilter<"RelatedResult"> | number | null
    createdAt?: DateTimeFilter<"RelatedResult"> | Date | string
    updatedAt?: DateTimeFilter<"RelatedResult"> | Date | string
  }

  export type KeywordProfileUpsertWithWhereUniqueWithoutKeywordInput = {
    where: KeywordProfileWhereUniqueInput
    update: XOR<KeywordProfileUpdateWithoutKeywordInput, KeywordProfileUncheckedUpdateWithoutKeywordInput>
    create: XOR<KeywordProfileCreateWithoutKeywordInput, KeywordProfileUncheckedCreateWithoutKeywordInput>
  }

  export type KeywordProfileUpdateWithWhereUniqueWithoutKeywordInput = {
    where: KeywordProfileWhereUniqueInput
    data: XOR<KeywordProfileUpdateWithoutKeywordInput, KeywordProfileUncheckedUpdateWithoutKeywordInput>
  }

  export type KeywordProfileUpdateManyWithWhereWithoutKeywordInput = {
    where: KeywordProfileScalarWhereInput
    data: XOR<KeywordProfileUpdateManyMutationInput, KeywordProfileUncheckedUpdateManyWithoutKeywordInput>
  }

  export type KeywordProfileScalarWhereInput = {
    AND?: KeywordProfileScalarWhereInput | KeywordProfileScalarWhereInput[]
    OR?: KeywordProfileScalarWhereInput[]
    NOT?: KeywordProfileScalarWhereInput | KeywordProfileScalarWhereInput[]
    id?: StringFilter<"KeywordProfile"> | string
    keywordId?: StringFilter<"KeywordProfile"> | string
    locationCode?: IntFilter<"KeywordProfile"> | number
    languageCode?: StringFilter<"KeywordProfile"> | string
    kiLastCheck?: DateTimeNullableFilter<"KeywordProfile"> | Date | string | null
    kiCompetition?: FloatNullableFilter<"KeywordProfile"> | number | null
    kiCompetitionLevel?: StringNullableFilter<"KeywordProfile"> | string | null
    kiCpc?: FloatNullableFilter<"KeywordProfile"> | number | null
    kiSearchVolume?: IntNullableFilter<"KeywordProfile"> | number | null
    kiLowTopOfPageBid?: FloatNullableFilter<"KeywordProfile"> | number | null
    kiHighTopOfPageBid?: FloatNullableFilter<"KeywordProfile"> | number | null
    kiCategories?: IntNullableListFilter<"KeywordProfile">
    kiMonthlySearches?: JsonNullableFilter<"KeywordProfile">
    kpSynonymClusteringAlgorithm?: StringNullableFilter<"KeywordProfile"> | string | null
    kpKeywordDifficulty?: IntNullableFilter<"KeywordProfile"> | number | null
    kpDetectedLanguage?: StringNullableFilter<"KeywordProfile"> | string | null
    kpIsAnotherLanguage?: BoolNullableFilter<"KeywordProfile"> | boolean | null
    avgBacklinks?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgDofollow?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgReferringPages?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgReferringDomains?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgReferringMainDomains?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgRank?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgMainDomainRank?: FloatNullableFilter<"KeywordProfile"> | number | null
    avgLastUpdatedTime?: DateTimeNullableFilter<"KeywordProfile"> | Date | string | null
    siMainIntent?: StringNullableFilter<"KeywordProfile"> | string | null
    relatedKeywordIds?: StringNullableListFilter<"KeywordProfile">
    createdAt?: DateTimeFilter<"KeywordProfile"> | Date | string
    updatedAt?: DateTimeFilter<"KeywordProfile"> | Date | string
  }

  export type TaskCreateWithoutRelatedResultsInput = {
    id: string
    keyword: string
    statusFromApi?: string | null
    receivedTimestamp?: Date | string
    resultStatusCode?: number | null
    resultStatusMessage?: string | null
    resultTime?: string | null
    resultCost?: number | null
    resultCount?: number | null
    path?: TaskCreatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: string | null
    searchEngine?: string | null
    languageCode?: string | null
    device?: string | null
    os?: string | null
    depth?: number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutTasksInput
    seedKeyword?: KeywordCreateNestedOneWithoutTasksAsSeedInput
    serps?: SerpCreateNestedManyWithoutTaskInput
    keywordRelations?: KeywordRelationCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutRelatedResultsInput = {
    id: string
    jobId: string
    seedKeywordId?: string | null
    keyword: string
    statusFromApi?: string | null
    receivedTimestamp?: Date | string
    resultStatusCode?: number | null
    resultStatusMessage?: string | null
    resultTime?: string | null
    resultCost?: number | null
    resultCount?: number | null
    path?: TaskCreatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: string | null
    searchEngine?: string | null
    languageCode?: string | null
    device?: string | null
    os?: string | null
    depth?: number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpUncheckedCreateNestedManyWithoutTaskInput
    keywordRelations?: KeywordRelationUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutRelatedResultsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutRelatedResultsInput, TaskUncheckedCreateWithoutRelatedResultsInput>
  }

  export type KeywordCreateWithoutRelatedResultsInput = {
    id?: string
    text: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiKeywordDifficulty?: number | null
    kiMainIntent?: string | null
    kiLastUpdatedKeywordInfo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpCreateNestedManyWithoutKeywordInput
    tasksAsSeed?: TaskCreateNestedManyWithoutSeedKeywordInput
    relationsAsSeed?: KeywordRelationCreateNestedManyWithoutSeedKeywordInput
    relationsAsRelated?: KeywordRelationCreateNestedManyWithoutRelatedKeywordInput
    keywordProfiles?: KeywordProfileCreateNestedManyWithoutKeywordInput
  }

  export type KeywordUncheckedCreateWithoutRelatedResultsInput = {
    id?: string
    text: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiKeywordDifficulty?: number | null
    kiMainIntent?: string | null
    kiLastUpdatedKeywordInfo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpUncheckedCreateNestedManyWithoutKeywordInput
    tasksAsSeed?: TaskUncheckedCreateNestedManyWithoutSeedKeywordInput
    relationsAsSeed?: KeywordRelationUncheckedCreateNestedManyWithoutSeedKeywordInput
    relationsAsRelated?: KeywordRelationUncheckedCreateNestedManyWithoutRelatedKeywordInput
    keywordProfiles?: KeywordProfileUncheckedCreateNestedManyWithoutKeywordInput
  }

  export type KeywordCreateOrConnectWithoutRelatedResultsInput = {
    where: KeywordWhereUniqueInput
    create: XOR<KeywordCreateWithoutRelatedResultsInput, KeywordUncheckedCreateWithoutRelatedResultsInput>
  }

  export type TaskUpsertWithoutRelatedResultsInput = {
    update: XOR<TaskUpdateWithoutRelatedResultsInput, TaskUncheckedUpdateWithoutRelatedResultsInput>
    create: XOR<TaskCreateWithoutRelatedResultsInput, TaskUncheckedCreateWithoutRelatedResultsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutRelatedResultsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutRelatedResultsInput, TaskUncheckedUpdateWithoutRelatedResultsInput>
  }

  export type TaskUpdateWithoutRelatedResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutTasksNestedInput
    seedKeyword?: KeywordUpdateOneWithoutTasksAsSeedNestedInput
    serps?: SerpUpdateManyWithoutTaskNestedInput
    keywordRelations?: KeywordRelationUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutRelatedResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: NullableStringFieldUpdateOperationsInput | string | null
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUncheckedUpdateManyWithoutTaskNestedInput
    keywordRelations?: KeywordRelationUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type KeywordUpsertWithoutRelatedResultsInput = {
    update: XOR<KeywordUpdateWithoutRelatedResultsInput, KeywordUncheckedUpdateWithoutRelatedResultsInput>
    create: XOR<KeywordCreateWithoutRelatedResultsInput, KeywordUncheckedCreateWithoutRelatedResultsInput>
    where?: KeywordWhereInput
  }

  export type KeywordUpdateToOneWithWhereWithoutRelatedResultsInput = {
    where?: KeywordWhereInput
    data: XOR<KeywordUpdateWithoutRelatedResultsInput, KeywordUncheckedUpdateWithoutRelatedResultsInput>
  }

  export type KeywordUpdateWithoutRelatedResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUpdateManyWithoutKeywordNestedInput
    tasksAsSeed?: TaskUpdateManyWithoutSeedKeywordNestedInput
    relationsAsSeed?: KeywordRelationUpdateManyWithoutSeedKeywordNestedInput
    relationsAsRelated?: KeywordRelationUpdateManyWithoutRelatedKeywordNestedInput
    keywordProfiles?: KeywordProfileUpdateManyWithoutKeywordNestedInput
  }

  export type KeywordUncheckedUpdateWithoutRelatedResultsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUncheckedUpdateManyWithoutKeywordNestedInput
    tasksAsSeed?: TaskUncheckedUpdateManyWithoutSeedKeywordNestedInput
    relationsAsSeed?: KeywordRelationUncheckedUpdateManyWithoutSeedKeywordNestedInput
    relationsAsRelated?: KeywordRelationUncheckedUpdateManyWithoutRelatedKeywordNestedInput
    keywordProfiles?: KeywordProfileUncheckedUpdateManyWithoutKeywordNestedInput
  }

  export type SerpCreateWithoutResultInput = {
    id?: string
    type?: string | null
    seDomain?: string | null
    locationCode?: number | null
    languageCode?: string | null
    checkUrl?: string | null
    fetchTimestampFromApi?: Date | string | null
    itemTypes?: SerpCreateitemTypesInput | string[]
    seResultsCount?: bigint | number | null
    itemsCount?: number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    task: TaskCreateNestedOneWithoutSerpsInput
    keyword: KeywordCreateNestedOneWithoutSerpsInput
  }

  export type SerpUncheckedCreateWithoutResultInput = {
    id?: string
    taskId: string
    keywordId: string
    type?: string | null
    seDomain?: string | null
    locationCode?: number | null
    languageCode?: string | null
    checkUrl?: string | null
    fetchTimestampFromApi?: Date | string | null
    itemTypes?: SerpCreateitemTypesInput | string[]
    seResultsCount?: bigint | number | null
    itemsCount?: number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SerpCreateOrConnectWithoutResultInput = {
    where: SerpWhereUniqueInput
    create: XOR<SerpCreateWithoutResultInput, SerpUncheckedCreateWithoutResultInput>
  }

  export type SerpUpsertWithoutResultInput = {
    update: XOR<SerpUpdateWithoutResultInput, SerpUncheckedUpdateWithoutResultInput>
    create: XOR<SerpCreateWithoutResultInput, SerpUncheckedCreateWithoutResultInput>
    where?: SerpWhereInput
  }

  export type SerpUpdateToOneWithWhereWithoutResultInput = {
    where?: SerpWhereInput
    data: XOR<SerpUpdateWithoutResultInput, SerpUncheckedUpdateWithoutResultInput>
  }

  export type SerpUpdateWithoutResultInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    seDomain?: NullableStringFieldUpdateOperationsInput | string | null
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    checkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    fetchTimestampFromApi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itemTypes?: SerpUpdateitemTypesInput | string[]
    seResultsCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutSerpsNestedInput
    keyword?: KeywordUpdateOneRequiredWithoutSerpsNestedInput
  }

  export type SerpUncheckedUpdateWithoutResultInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    keywordId?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    seDomain?: NullableStringFieldUpdateOperationsInput | string | null
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    checkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    fetchTimestampFromApi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itemTypes?: SerpUpdateitemTypesInput | string[]
    seResultsCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskCreateWithoutSerpsInput = {
    id: string
    keyword: string
    statusFromApi?: string | null
    receivedTimestamp?: Date | string
    resultStatusCode?: number | null
    resultStatusMessage?: string | null
    resultTime?: string | null
    resultCost?: number | null
    resultCount?: number | null
    path?: TaskCreatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: string | null
    searchEngine?: string | null
    languageCode?: string | null
    device?: string | null
    os?: string | null
    depth?: number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutTasksInput
    seedKeyword?: KeywordCreateNestedOneWithoutTasksAsSeedInput
    keywordRelations?: KeywordRelationCreateNestedManyWithoutTaskInput
    relatedResults?: RelatedResultCreateNestedManyWithoutTaskInput
  }

  export type TaskUncheckedCreateWithoutSerpsInput = {
    id: string
    jobId: string
    seedKeywordId?: string | null
    keyword: string
    statusFromApi?: string | null
    receivedTimestamp?: Date | string
    resultStatusCode?: number | null
    resultStatusMessage?: string | null
    resultTime?: string | null
    resultCost?: number | null
    resultCount?: number | null
    path?: TaskCreatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: string | null
    searchEngine?: string | null
    languageCode?: string | null
    device?: string | null
    os?: string | null
    depth?: number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    keywordRelations?: KeywordRelationUncheckedCreateNestedManyWithoutTaskInput
    relatedResults?: RelatedResultUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutSerpsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutSerpsInput, TaskUncheckedCreateWithoutSerpsInput>
  }

  export type KeywordCreateWithoutSerpsInput = {
    id?: string
    text: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiKeywordDifficulty?: number | null
    kiMainIntent?: string | null
    kiLastUpdatedKeywordInfo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasksAsSeed?: TaskCreateNestedManyWithoutSeedKeywordInput
    relationsAsSeed?: KeywordRelationCreateNestedManyWithoutSeedKeywordInput
    relationsAsRelated?: KeywordRelationCreateNestedManyWithoutRelatedKeywordInput
    relatedResults?: RelatedResultCreateNestedManyWithoutSeedKeywordInput
    keywordProfiles?: KeywordProfileCreateNestedManyWithoutKeywordInput
  }

  export type KeywordUncheckedCreateWithoutSerpsInput = {
    id?: string
    text: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiKeywordDifficulty?: number | null
    kiMainIntent?: string | null
    kiLastUpdatedKeywordInfo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tasksAsSeed?: TaskUncheckedCreateNestedManyWithoutSeedKeywordInput
    relationsAsSeed?: KeywordRelationUncheckedCreateNestedManyWithoutSeedKeywordInput
    relationsAsRelated?: KeywordRelationUncheckedCreateNestedManyWithoutRelatedKeywordInput
    relatedResults?: RelatedResultUncheckedCreateNestedManyWithoutSeedKeywordInput
    keywordProfiles?: KeywordProfileUncheckedCreateNestedManyWithoutKeywordInput
  }

  export type KeywordCreateOrConnectWithoutSerpsInput = {
    where: KeywordWhereUniqueInput
    create: XOR<KeywordCreateWithoutSerpsInput, KeywordUncheckedCreateWithoutSerpsInput>
  }

  export type ResultCreateWithoutSerpInput = {
    id?: string
    position: number
    url: string
    type?: string | null
    title?: string | null
    snippet?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResultUncheckedCreateWithoutSerpInput = {
    id?: string
    position: number
    url: string
    type?: string | null
    title?: string | null
    snippet?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResultCreateOrConnectWithoutSerpInput = {
    where: ResultWhereUniqueInput
    create: XOR<ResultCreateWithoutSerpInput, ResultUncheckedCreateWithoutSerpInput>
  }

  export type ResultCreateManySerpInputEnvelope = {
    data: ResultCreateManySerpInput | ResultCreateManySerpInput[]
    skipDuplicates?: boolean
  }

  export type TaskUpsertWithoutSerpsInput = {
    update: XOR<TaskUpdateWithoutSerpsInput, TaskUncheckedUpdateWithoutSerpsInput>
    create: XOR<TaskCreateWithoutSerpsInput, TaskUncheckedCreateWithoutSerpsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutSerpsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutSerpsInput, TaskUncheckedUpdateWithoutSerpsInput>
  }

  export type TaskUpdateWithoutSerpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutTasksNestedInput
    seedKeyword?: KeywordUpdateOneWithoutTasksAsSeedNestedInput
    keywordRelations?: KeywordRelationUpdateManyWithoutTaskNestedInput
    relatedResults?: RelatedResultUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutSerpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: NullableStringFieldUpdateOperationsInput | string | null
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keywordRelations?: KeywordRelationUncheckedUpdateManyWithoutTaskNestedInput
    relatedResults?: RelatedResultUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type KeywordUpsertWithoutSerpsInput = {
    update: XOR<KeywordUpdateWithoutSerpsInput, KeywordUncheckedUpdateWithoutSerpsInput>
    create: XOR<KeywordCreateWithoutSerpsInput, KeywordUncheckedCreateWithoutSerpsInput>
    where?: KeywordWhereInput
  }

  export type KeywordUpdateToOneWithWhereWithoutSerpsInput = {
    where?: KeywordWhereInput
    data: XOR<KeywordUpdateWithoutSerpsInput, KeywordUncheckedUpdateWithoutSerpsInput>
  }

  export type KeywordUpdateWithoutSerpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasksAsSeed?: TaskUpdateManyWithoutSeedKeywordNestedInput
    relationsAsSeed?: KeywordRelationUpdateManyWithoutSeedKeywordNestedInput
    relationsAsRelated?: KeywordRelationUpdateManyWithoutRelatedKeywordNestedInput
    relatedResults?: RelatedResultUpdateManyWithoutSeedKeywordNestedInput
    keywordProfiles?: KeywordProfileUpdateManyWithoutKeywordNestedInput
  }

  export type KeywordUncheckedUpdateWithoutSerpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tasksAsSeed?: TaskUncheckedUpdateManyWithoutSeedKeywordNestedInput
    relationsAsSeed?: KeywordRelationUncheckedUpdateManyWithoutSeedKeywordNestedInput
    relationsAsRelated?: KeywordRelationUncheckedUpdateManyWithoutRelatedKeywordNestedInput
    relatedResults?: RelatedResultUncheckedUpdateManyWithoutSeedKeywordNestedInput
    keywordProfiles?: KeywordProfileUncheckedUpdateManyWithoutKeywordNestedInput
  }

  export type ResultUpsertWithWhereUniqueWithoutSerpInput = {
    where: ResultWhereUniqueInput
    update: XOR<ResultUpdateWithoutSerpInput, ResultUncheckedUpdateWithoutSerpInput>
    create: XOR<ResultCreateWithoutSerpInput, ResultUncheckedCreateWithoutSerpInput>
  }

  export type ResultUpdateWithWhereUniqueWithoutSerpInput = {
    where: ResultWhereUniqueInput
    data: XOR<ResultUpdateWithoutSerpInput, ResultUncheckedUpdateWithoutSerpInput>
  }

  export type ResultUpdateManyWithWhereWithoutSerpInput = {
    where: ResultScalarWhereInput
    data: XOR<ResultUpdateManyMutationInput, ResultUncheckedUpdateManyWithoutSerpInput>
  }

  export type ResultScalarWhereInput = {
    AND?: ResultScalarWhereInput | ResultScalarWhereInput[]
    OR?: ResultScalarWhereInput[]
    NOT?: ResultScalarWhereInput | ResultScalarWhereInput[]
    id?: StringFilter<"Result"> | string
    serpId?: StringFilter<"Result"> | string
    position?: IntFilter<"Result"> | number
    url?: StringFilter<"Result"> | string
    type?: StringNullableFilter<"Result"> | string | null
    title?: StringNullableFilter<"Result"> | string | null
    snippet?: StringNullableFilter<"Result"> | string | null
    createdAt?: DateTimeFilter<"Result"> | Date | string
    updatedAt?: DateTimeFilter<"Result"> | Date | string
  }

  export type JobCreateWithoutTasksInput = {
    id?: string
    status?: string | null
    version?: string | null
    statusCode?: number | null
    statusMessage?: string | null
    time?: string | null
    cost?: number | null
    tasksCount?: number | null
    tasksError?: number | null
    requestTimestamp: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobUncheckedCreateWithoutTasksInput = {
    id?: string
    status?: string | null
    version?: string | null
    statusCode?: number | null
    statusMessage?: string | null
    time?: string | null
    cost?: number | null
    tasksCount?: number | null
    tasksError?: number | null
    requestTimestamp: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobCreateOrConnectWithoutTasksInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutTasksInput, JobUncheckedCreateWithoutTasksInput>
  }

  export type KeywordCreateWithoutTasksAsSeedInput = {
    id?: string
    text: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiKeywordDifficulty?: number | null
    kiMainIntent?: string | null
    kiLastUpdatedKeywordInfo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpCreateNestedManyWithoutKeywordInput
    relationsAsSeed?: KeywordRelationCreateNestedManyWithoutSeedKeywordInput
    relationsAsRelated?: KeywordRelationCreateNestedManyWithoutRelatedKeywordInput
    relatedResults?: RelatedResultCreateNestedManyWithoutSeedKeywordInput
    keywordProfiles?: KeywordProfileCreateNestedManyWithoutKeywordInput
  }

  export type KeywordUncheckedCreateWithoutTasksAsSeedInput = {
    id?: string
    text: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiKeywordDifficulty?: number | null
    kiMainIntent?: string | null
    kiLastUpdatedKeywordInfo?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    serps?: SerpUncheckedCreateNestedManyWithoutKeywordInput
    relationsAsSeed?: KeywordRelationUncheckedCreateNestedManyWithoutSeedKeywordInput
    relationsAsRelated?: KeywordRelationUncheckedCreateNestedManyWithoutRelatedKeywordInput
    relatedResults?: RelatedResultUncheckedCreateNestedManyWithoutSeedKeywordInput
    keywordProfiles?: KeywordProfileUncheckedCreateNestedManyWithoutKeywordInput
  }

  export type KeywordCreateOrConnectWithoutTasksAsSeedInput = {
    where: KeywordWhereUniqueInput
    create: XOR<KeywordCreateWithoutTasksAsSeedInput, KeywordUncheckedCreateWithoutTasksAsSeedInput>
  }

  export type SerpCreateWithoutTaskInput = {
    id?: string
    type?: string | null
    seDomain?: string | null
    locationCode?: number | null
    languageCode?: string | null
    checkUrl?: string | null
    fetchTimestampFromApi?: Date | string | null
    itemTypes?: SerpCreateitemTypesInput | string[]
    seResultsCount?: bigint | number | null
    itemsCount?: number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    keyword: KeywordCreateNestedOneWithoutSerpsInput
    result?: ResultCreateNestedManyWithoutSerpInput
  }

  export type SerpUncheckedCreateWithoutTaskInput = {
    id?: string
    keywordId: string
    type?: string | null
    seDomain?: string | null
    locationCode?: number | null
    languageCode?: string | null
    checkUrl?: string | null
    fetchTimestampFromApi?: Date | string | null
    itemTypes?: SerpCreateitemTypesInput | string[]
    seResultsCount?: bigint | number | null
    itemsCount?: number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    result?: ResultUncheckedCreateNestedManyWithoutSerpInput
  }

  export type SerpCreateOrConnectWithoutTaskInput = {
    where: SerpWhereUniqueInput
    create: XOR<SerpCreateWithoutTaskInput, SerpUncheckedCreateWithoutTaskInput>
  }

  export type SerpCreateManyTaskInputEnvelope = {
    data: SerpCreateManyTaskInput | SerpCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type KeywordRelationCreateWithoutTaskInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    seedKeyword: KeywordCreateNestedOneWithoutRelationsAsSeedInput
    relatedKeyword: KeywordCreateNestedOneWithoutRelationsAsRelatedInput
  }

  export type KeywordRelationUncheckedCreateWithoutTaskInput = {
    id?: string
    seedKeywordId: string
    relatedKeywordId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeywordRelationCreateOrConnectWithoutTaskInput = {
    where: KeywordRelationWhereUniqueInput
    create: XOR<KeywordRelationCreateWithoutTaskInput, KeywordRelationUncheckedCreateWithoutTaskInput>
  }

  export type KeywordRelationCreateManyTaskInputEnvelope = {
    data: KeywordRelationCreateManyTaskInput | KeywordRelationCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type RelatedResultCreateWithoutTaskInput = {
    id?: string
    seType?: string | null
    seedKeywords?: RelatedResultCreateseedKeywordsInput | string[]
    locationCode?: number | null
    languageCode?: string | null
    totalCount?: bigint | number | null
    itemsCount?: number | null
    offset?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    seedKeyword: KeywordCreateNestedOneWithoutRelatedResultsInput
  }

  export type RelatedResultUncheckedCreateWithoutTaskInput = {
    id?: string
    seedKeywordId: string
    seType?: string | null
    seedKeywords?: RelatedResultCreateseedKeywordsInput | string[]
    locationCode?: number | null
    languageCode?: string | null
    totalCount?: bigint | number | null
    itemsCount?: number | null
    offset?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RelatedResultCreateOrConnectWithoutTaskInput = {
    where: RelatedResultWhereUniqueInput
    create: XOR<RelatedResultCreateWithoutTaskInput, RelatedResultUncheckedCreateWithoutTaskInput>
  }

  export type RelatedResultCreateManyTaskInputEnvelope = {
    data: RelatedResultCreateManyTaskInput | RelatedResultCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type JobUpsertWithoutTasksInput = {
    update: XOR<JobUpdateWithoutTasksInput, JobUncheckedUpdateWithoutTasksInput>
    create: XOR<JobCreateWithoutTasksInput, JobUncheckedCreateWithoutTasksInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutTasksInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutTasksInput, JobUncheckedUpdateWithoutTasksInput>
  }

  export type JobUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    statusCode?: NullableIntFieldUpdateOperationsInput | number | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    tasksCount?: NullableIntFieldUpdateOperationsInput | number | null
    tasksError?: NullableIntFieldUpdateOperationsInput | number | null
    requestTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    statusCode?: NullableIntFieldUpdateOperationsInput | number | null
    statusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    time?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    tasksCount?: NullableIntFieldUpdateOperationsInput | number | null
    tasksError?: NullableIntFieldUpdateOperationsInput | number | null
    requestTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordUpsertWithoutTasksAsSeedInput = {
    update: XOR<KeywordUpdateWithoutTasksAsSeedInput, KeywordUncheckedUpdateWithoutTasksAsSeedInput>
    create: XOR<KeywordCreateWithoutTasksAsSeedInput, KeywordUncheckedCreateWithoutTasksAsSeedInput>
    where?: KeywordWhereInput
  }

  export type KeywordUpdateToOneWithWhereWithoutTasksAsSeedInput = {
    where?: KeywordWhereInput
    data: XOR<KeywordUpdateWithoutTasksAsSeedInput, KeywordUncheckedUpdateWithoutTasksAsSeedInput>
  }

  export type KeywordUpdateWithoutTasksAsSeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUpdateManyWithoutKeywordNestedInput
    relationsAsSeed?: KeywordRelationUpdateManyWithoutSeedKeywordNestedInput
    relationsAsRelated?: KeywordRelationUpdateManyWithoutRelatedKeywordNestedInput
    relatedResults?: RelatedResultUpdateManyWithoutSeedKeywordNestedInput
    keywordProfiles?: KeywordProfileUpdateManyWithoutKeywordNestedInput
  }

  export type KeywordUncheckedUpdateWithoutTasksAsSeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kiMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    kiLastUpdatedKeywordInfo?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUncheckedUpdateManyWithoutKeywordNestedInput
    relationsAsSeed?: KeywordRelationUncheckedUpdateManyWithoutSeedKeywordNestedInput
    relationsAsRelated?: KeywordRelationUncheckedUpdateManyWithoutRelatedKeywordNestedInput
    relatedResults?: RelatedResultUncheckedUpdateManyWithoutSeedKeywordNestedInput
    keywordProfiles?: KeywordProfileUncheckedUpdateManyWithoutKeywordNestedInput
  }

  export type SerpUpsertWithWhereUniqueWithoutTaskInput = {
    where: SerpWhereUniqueInput
    update: XOR<SerpUpdateWithoutTaskInput, SerpUncheckedUpdateWithoutTaskInput>
    create: XOR<SerpCreateWithoutTaskInput, SerpUncheckedCreateWithoutTaskInput>
  }

  export type SerpUpdateWithWhereUniqueWithoutTaskInput = {
    where: SerpWhereUniqueInput
    data: XOR<SerpUpdateWithoutTaskInput, SerpUncheckedUpdateWithoutTaskInput>
  }

  export type SerpUpdateManyWithWhereWithoutTaskInput = {
    where: SerpScalarWhereInput
    data: XOR<SerpUpdateManyMutationInput, SerpUncheckedUpdateManyWithoutTaskInput>
  }

  export type KeywordRelationUpsertWithWhereUniqueWithoutTaskInput = {
    where: KeywordRelationWhereUniqueInput
    update: XOR<KeywordRelationUpdateWithoutTaskInput, KeywordRelationUncheckedUpdateWithoutTaskInput>
    create: XOR<KeywordRelationCreateWithoutTaskInput, KeywordRelationUncheckedCreateWithoutTaskInput>
  }

  export type KeywordRelationUpdateWithWhereUniqueWithoutTaskInput = {
    where: KeywordRelationWhereUniqueInput
    data: XOR<KeywordRelationUpdateWithoutTaskInput, KeywordRelationUncheckedUpdateWithoutTaskInput>
  }

  export type KeywordRelationUpdateManyWithWhereWithoutTaskInput = {
    where: KeywordRelationScalarWhereInput
    data: XOR<KeywordRelationUpdateManyMutationInput, KeywordRelationUncheckedUpdateManyWithoutTaskInput>
  }

  export type RelatedResultUpsertWithWhereUniqueWithoutTaskInput = {
    where: RelatedResultWhereUniqueInput
    update: XOR<RelatedResultUpdateWithoutTaskInput, RelatedResultUncheckedUpdateWithoutTaskInput>
    create: XOR<RelatedResultCreateWithoutTaskInput, RelatedResultUncheckedCreateWithoutTaskInput>
  }

  export type RelatedResultUpdateWithWhereUniqueWithoutTaskInput = {
    where: RelatedResultWhereUniqueInput
    data: XOR<RelatedResultUpdateWithoutTaskInput, RelatedResultUncheckedUpdateWithoutTaskInput>
  }

  export type RelatedResultUpdateManyWithWhereWithoutTaskInput = {
    where: RelatedResultScalarWhereInput
    data: XOR<RelatedResultUpdateManyMutationInput, RelatedResultUncheckedUpdateManyWithoutTaskInput>
  }

  export type TaskCreateManyJobInput = {
    id: string
    seedKeywordId?: string | null
    keyword: string
    statusFromApi?: string | null
    receivedTimestamp?: Date | string
    resultStatusCode?: number | null
    resultStatusMessage?: string | null
    resultTime?: string | null
    resultCost?: number | null
    resultCount?: number | null
    path?: TaskCreatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: string | null
    searchEngine?: string | null
    languageCode?: string | null
    device?: string | null
    os?: string | null
    depth?: number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seedKeyword?: KeywordUpdateOneWithoutTasksAsSeedNestedInput
    serps?: SerpUpdateManyWithoutTaskNestedInput
    keywordRelations?: KeywordRelationUpdateManyWithoutTaskNestedInput
    relatedResults?: RelatedResultUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: NullableStringFieldUpdateOperationsInput | string | null
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUncheckedUpdateManyWithoutTaskNestedInput
    keywordRelations?: KeywordRelationUncheckedUpdateManyWithoutTaskNestedInput
    relatedResults?: RelatedResultUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: NullableStringFieldUpdateOperationsInput | string | null
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SerpCreateManyKeywordInput = {
    id?: string
    taskId: string
    type?: string | null
    seDomain?: string | null
    locationCode?: number | null
    languageCode?: string | null
    checkUrl?: string | null
    fetchTimestampFromApi?: Date | string | null
    itemTypes?: SerpCreateitemTypesInput | string[]
    seResultsCount?: bigint | number | null
    itemsCount?: number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateManySeedKeywordInput = {
    id: string
    jobId: string
    keyword: string
    statusFromApi?: string | null
    receivedTimestamp?: Date | string
    resultStatusCode?: number | null
    resultStatusMessage?: string | null
    resultTime?: string | null
    resultCost?: number | null
    resultCount?: number | null
    path?: TaskCreatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: string | null
    searchEngine?: string | null
    languageCode?: string | null
    device?: string | null
    os?: string | null
    depth?: number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeywordRelationCreateManySeedKeywordInput = {
    id?: string
    relatedKeywordId: string
    taskId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeywordRelationCreateManyRelatedKeywordInput = {
    id?: string
    seedKeywordId: string
    taskId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RelatedResultCreateManySeedKeywordInput = {
    id?: string
    taskId: string
    seType?: string | null
    seedKeywords?: RelatedResultCreateseedKeywordsInput | string[]
    locationCode?: number | null
    languageCode?: string | null
    totalCount?: bigint | number | null
    itemsCount?: number | null
    offset?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeywordProfileCreateManyKeywordInput = {
    id?: string
    locationCode: number
    languageCode: string
    kiLastCheck?: Date | string | null
    kiCompetition?: number | null
    kiCompetitionLevel?: string | null
    kiCpc?: number | null
    kiSearchVolume?: number | null
    kiLowTopOfPageBid?: number | null
    kiHighTopOfPageBid?: number | null
    kiCategories?: KeywordProfileCreatekiCategoriesInput | number[]
    kiMonthlySearches?: NullableJsonNullValueInput | InputJsonValue
    kpSynonymClusteringAlgorithm?: string | null
    kpKeywordDifficulty?: number | null
    kpDetectedLanguage?: string | null
    kpIsAnotherLanguage?: boolean | null
    avgBacklinks?: number | null
    avgDofollow?: number | null
    avgReferringPages?: number | null
    avgReferringDomains?: number | null
    avgReferringMainDomains?: number | null
    avgRank?: number | null
    avgMainDomainRank?: number | null
    avgLastUpdatedTime?: Date | string | null
    siMainIntent?: string | null
    relatedKeywordIds?: KeywordProfileCreaterelatedKeywordIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SerpUpdateWithoutKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    seDomain?: NullableStringFieldUpdateOperationsInput | string | null
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    checkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    fetchTimestampFromApi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itemTypes?: SerpUpdateitemTypesInput | string[]
    seResultsCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutSerpsNestedInput
    result?: ResultUpdateManyWithoutSerpNestedInput
  }

  export type SerpUncheckedUpdateWithoutKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    seDomain?: NullableStringFieldUpdateOperationsInput | string | null
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    checkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    fetchTimestampFromApi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itemTypes?: SerpUpdateitemTypesInput | string[]
    seResultsCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    result?: ResultUncheckedUpdateManyWithoutSerpNestedInput
  }

  export type SerpUncheckedUpdateManyWithoutKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    seDomain?: NullableStringFieldUpdateOperationsInput | string | null
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    checkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    fetchTimestampFromApi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itemTypes?: SerpUpdateitemTypesInput | string[]
    seResultsCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUpdateWithoutSeedKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutTasksNestedInput
    serps?: SerpUpdateManyWithoutTaskNestedInput
    keywordRelations?: KeywordRelationUpdateManyWithoutTaskNestedInput
    relatedResults?: RelatedResultUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateWithoutSeedKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    serps?: SerpUncheckedUpdateManyWithoutTaskNestedInput
    keywordRelations?: KeywordRelationUncheckedUpdateManyWithoutTaskNestedInput
    relatedResults?: RelatedResultUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutSeedKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    keyword?: StringFieldUpdateOperationsInput | string
    statusFromApi?: NullableStringFieldUpdateOperationsInput | string | null
    receivedTimestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    resultStatusCode?: NullableIntFieldUpdateOperationsInput | number | null
    resultStatusMessage?: NullableStringFieldUpdateOperationsInput | string | null
    resultTime?: NullableStringFieldUpdateOperationsInput | string | null
    resultCost?: NullableFloatFieldUpdateOperationsInput | number | null
    resultCount?: NullableIntFieldUpdateOperationsInput | number | null
    path?: TaskUpdatepathInput | string[]
    resultPath?: NullableJsonNullValueInput | InputJsonValue
    location?: NullableStringFieldUpdateOperationsInput | string | null
    searchEngine?: NullableStringFieldUpdateOperationsInput | string | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    device?: NullableStringFieldUpdateOperationsInput | string | null
    os?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: NullableIntFieldUpdateOperationsInput | number | null
    errorDetails?: NullableJsonNullValueInput | InputJsonValue
    resultData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordRelationUpdateWithoutSeedKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    relatedKeyword?: KeywordUpdateOneRequiredWithoutRelationsAsRelatedNestedInput
    task?: TaskUpdateOneRequiredWithoutKeywordRelationsNestedInput
  }

  export type KeywordRelationUncheckedUpdateWithoutSeedKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    relatedKeywordId?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordRelationUncheckedUpdateManyWithoutSeedKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    relatedKeywordId?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordRelationUpdateWithoutRelatedKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seedKeyword?: KeywordUpdateOneRequiredWithoutRelationsAsSeedNestedInput
    task?: TaskUpdateOneRequiredWithoutKeywordRelationsNestedInput
  }

  export type KeywordRelationUncheckedUpdateWithoutRelatedKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordRelationUncheckedUpdateManyWithoutRelatedKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RelatedResultUpdateWithoutSeedKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    seType?: NullableStringFieldUpdateOperationsInput | string | null
    seedKeywords?: RelatedResultUpdateseedKeywordsInput | string[]
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    totalCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    offset?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: TaskUpdateOneRequiredWithoutRelatedResultsNestedInput
  }

  export type RelatedResultUncheckedUpdateWithoutSeedKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    seType?: NullableStringFieldUpdateOperationsInput | string | null
    seedKeywords?: RelatedResultUpdateseedKeywordsInput | string[]
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    totalCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    offset?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RelatedResultUncheckedUpdateManyWithoutSeedKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    taskId?: StringFieldUpdateOperationsInput | string
    seType?: NullableStringFieldUpdateOperationsInput | string | null
    seedKeywords?: RelatedResultUpdateseedKeywordsInput | string[]
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    totalCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    offset?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordProfileUpdateWithoutKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationCode?: IntFieldUpdateOperationsInput | number
    languageCode?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCategories?: KeywordProfileUpdatekiCategoriesInput | number[]
    kiMonthlySearches?: NullableJsonNullValueInput | InputJsonValue
    kpSynonymClusteringAlgorithm?: NullableStringFieldUpdateOperationsInput | string | null
    kpKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kpDetectedLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    kpIsAnotherLanguage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    avgBacklinks?: NullableFloatFieldUpdateOperationsInput | number | null
    avgDofollow?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringPages?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringDomains?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringMainDomains?: NullableFloatFieldUpdateOperationsInput | number | null
    avgRank?: NullableFloatFieldUpdateOperationsInput | number | null
    avgMainDomainRank?: NullableFloatFieldUpdateOperationsInput | number | null
    avgLastUpdatedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    siMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    relatedKeywordIds?: KeywordProfileUpdaterelatedKeywordIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordProfileUncheckedUpdateWithoutKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationCode?: IntFieldUpdateOperationsInput | number
    languageCode?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCategories?: KeywordProfileUpdatekiCategoriesInput | number[]
    kiMonthlySearches?: NullableJsonNullValueInput | InputJsonValue
    kpSynonymClusteringAlgorithm?: NullableStringFieldUpdateOperationsInput | string | null
    kpKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kpDetectedLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    kpIsAnotherLanguage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    avgBacklinks?: NullableFloatFieldUpdateOperationsInput | number | null
    avgDofollow?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringPages?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringDomains?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringMainDomains?: NullableFloatFieldUpdateOperationsInput | number | null
    avgRank?: NullableFloatFieldUpdateOperationsInput | number | null
    avgMainDomainRank?: NullableFloatFieldUpdateOperationsInput | number | null
    avgLastUpdatedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    siMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    relatedKeywordIds?: KeywordProfileUpdaterelatedKeywordIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordProfileUncheckedUpdateManyWithoutKeywordInput = {
    id?: StringFieldUpdateOperationsInput | string
    locationCode?: IntFieldUpdateOperationsInput | number
    languageCode?: StringFieldUpdateOperationsInput | string
    kiLastCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    kiCompetition?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCompetitionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    kiCpc?: NullableFloatFieldUpdateOperationsInput | number | null
    kiSearchVolume?: NullableIntFieldUpdateOperationsInput | number | null
    kiLowTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiHighTopOfPageBid?: NullableFloatFieldUpdateOperationsInput | number | null
    kiCategories?: KeywordProfileUpdatekiCategoriesInput | number[]
    kiMonthlySearches?: NullableJsonNullValueInput | InputJsonValue
    kpSynonymClusteringAlgorithm?: NullableStringFieldUpdateOperationsInput | string | null
    kpKeywordDifficulty?: NullableIntFieldUpdateOperationsInput | number | null
    kpDetectedLanguage?: NullableStringFieldUpdateOperationsInput | string | null
    kpIsAnotherLanguage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    avgBacklinks?: NullableFloatFieldUpdateOperationsInput | number | null
    avgDofollow?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringPages?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringDomains?: NullableFloatFieldUpdateOperationsInput | number | null
    avgReferringMainDomains?: NullableFloatFieldUpdateOperationsInput | number | null
    avgRank?: NullableFloatFieldUpdateOperationsInput | number | null
    avgMainDomainRank?: NullableFloatFieldUpdateOperationsInput | number | null
    avgLastUpdatedTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    siMainIntent?: NullableStringFieldUpdateOperationsInput | string | null
    relatedKeywordIds?: KeywordProfileUpdaterelatedKeywordIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResultCreateManySerpInput = {
    id?: string
    position: number
    url: string
    type?: string | null
    title?: string | null
    snippet?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResultUpdateWithoutSerpInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    snippet?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResultUncheckedUpdateWithoutSerpInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    snippet?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResultUncheckedUpdateManyWithoutSerpInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    snippet?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SerpCreateManyTaskInput = {
    id?: string
    keywordId: string
    type?: string | null
    seDomain?: string | null
    locationCode?: number | null
    languageCode?: string | null
    checkUrl?: string | null
    fetchTimestampFromApi?: Date | string | null
    itemTypes?: SerpCreateitemTypesInput | string[]
    seResultsCount?: bigint | number | null
    itemsCount?: number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KeywordRelationCreateManyTaskInput = {
    id?: string
    seedKeywordId: string
    relatedKeywordId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RelatedResultCreateManyTaskInput = {
    id?: string
    seedKeywordId: string
    seType?: string | null
    seedKeywords?: RelatedResultCreateseedKeywordsInput | string[]
    locationCode?: number | null
    languageCode?: string | null
    totalCount?: bigint | number | null
    itemsCount?: number | null
    offset?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SerpUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    seDomain?: NullableStringFieldUpdateOperationsInput | string | null
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    checkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    fetchTimestampFromApi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itemTypes?: SerpUpdateitemTypesInput | string[]
    seResultsCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    keyword?: KeywordUpdateOneRequiredWithoutSerpsNestedInput
    result?: ResultUpdateManyWithoutSerpNestedInput
  }

  export type SerpUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    keywordId?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    seDomain?: NullableStringFieldUpdateOperationsInput | string | null
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    checkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    fetchTimestampFromApi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itemTypes?: SerpUpdateitemTypesInput | string[]
    seResultsCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    result?: ResultUncheckedUpdateManyWithoutSerpNestedInput
  }

  export type SerpUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    keywordId?: StringFieldUpdateOperationsInput | string
    type?: NullableStringFieldUpdateOperationsInput | string | null
    seDomain?: NullableStringFieldUpdateOperationsInput | string | null
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    checkUrl?: NullableStringFieldUpdateOperationsInput | string | null
    fetchTimestampFromApi?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    itemTypes?: SerpUpdateitemTypesInput | string[]
    seResultsCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    refinementChips?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordRelationUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seedKeyword?: KeywordUpdateOneRequiredWithoutRelationsAsSeedNestedInput
    relatedKeyword?: KeywordUpdateOneRequiredWithoutRelationsAsRelatedNestedInput
  }

  export type KeywordRelationUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: StringFieldUpdateOperationsInput | string
    relatedKeywordId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KeywordRelationUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: StringFieldUpdateOperationsInput | string
    relatedKeywordId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RelatedResultUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    seType?: NullableStringFieldUpdateOperationsInput | string | null
    seedKeywords?: RelatedResultUpdateseedKeywordsInput | string[]
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    totalCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    offset?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seedKeyword?: KeywordUpdateOneRequiredWithoutRelatedResultsNestedInput
  }

  export type RelatedResultUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: StringFieldUpdateOperationsInput | string
    seType?: NullableStringFieldUpdateOperationsInput | string | null
    seedKeywords?: RelatedResultUpdateseedKeywordsInput | string[]
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    totalCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    offset?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RelatedResultUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    seedKeywordId?: StringFieldUpdateOperationsInput | string
    seType?: NullableStringFieldUpdateOperationsInput | string | null
    seedKeywords?: RelatedResultUpdateseedKeywordsInput | string[]
    locationCode?: NullableIntFieldUpdateOperationsInput | number | null
    languageCode?: NullableStringFieldUpdateOperationsInput | string | null
    totalCount?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    itemsCount?: NullableIntFieldUpdateOperationsInput | number | null
    offset?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}