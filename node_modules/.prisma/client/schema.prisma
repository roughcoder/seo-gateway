// Domain: Jobs - Represents a group of tasks (e.g., a single API request batch)

model Job {
  // ID
  id String @id @default(cuid())

  // Optional API Metadata from DataForSEO
  status        String? // e.g., PENDING, RUNNING, COMPLETED, FAILED
  version       String? // API Version from DataForSEO
  statusCode    Int?    @map("status_code")
  statusMessage String? @map("status_message")
  time          String? // Overall time taken from DataForSEO job response
  cost          Float? // Overall cost from DataForSEO job response
  tasksCount    Int?    @map("tasks_count")
  tasksError    Int?    @map("tasks_error")

  // Timestamps (REQUIRED for ALL models)
  requestTimestamp DateTime @map("request_timestamp") // Renamed for clarity, still required
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  tasks Task[] // Relation to tasks associated with this job

  // Mapping
  @@map("jobs")
}

// Domain: Keyword Profiles - Stores detailed metrics and properties for keywords at specific locations/languages

model KeywordProfile {
  // ID
  id String @id @default(cuid())

  // Foreign Key to Keyword
  keywordId String @map("keyword_id")

  // Part of unique constraint
  locationCode Int    @map("location_code")
  languageCode String @map("language_code")

  // Keyword Info Data (from keyword_info)
  kiLastCheck        DateTime? @map("ki_last_check") // Consider renaming or mapping? Using lastUpdatedTime from API?
  kiCompetition      Float?    @map("ki_competition")
  kiCompetitionLevel String?   @map("ki_competition_level")
  kiCpc              Float?    @map("ki_cpc")
  kiSearchVolume     Int?      @map("ki_search_volume")
  kiLowTopOfPageBid  Float?    @map("ki_low_top_of_page_bid")
  kiHighTopOfPageBid Float?    @map("ki_high_top_of_page_bid")
  kiCategories       Int[]     @map("ki_categories") // Array of numbers
  kiMonthlySearches  Json?     @map("ki_monthly_searches") // Store array of objects as JSON

  // Keyword Properties Data (from keyword_properties)
  kpSynonymClusteringAlgorithm String?  @map("kp_synonym_clustering_algorithm")
  kpKeywordDifficulty          Int?     @map("kp_keyword_difficulty")
  kpDetectedLanguage           String?  @map("kp_detected_language")
  kpIsAnotherLanguage          Boolean? @map("kp_is_another_language")

  // Avg Backlinks Info Data (from avg_backlinks_info)
  avgBacklinks            Float?    @map("avg_backlinks")
  avgDofollow             Float?    @map("avg_dofollow")
  avgReferringPages       Float?    @map("avg_referring_pages")
  avgReferringDomains     Float?    @map("avg_referring_domains")
  avgReferringMainDomains Float?    @map("avg_referring_main_domains")
  avgRank                 Float?    @map("avg_rank")
  avgMainDomainRank       Float?    @map("avg_main_domain_rank")
  avgLastUpdatedTime      DateTime? @map("avg_last_updated_time")

  // Search Intent Info Data (from search_intent_info)
  siMainIntent String? @map("si_main_intent")

  // --- Added Field for Caching Related Keywords ---
  relatedKeywordIds String[] @default([]) @map("related_keyword_ids") // Store IDs of related keywords found for this profile

  // Timestamps (REQUIRED for ALL models)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  keyword Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  // Constraints & Indexes
  @@unique([keywordId, locationCode, languageCode], name: "keyword_location_language_unique") // Unique constraint based on keyword, location, and language
  @@index([keywordId])
  // Mapping
  @@map("keyword_profiles")
}

// Domain: Keyword Relations - Defines the relationship between seed keywords and related keywords found via API

model KeywordRelation {
  // ID
  id String @id @default(cuid())

  // Required Foreign Keys
  seedKeywordId    String @map("seed_keyword_id") // Foreign key to the seed Keyword
  relatedKeywordId String @map("related_keyword_id") // Foreign key to the related Keyword
  taskId           String @map("task_id") // Foreign key to the Task that generated this relation

  // Timestamps (REQUIRED for ALL models)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  seedKeyword    Keyword @relation("SeedKeyword", fields: [seedKeywordId], references: [id], onDelete: Cascade)
  relatedKeyword Keyword @relation("RelatedKeyword", fields: [relatedKeywordId], references: [id], onDelete: Cascade)
  task           Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  // Constraints & Indexes
  @@unique([seedKeywordId, relatedKeywordId]) // Prevent duplicate relationships
  @@index([taskId])
  // Mapping
  @@map("keyword_relations")
}

// Domain: Keywords - Represents the search keywords used for SERP lookups

model Keyword {
  // ID
  id String @id @default(cuid())

  // Required fields
  text String @unique // The actual keyword text

  // --- Added Fields for Keyword Ideas data ---
  kiLastCheck              DateTime? // Timestamp of last Keyword Ideas API update
  kiCompetition            Float? // Keyword Ideas: Competition score
  kiCompetitionLevel       String? // Keyword Ideas: Competition level (e.g., "HIGH")
  kiCpc                    Float? // Keyword Ideas: Cost Per Click
  kiSearchVolume           Int? // Keyword Ideas: Average monthly search volume
  kiLowTopOfPageBid        Float? // Keyword Ideas: Low top-of-page bid
  kiHighTopOfPageBid       Float? // Keyword Ideas: High top-of-page bid
  kiKeywordDifficulty      Int? // Keyword Ideas: Keyword difficulty score
  kiMainIntent             String? // Keyword Ideas: Main search intent (e.g., "transactional")
  kiLastUpdatedKeywordInfo DateTime? // Keyword Ideas: Timestamp from API's keyword_info.last_updated_time
  // --- End Added Fields ---

  // Timestamps (REQUIRED for ALL models)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  serps              Serp[] // A keyword can be associated with multiple SERPs
  tasksAsSeed        Task[]            @relation("SeedKeywordTasks") // Tasks where this keyword is the seed
  relationsAsSeed    KeywordRelation[] @relation("SeedKeyword") // Relations where this keyword is the seed
  relationsAsRelated KeywordRelation[] @relation("RelatedKeyword") // Relations where this keyword is related
  relatedResults     RelatedResult[]   @relation("RelatedResultSeed") // Inverse relation for RelatedResult seed keywords
  keywordProfiles    KeywordProfile[] // Profiles associated with this keyword

  // Mapping
  @@map("keywords")
}

// Domain: Related Results - Represents the metadata for a set of related keywords from a Task

model RelatedResult {
  // ID
  id String @id @default(cuid())

  // Required Foreign Keys
  taskId        String @map("task_id") // Link to the Task that generated this result metadata
  seedKeywordId String @map("seed_keyword_id") // Link to the SEED Keyword this result is for

  // Metadata from API Result Array
  seType       String?  @map("se_type") // e.g., "google"
  seedKeywords String[] @map("seed_keywords") // The seed keywords array echoed in the result
  locationCode Int?     @map("location_code")
  languageCode String?  @map("language_code")
  totalCount   BigInt?  @map("total_count") // Use BigInt for potentially large counts
  itemsCount   Int?     @map("items_count") // Number of related items/keywords returned
  offset       Int?

  // Timestamps (REQUIRED for ALL models)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  task        Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  // NOTE: This assumes the seedKeywordId refers to the Keyword model.
  // Adjust relation name if needed, ensuring it doesn't conflict with existing relations on Keyword.
  seedKeyword Keyword @relation("RelatedResultSeed", fields: [seedKeywordId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([taskId])
  @@index([seedKeywordId])
  // Mapping
  @@map("related_results")
}

// Domain: Results - Represents individual items within a SERP (e.g., organic listing)

model Result {
  // ID
  id String @id @default(cuid())

  // Required Foreign Key
  serpId String @map("serp_id") // Link to the SERP this result belongs to

  // Core Result Data from API
  position Int // Absolute rank position
  url      String  @db.Text // URL of the result
  type     String? // e.g., "organic", "paid"
  title    String? @db.Text // Title of the result
  snippet  String? @db.Text // Description snippet

  // Timestamps (REQUIRED for ALL models)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  serp Serp @relation(fields: [serpId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([serpId])
  // Mapping
  @@map("results")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Optional: Direct connection for migrations
}

// Domain: Serps - Represents the metadata of a fetched Search Engine Results Page

model Serp {
  // ID
  id String @id @default(cuid())

  // Required Foreign Keys
  taskId    String @map("task_id") // Link to the Task that fetched this SERP
  keywordId String @map("keyword_id") // Link to the Keyword this SERP is for

  // SERP Metadata from API
  type                  String? // e.g., "organic"
  seDomain              String?   @map("se_domain") // Search engine domain
  locationCode          Int?      @map("location_code")
  languageCode          String?   @map("language_code")
  checkUrl              String?   @map("check_url") // URL checked
  fetchTimestampFromApi DateTime? @map("fetch_timestamp_from_api") // Timestamp from the API result's datetime field
  itemTypes             String[]  @map("item_types") // List of item types present (e.g., ["organic", "paid"])
  seResultsCount        BigInt?   @map("se_results_count") // Total results reported by the search engine
  itemsCount            Int?      @map("items_count") // Number of items returned in the API result
  refinementChips       Json?     @map("refinement_chips") // Changed back to Json? to try and prevent drop/recreate

  // Timestamps (REQUIRED for ALL models)
  createdAt DateTime @default(now()) @map("created_at") // Timestamp when the record was created in our DB
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  task    Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  keyword Keyword  @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  result  Result[]

  // Indexes
  @@index([taskId])
  @@index([keywordId])
  @@index([createdAt]) // Index for sorting/finding recent SERPs
  // Mapping
  @@map("serps")
}

// Domain: Tasks - Represents individual DataForSEO tasks within a Job

model Task {
  // ID (Using the ID from the external API as primary key)
  id String @id @map("api_task_id")

  // Required Foreign Keys
  jobId         String  @map("job_id") // Link to the Job this task belongs to
  seedKeywordId String? @map("seed_keyword_id") // Link to the seed Keyword for this task - Made Optional
  keyword       String // Re-added keyword field, assuming required

  // API Task Metadata
  statusFromApi       String?  @map("status_from_api") // Status message from the API Task (e.g., "Ok.")
  receivedTimestamp   DateTime @default(now()) @map("received_timestamp") // When we received the task result
  resultStatusCode    Int?     @map("result_status_code")
  resultStatusMessage String?  @map("result_status_message")
  resultTime          String?  @map("result_time")
  resultCost          Float?   @map("result_cost")
  resultCount         Int?     @map("result_count")
  path                String[] // API path array (e.g., ["v3", "serp", "google", "organic", "live", "advanced"])
  resultPath          Json?    @map("result_path") // Re-added result path field, assuming optional Json

  // Request Data Echoed in Result
  location     String? // Location code used (string representation)
  searchEngine String? @map("search_engine")
  languageCode String? @map("language_code")
  device       String?
  os           String?
  depth        Int?

  // Error Handling & Original Data
  errorDetails Json? @map("error_details") // Store API error details if any
  resultData   Json? @map("result_data") // Store the original request data payload for the task

  // Timestamps (REQUIRED for ALL models)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  job              Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  seedKeyword      Keyword?          @relation("SeedKeywordTasks", fields: [seedKeywordId], references: [id])
  serps            Serp[] // Relation to SERPs generated by this task
  keywordRelations KeywordRelation[] // Relations generated by this task
  relatedResults   RelatedResult[] // Relation to related result metadata generated by this task

  // Indexes
  @@index([jobId])
  @@index([seedKeywordId])
  // Mapping
  @@map("tasks")
}
