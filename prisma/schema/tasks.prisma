// Domain: Tasks - Represents individual DataForSEO tasks within a Job

model Task {
  // ID (Using the ID from the external API as primary key)
  id              String  @id @map("api_task_id")

  // Required Foreign Keys
  jobId               String   @map("job_id") // Link to the Job this task belongs to
  seedKeywordId       String?  @map("seed_keyword_id") // Link to the seed Keyword for this task - Made Optional
  keyword             String   // Re-added keyword field, assuming required

  // API Task Metadata
  statusFromApi       String?  @map("status_from_api") // Status message from the API Task (e.g., "Ok.")
  receivedTimestamp   DateTime @default(now()) @map("received_timestamp") // When we received the task result
  resultStatusCode    Int?     @map("result_status_code")
  resultStatusMessage String?  @map("result_status_message")
  resultTime          String?  @map("result_time")
  resultCost          Float?   @map("result_cost")
  resultCount         Int?     @map("result_count")
  path                String[] // API path array (e.g., ["v3", "serp", "google", "organic", "live", "advanced"])
  resultPath          Json?    @map("result_path") // Re-added result path field, assuming optional Json

  // Request Data Echoed in Result
  location            String?  // Location code used (string representation)
  searchEngine        String?  @map("search_engine")
  languageCode        String?  @map("language_code")
  device              String?
  os                  String?
  depth               Int?

  // Error Handling & Original Data
  errorDetails        Json?    @map("error_details") // Store API error details if any
  resultData          Json?    @map("result_data") // Store the original request data payload for the task

  // Timestamps (REQUIRED for ALL models)
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relations
  job                 Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  seedKeyword         Keyword? @relation("SeedKeywordTasks", fields: [seedKeywordId], references: [id])
  serps               Serp[]   // Relation to SERPs generated by this task
  keywordRelations    KeywordRelation[] // Relations generated by this task
  relatedResults      RelatedResult[] // Relation to related result metadata generated by this task

  // Indexes
  @@index([jobId])
  @@index([seedKeywordId])

  // Mapping
  @@map("tasks")
} 